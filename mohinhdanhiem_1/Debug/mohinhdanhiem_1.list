
mohinhdanhiem_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007554  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08007664  08007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007980  08007980  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08007980  08007980  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007980  08007980  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007980  08007980  00017980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011cc  2000008c  08007a14  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  08007a14  00021258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001819d  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000371e  00000000  00000000  00038252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  0003d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af21  00000000  00000000  0003e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019687  00000000  00000000  00059471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b23c  00000000  00000000  00072af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dd34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006734  00000000  00000000  0010dd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800764c 	.word	0x0800764c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	0800764c 	.word	0x0800764c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_f2uiz>:
 800037c:	0042      	lsls	r2, r0, #1
 800037e:	d20e      	bcs.n	800039e <__aeabi_f2uiz+0x22>
 8000380:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000384:	d30b      	bcc.n	800039e <__aeabi_f2uiz+0x22>
 8000386:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800038a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800038e:	d409      	bmi.n	80003a4 <__aeabi_f2uiz+0x28>
 8000390:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000398:	fa23 f002 	lsr.w	r0, r3, r2
 800039c:	4770      	bx	lr
 800039e:	f04f 0000 	mov.w	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80003a8:	d101      	bne.n	80003ae <__aeabi_f2uiz+0x32>
 80003aa:	0242      	lsls	r2, r0, #9
 80003ac:	d102      	bne.n	80003b4 <__aeabi_f2uiz+0x38>
 80003ae:	f04f 30ff 	mov.w	r0, #4294967295
 80003b2:	4770      	bx	lr
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop

080003bc <DS18B20_DelayInit>:
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name* DS18B20)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f98a 	bl	80006e2 <DELAY_TIM_Init>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name* DS18B20, uint16_t Time)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	460b      	mov	r3, r1
 80003e0:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	887a      	ldrh	r2, [r7, #2]
 80003e8:	4611      	mov	r1, r2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f984 	bl	80006f8 <DELAY_TIM_Us>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name* DS18B20, uint16_t Time)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	460b      	mov	r3, r1
 8000402:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	887a      	ldrh	r2, [r7, #2]
 800040a:	4611      	mov	r1, r2
 800040c:	4618      	mov	r0, r3
 800040e:	f000 f98a 	bl	8000726 <DELAY_TIM_Ms>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name* DS18B20)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b086      	sub	sp, #24
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	889b      	ldrh	r3, [r3, #4]
 8000434:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2302      	movs	r3, #2
 800043c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	f107 0208 	add.w	r2, r7, #8
 8000446:	4611      	mov	r1, r2
 8000448:	4618      	mov	r0, r3
 800044a:	f001 ff01 	bl	8002250 <HAL_GPIO_Init>
}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name* DS18B20)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	889b      	ldrh	r3, [r3, #4]
 8000470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000476:	2301      	movs	r3, #1
 8000478:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	f107 0208 	add.w	r2, r7, #8
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f001 fee3 	bl	8002250 <HAL_GPIO_Init>
}
 800048a:	bf00      	nop
 800048c:	3718      	adds	r7, #24
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name* DS18B20, uint8_t Value)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	460b      	mov	r3, r1
 800049c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6898      	ldr	r0, [r3, #8]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	889b      	ldrh	r3, [r3, #4]
 80004a6:	78fa      	ldrb	r2, [r7, #3]
 80004a8:	4619      	mov	r1, r3
 80004aa:	f002 f86c 	bl	8002586 <HAL_GPIO_WritePin>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name* DS18B20)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
	return  HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	689a      	ldr	r2, [r3, #8]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	889b      	ldrh	r3, [r3, #4]
 80004c6:	4619      	mov	r1, r3
 80004c8:	4610      	mov	r0, r2
 80004ca:	f002 f845 	bl	8002558 <HAL_GPIO_ReadPin>
 80004ce:	4603      	mov	r3, r0
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name* DS18B20)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);  
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ff98 	bl	800041a <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 80004ea:	2100      	movs	r1, #0
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f7ff ffd0 	bl	8000492 <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);   
 80004f2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f7ff ff6d 	bl	80003d6 <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);    
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ffaa 	bl	8000456 <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80); 
 8000502:	2150      	movs	r1, #80	; 0x50
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ff66 	bl	80003d6 <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20))) Response = 1;   
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff ffd3 	bl	80004b6 <DS18B20_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d102      	bne.n	800051c <DS18B20_Start+0x44>
 8000516:	2301      	movs	r3, #1
 8000518:	73fb      	strb	r3, [r7, #15]
 800051a:	e001      	b.n	8000520 <DS18B20_Start+0x48>
	else Response = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 8000520:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff ff56 	bl	80003d6 <DS18B20_DelayUs>

	return Response;
 800052a:	7bfb      	ldrb	r3, [r7, #15]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name* DS18B20, uint8_t Data)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff ff6a 	bl	800041a <DS18B20_SetPinOut>
	for(int i = 0; i<8; i++)
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e02b      	b.n	80005a4 <DS18B20_Write+0x70>
	{
		if((Data&(1<<i))!=0)
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	fa42 f303 	asr.w	r3, r2, r3
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	2b00      	cmp	r3, #0
 800055a:	d012      	beq.n	8000582 <DS18B20_Write+0x4e>
		{
			DS18B20_SetPinOut(DS18B20);
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff ff5c 	bl	800041a <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8000562:	2100      	movs	r1, #0
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff ff94 	bl	8000492 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 800056a:	2101      	movs	r1, #1
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff ff32 	bl	80003d6 <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ff6f 	bl	8000456 <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 8000578:	2132      	movs	r1, #50	; 0x32
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff ff2b 	bl	80003d6 <DS18B20_DelayUs>
 8000580:	e00d      	b.n	800059e <DS18B20_Write+0x6a>
		}
		else
		{
			DS18B20_SetPinOut(DS18B20);
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff ff49 	bl	800041a <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8000588:	2100      	movs	r1, #0
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f7ff ff81 	bl	8000492 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8000590:	2132      	movs	r1, #50	; 0x32
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff ff1f 	bl	80003d6 <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff ff5c 	bl	8000456 <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b07      	cmp	r3, #7
 80005a8:	ddd0      	ble.n	800054c <DS18B20_Write+0x18>
		}
	}
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name* DS18B20)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ff48 	bl	8000456 <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	e024      	b.n	8000616 <DS18B20_Read+0x62>
	{
		DS18B20_SetPinOut(DS18B20);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ff24 	bl	800041a <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 80005d2:	2100      	movs	r1, #0
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff ff5c 	bl	8000492 <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 80005da:	2101      	movs	r1, #1
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff fefa 	bl	80003d6 <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff ff37 	bl	8000456 <DS18B20_SetPinIn>
		if(DS18B20_ReadPin(DS18B20))
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ff64 	bl	80004b6 <DS18B20_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d009      	beq.n	8000608 <DS18B20_Read+0x54>
		{
			Value |= 1<<i;
 80005f4:	2201      	movs	r2, #1
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	b25a      	sxtb	r2, r3
 80005fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000602:	4313      	orrs	r3, r2
 8000604:	b25b      	sxtb	r3, r3
 8000606:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 8000608:	2132      	movs	r1, #50	; 0x32
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff fee3 	bl	80003d6 <DS18B20_DelayUs>
	for(int i = 0; i<8; i++)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	3301      	adds	r3, #1
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	2b07      	cmp	r3, #7
 800061a:	ddd7      	ble.n	80005cc <DS18B20_Read+0x18>
	}
	return Value;
 800061c:	7bfb      	ldrb	r3, [r7, #15]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name* DS18B20, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DS_PORT, uint16_t DS_Pin)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b084      	sub	sp, #16
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	887a      	ldrh	r2, [r7, #2]
 800063e:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff feb8 	bl	80003bc <DS18B20_DelayInit>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name* DS18B20)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	uint16_t Temp;
	DS18B20_Start(DS18B20);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ff3b 	bl	80004d8 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8000662:	2101      	movs	r1, #1
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff fec7 	bl	80003f8 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 800066a:	21cc      	movs	r1, #204	; 0xcc
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff61 	bl	8000534 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 8000672:	2144      	movs	r1, #68	; 0x44
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ff5d 	bl	8000534 <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 800067a:	21c8      	movs	r1, #200	; 0xc8
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff febb 	bl	80003f8 <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff28 	bl	80004d8 <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8000688:	2101      	movs	r1, #1
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff feb4 	bl	80003f8 <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8000690:	21cc      	movs	r1, #204	; 0xcc
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff4e 	bl	8000534 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 8000698:	21be      	movs	r1, #190	; 0xbe
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff4a 	bl	8000534 <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ff87 	bl	80005b4 <DS18B20_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff82 	bl	80005b4 <DS18B20_Read>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2<<8)|Temp1;
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	81bb      	strh	r3, [r7, #12]
	DS18B20->Temp = (float)(Temp/16);
 80006c4:	89bb      	ldrh	r3, [r7, #12]
 80006c6:	091b      	lsrs	r3, r3, #4
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fe02 	bl	80002d4 <__aeabi_i2f>
 80006d0:	4602      	mov	r2, r0
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68db      	ldr	r3, [r3, #12]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f003 f9fc 	bl	8003ae8 <HAL_TIM_Base_Start>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 800070c:	bf00      	nop
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	429a      	cmp	r2, r3
 8000718:	d3f9      	bcc.n	800070e <DELAY_TIM_Us+0x16>
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <DELAY_TIM_Ms>:
void DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t Time)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	460b      	mov	r3, r1
 8000730:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
	while(Time--)
 800073a:	e006      	b.n	800074a <DELAY_TIM_Ms+0x24>
	{
		while(__HAL_TIM_GET_COUNTER(htim)<1000){}
 800073c:	bf00      	nop
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000748:	d3f9      	bcc.n	800073e <DELAY_TIM_Ms+0x18>
	while(Time--)
 800074a:	887b      	ldrh	r3, [r7, #2]
 800074c:	1e5a      	subs	r2, r3, #1
 800074e:	807a      	strh	r2, [r7, #2]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f3      	bne.n	800073c <DELAY_TIM_Ms+0x16>
	}
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4a06      	ldr	r2, [pc, #24]	; (8000788 <vApplicationGetIdleTaskMemory+0x28>)
 8000770:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <vApplicationGetIdleTaskMemory+0x2c>)
 8000776:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	200000a8 	.word	0x200000a8
 800078c:	200000fc 	.word	0x200000fc

08000790 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800079a:	4a38      	ldr	r2, [pc, #224]	; (800087c <HD44780_Init+0xec>)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80007a0:	4b37      	ldr	r3, [pc, #220]	; (8000880 <HD44780_Init+0xf0>)
 80007a2:	2208      	movs	r2, #8
 80007a4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HD44780_Init+0xf4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80007ac:	4b33      	ldr	r3, [pc, #204]	; (800087c <HD44780_Init+0xec>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d907      	bls.n	80007c4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80007b4:	4b33      	ldr	r3, [pc, #204]	; (8000884 <HD44780_Init+0xf4>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <HD44780_Init+0xf4>)
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	e006      	b.n	80007d2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <HD44780_Init+0xf4>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <HD44780_Init+0xf4>)
 80007d0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80007d2:	f000 f985 	bl	8000ae0 <DelayInit>
  HAL_Delay(50);
 80007d6:	2032      	movs	r0, #50	; 0x32
 80007d8:	f000 ff2c 	bl	8001634 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <HD44780_Init+0xf0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f943 	bl	8000a6c <ExpanderWrite>
  HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ea:	f000 ff23 	bl	8001634 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80007ee:	2030      	movs	r0, #48	; 0x30
 80007f0:	f000 f92b 	bl	8000a4a <Write4Bits>
  DelayUS(4500);
 80007f4:	f241 1094 	movw	r0, #4500	; 0x1194
 80007f8:	f000 f99a 	bl	8000b30 <DelayUS>

  Write4Bits(0x03 << 4);
 80007fc:	2030      	movs	r0, #48	; 0x30
 80007fe:	f000 f924 	bl	8000a4a <Write4Bits>
  DelayUS(4500);
 8000802:	f241 1094 	movw	r0, #4500	; 0x1194
 8000806:	f000 f993 	bl	8000b30 <DelayUS>

  Write4Bits(0x03 << 4);
 800080a:	2030      	movs	r0, #48	; 0x30
 800080c:	f000 f91d 	bl	8000a4a <Write4Bits>
  DelayUS(4500);
 8000810:	f241 1094 	movw	r0, #4500	; 0x1194
 8000814:	f000 f98c 	bl	8000b30 <DelayUS>

  Write4Bits(0x02 << 4);
 8000818:	2020      	movs	r0, #32
 800081a:	f000 f916 	bl	8000a4a <Write4Bits>
  DelayUS(100);
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f000 f986 	bl	8000b30 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HD44780_Init+0xf4>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	f043 0320 	orr.w	r3, r3, #32
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f8ce 	bl	80009d0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <HD44780_Init+0xf8>)
 8000836:	2204      	movs	r2, #4
 8000838:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800083a:	f000 f875 	bl	8000928 <HD44780_Display>
  HD44780_Clear();
 800083e:	f000 f82b 	bl	8000898 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HD44780_Init+0xfc>)
 8000844:	2202      	movs	r2, #2
 8000846:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <HD44780_Init+0xfc>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f8bc 	bl	80009d0 <SendCommand>
  DelayUS(4500);
 8000858:	f241 1094 	movw	r0, #4500	; 0x1194
 800085c:	f000 f968 	bl	8000b30 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000860:	490b      	ldr	r1, [pc, #44]	; (8000890 <HD44780_Init+0x100>)
 8000862:	2000      	movs	r0, #0
 8000864:	f000 f876 	bl	8000954 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000868:	490a      	ldr	r1, [pc, #40]	; (8000894 <HD44780_Init+0x104>)
 800086a:	2001      	movs	r0, #1
 800086c:	f000 f872 	bl	8000954 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000870:	f000 f81d 	bl	80008ae <HD44780_Home>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200002ff 	.word	0x200002ff
 8000880:	20000300 	.word	0x20000300
 8000884:	200002fc 	.word	0x200002fc
 8000888:	200002fd 	.word	0x200002fd
 800088c:	200002fe 	.word	0x200002fe
 8000890:	20000000 	.word	0x20000000
 8000894:	20000008 	.word	0x20000008

08000898 <HD44780_Clear>:

void HD44780_Clear()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 f897 	bl	80009d0 <SendCommand>
  DelayUS(2000);
 80008a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008a6:	f000 f943 	bl	8000b30 <DelayUS>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HD44780_Home>:

void HD44780_Home()
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80008b2:	2002      	movs	r0, #2
 80008b4:	f000 f88c 	bl	80009d0 <SendCommand>
  DelayUS(2000);
 80008b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008bc:	f000 f938 	bl	8000b30 <DelayUS>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	460a      	mov	r2, r1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	4613      	mov	r3, r2
 80008d2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HD44780_SetCursor+0x5c>)
 80008d6:	f107 0408 	add.w	r4, r7, #8
 80008da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HD44780_SetCursor+0x60>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	79ba      	ldrb	r2, [r7, #6]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d303      	bcc.n	80008f2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HD44780_SetCursor+0x60>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	3318      	adds	r3, #24
 80008f8:	443b      	add	r3, r7
 80008fa:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4413      	add	r3, r2
 8000904:	b2db      	uxtb	r3, r3
 8000906:	b25b      	sxtb	r3, r3
 8000908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800090c:	b25b      	sxtb	r3, r3
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f85d 	bl	80009d0 <SendCommand>
}
 8000916:	bf00      	nop
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	bf00      	nop
 8000920:	08007664 	.word	0x08007664
 8000924:	200002ff 	.word	0x200002ff

08000928 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HD44780_Display+0x28>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HD44780_Display+0x28>)
 8000938:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HD44780_Display+0x28>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f843 	bl	80009d0 <SendCommand>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200002fd 	.word	0x200002fd

08000954 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	b25b      	sxtb	r3, r3
 800096e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000972:	b25b      	sxtb	r3, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f82a 	bl	80009d0 <SendCommand>
  for (int i=0; i<8; i++)
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e009      	b.n	8000996 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	4413      	add	r3, r2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f82e 	bl	80009ec <SendChar>
  for (int i=0; i<8; i++)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3301      	adds	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b07      	cmp	r3, #7
 800099a:	ddf2      	ble.n	8000982 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80009ae:	e006      	b.n	80009be <HD44780_PrintStr+0x18>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f817 	bl	80009ec <SendChar>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1f4      	bne.n	80009b0 <HD44780_PrintStr+0xa>
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f812 	bl	8000a08 <Send>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SendChar>:

static void SendChar(uint8_t ch)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2101      	movs	r1, #1
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f804 	bl	8000a08 <Send>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	71fb      	strb	r3, [r7, #7]
 8000a14:	4613      	mov	r3, r2
 8000a16:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f023 030f 	bic.w	r3, r3, #15
 8000a1e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000a26:	7bfa      	ldrb	r2, [r7, #15]
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f80b 	bl	8000a4a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000a34:	7bba      	ldrb	r2, [r7, #14]
 8000a36:	79bb      	ldrb	r3, [r7, #6]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f804 	bl	8000a4a <Write4Bits>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f808 	bl	8000a6c <ExpanderWrite>
  PulseEnable(value);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f820 	bl	8000aa4 <PulseEnable>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <ExpanderWrite+0x30>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000a82:	f107 020f 	add.w	r2, r7, #15
 8000a86:	230a      	movs	r3, #10
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	219c      	movs	r1, #156	; 0x9c
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <ExpanderWrite+0x34>)
 8000a90:	f001 fed6 	bl	8002840 <HAL_I2C_Master_Transmit>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000300 	.word	0x20000300
 8000aa0:	20000334 	.word	0x20000334

08000aa4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffd8 	bl	8000a6c <ExpanderWrite>
  DelayUS(20);
 8000abc:	2014      	movs	r0, #20
 8000abe:	f000 f837 	bl	8000b30 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f023 0304 	bic.w	r3, r3, #4
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ffce 	bl	8000a6c <ExpanderWrite>
  DelayUS(20);
 8000ad0:	2014      	movs	r0, #20
 8000ad2:	f000 f82d 	bl	8000b30 <DelayUS>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <DelayInit>:

static void DelayInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <DelayInit+0x48>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <DelayInit+0x48>)
 8000aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aee:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <DelayInit+0x48>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <DelayInit+0x48>)
 8000af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000afa:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <DelayInit+0x4c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <DelayInit+0x4c>)
 8000b02:	f023 0301 	bic.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <DelayInit+0x4c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <DelayInit+0x4c>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <DelayInit+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000b1a:	bf00      	nop
  __ASM volatile ("NOP");
 8000b1c:	bf00      	nop
  __ASM volatile ("NOP");
 8000b1e:	bf00      	nop
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	e000edf0 	.word	0xe000edf0
 8000b2c:	e0001000 	.word	0xe0001000

08000b30 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <DelayUS+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <DelayUS+0x44>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	0c9a      	lsrs	r2, r3, #18
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	fb02 f303 	mul.w	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <DelayUS+0x48>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <DelayUS+0x48>)
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d8f6      	bhi.n	8000b52 <DelayUS+0x22>
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	371c      	adds	r7, #28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000018 	.word	0x20000018
 8000b74:	431bde83 	.word	0x431bde83
 8000b78:	e0001000 	.word	0xe0001000

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b5b0      	push	{r4, r5, r7, lr}
 8000b7e:	b096      	sub	sp, #88	; 0x58
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b82:	f000 fd25 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b86:	f000 f867 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8a:	f000 f9a5 	bl	8000ed8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b8e:	f000 f8bf 	bl	8000d10 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b92:	f000 f8fb 	bl	8000d8c <MX_I2C1_Init>
  MX_TIM4_Init();
 8000b96:	f000 f927 	bl	8000de8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000b9a:	f000 f973 	bl	8000e84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
      HAL_ADC_Start(&hadc1);
 8000b9e:	4824      	ldr	r0, [pc, #144]	; (8000c30 <main+0xb4>)
 8000ba0:	f000 fe44 	bl	800182c <HAL_ADC_Start>
      DS18B20_Init(&DS1, &htim4, DS18B20_GPIO_Port, DS18B20_Pin);
 8000ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ba8:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <main+0xb8>)
 8000baa:	4923      	ldr	r1, [pc, #140]	; (8000c38 <main+0xbc>)
 8000bac:	4823      	ldr	r0, [pc, #140]	; (8000c3c <main+0xc0>)
 8000bae:	f7ff fd3a 	bl	8000626 <DS18B20_Init>
      HD44780_Init(2);
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff fdec 	bl	8000790 <HD44780_Init>
      HD44780_Clear();
 8000bb8:	f7ff fe6e 	bl	8000898 <HD44780_Clear>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, readTemp, osPriorityNormal, 0, 128);
 8000bbc:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <main+0xc4>)
 8000bbe:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000bd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 f9fa 	bl	8004fd0 <osThreadCreate>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <main+0xc8>)
 8000be0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, readHum, osPriorityNormal, 0, 128);
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <main+0xcc>)
 8000be4:	f107 0420 	add.w	r4, r7, #32
 8000be8:	461d      	mov	r5, r3
 8000bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000bf6:	f107 0320 	add.w	r3, r7, #32
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 f9e7 	bl	8004fd0 <osThreadCreate>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <main+0xd0>)
 8000c06:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, Display_LCD_UART, osPriorityAboveNormal, 0, 128);
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <main+0xd4>)
 8000c0a:	1d3c      	adds	r4, r7, #4
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f004 f9d6 	bl	8004fd0 <osThreadCreate>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <main+0xd8>)
 8000c28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c2a:	f004 f9ca 	bl	8004fc2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <main+0xb2>
 8000c30:	20000304 	.word	0x20000304
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	20000388 	.word	0x20000388
 8000c3c:	20000424 	.word	0x20000424
 8000c40:	0800768c 	.word	0x0800768c
 8000c44:	20000418 	.word	0x20000418
 8000c48:	080076a8 	.word	0x080076a8
 8000c4c:	2000041c 	.word	0x2000041c
 8000c50:	080076c4 	.word	0x080076c4
 8000c54:	20000420 	.word	0x20000420

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c62:	2228      	movs	r2, #40	; 0x28
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 fbb2 	bl	80063d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c96:	2301      	movs	r3, #1
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ca4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 f91e 	bl	8002ef0 <HAL_RCC_OscConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cba:	f000 fa7d 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 fb8a 	bl	80033f4 <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ce6:	f000 fa67 	bl	80011b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cea:	2302      	movs	r3, #2
 8000cec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fd3a 	bl	8003770 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d02:	f000 fa59 	bl	80011b8 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	; 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_ADC1_Init+0x74>)
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <MX_ADC1_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_ADC1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_ADC1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_ADC1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_ADC1_Init+0x74>)
 8000d3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_ADC1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_ADC1_Init+0x74>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_ADC1_Init+0x74>)
 8000d4e:	f000 fc95 	bl	800167c <HAL_ADC_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d58:	f000 fa2e 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d5c:	2309      	movs	r3, #9
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_ADC1_Init+0x74>)
 8000d6e:	f000 ff49 	bl	8001c04 <HAL_ADC_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d78:	f000 fa1e 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000304 	.word	0x20000304
 8000d88:	40012400 	.word	0x40012400

08000d8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000d98:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <MX_I2C1_Init+0x58>)
 8000d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_I2C1_Init+0x50>)
 8000dca:	f001 fbf5 	bl	80025b8 <HAL_I2C_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dd4:	f000 f9f0 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000334 	.word	0x20000334
 8000de0:	40005400 	.word	0x40005400
 8000de4:	000186a0 	.word	0x000186a0

08000de8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_TIM4_Init+0x94>)
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <MX_TIM4_Init+0x98>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_TIM4_Init+0x94>)
 8000e0c:	2247      	movs	r2, #71	; 0x47
 8000e0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_TIM4_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_TIM4_Init+0x94>)
 8000e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_TIM4_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_TIM4_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e2a:	4814      	ldr	r0, [pc, #80]	; (8000e7c <MX_TIM4_Init+0x94>)
 8000e2c:	f002 fe0c 	bl	8003a48 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 f9bf 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4619      	mov	r1, r3
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_TIM4_Init+0x94>)
 8000e48:	f002 ffda 	bl	8003e00 <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f9b1 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <MX_TIM4_Init+0x94>)
 8000e64:	f003 f9bc 	bl	80041e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e6e:	f000 f9a3 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000388 	.word	0x20000388
 8000e80:	40000800 	.word	0x40000800

08000e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <MX_USART1_UART_Init+0x50>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000ebc:	f003 fa00 	bl	80042c0 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ec6:	f000 f977 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200003d0 	.word	0x200003d0
 8000ed4:	40013800 	.word	0x40013800

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_GPIO_Init+0x90>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <MX_GPIO_Init+0x90>)
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_GPIO_Init+0x90>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0320 	and.w	r3, r3, #32
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_GPIO_Init+0x90>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <MX_GPIO_Init+0x90>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_GPIO_Init+0x90>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_GPIO_Init+0x90>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <MX_GPIO_Init+0x90>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_GPIO_Init+0x90>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_GPIO_Init+0x94>)
 8000f3c:	f001 fb23 	bl	8002586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8000f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <MX_GPIO_Init+0x94>)
 8000f5a:	f001 f979 	bl	8002250 <HAL_GPIO_Init>

}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010c00 	.word	0x40010c00

08000f70 <readTemp>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readTemp */
void readTemp(void const * argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Temp = DS18B20_ReadTemp(&DS1);
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <readTemp+0x2c>)
 8000f7a:	f7ff fb6b 	bl	8000654 <DS18B20_ReadTemp>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f9fb 	bl	800037c <__aeabi_f2uiz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <readTemp+0x30>)
 8000f8c:	801a      	strh	r2, [r3, #0]
	  osDelay(delay_temp);
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <readTemp+0x34>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f868 	bl	8005068 <osDelay>
	  Temp = DS18B20_ReadTemp(&DS1);
 8000f98:	e7ee      	b.n	8000f78 <readTemp+0x8>
 8000f9a:	bf00      	nop
 8000f9c:	20000424 	.word	0x20000424
 8000fa0:	20000434 	.word	0x20000434
 8000fa4:	20000010 	.word	0x20000010

08000fa8 <readHum>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readHum */
void readHum(void const * argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readHum */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <readHum+0x50>)
 8000fb2:	f000 fc3b 	bl	800182c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000fb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fba:	480f      	ldr	r0, [pc, #60]	; (8000ff8 <readHum+0x50>)
 8000fbc:	f000 fd10 	bl	80019e0 <HAL_ADC_PollForConversion>
	  uint16_t Hum = HAL_ADC_GetValue(&hadc1);
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <readHum+0x50>)
 8000fc2:	f000 fe13 	bl	8001bec <HAL_ADC_GetValue>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	81fb      	strh	r3, [r7, #14]
	  Humidity = (Hum * 100) / 4095;
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	2264      	movs	r2, #100	; 0x64
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <readHum+0x54>)
 8000fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd8:	441a      	add	r2, r3
 8000fda:	12d2      	asrs	r2, r2, #11
 8000fdc:	17db      	asrs	r3, r3, #31
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <readHum+0x58>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000fe6:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <readHum+0x50>)
 8000fe8:	f000 fcce 	bl	8001988 <HAL_ADC_Stop>
	  osDelay(delay_soil);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <readHum+0x5c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 f839 	bl	8005068 <osDelay>
  {
 8000ff6:	e7db      	b.n	8000fb0 <readHum+0x8>
 8000ff8:	20000304 	.word	0x20000304
 8000ffc:	80080081 	.word	0x80080081
 8001000:	20000436 	.word	0x20000436
 8001004:	20000014 	.word	0x20000014

08001008 <Display_LCD_UART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display_LCD_UART */
void Display_LCD_UART(void const * argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  // Display on LCD
	  char buffer[32];
	  HD44780_Clear();
 8001010:	f7ff fc42 	bl	8000898 <HD44780_Clear>
	  HD44780_SetCursor(0, 0);
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fc54 	bl	80008c4 <HD44780_SetCursor>
	  sprintf(buffer, "Temperature: %d C", Temp);
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <Display_LCD_UART+0x98>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	491f      	ldr	r1, [pc, #124]	; (80010a4 <Display_LCD_UART+0x9c>)
 8001028:	4618      	mov	r0, r3
 800102a:	f005 f9d9 	bl	80063e0 <siprintf>
	  HD44780_PrintStr(buffer);
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fcb7 	bl	80009a6 <HD44780_PrintStr>

	  HD44780_SetCursor(0, 1);
 8001038:	2101      	movs	r1, #1
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc42 	bl	80008c4 <HD44780_SetCursor>
	  sprintf(buffer, "Humidity: %d %%", Humidity);
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <Display_LCD_UART+0xa0>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4918      	ldr	r1, [pc, #96]	; (80010ac <Display_LCD_UART+0xa4>)
 800104c:	4618      	mov	r0, r3
 800104e:	f005 f9c7 	bl	80063e0 <siprintf>
	  HD44780_PrintStr(buffer);
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fca5 	bl	80009a6 <HD44780_PrintStr>

	  // Transmit data via UART
	  if (start_flag)
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <Display_LCD_UART+0xa8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d017      	beq.n	8001094 <Display_LCD_UART+0x8c>
	         {
	             sprintf(buffer, "Temperature: %d; Humidity: %d\n", Temp, Humidity);
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <Display_LCD_UART+0x98>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <Display_LCD_UART+0xa0>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	f107 0008 	add.w	r0, r7, #8
 8001072:	4910      	ldr	r1, [pc, #64]	; (80010b4 <Display_LCD_UART+0xac>)
 8001074:	f005 f9b4 	bl	80063e0 <siprintf>
	             HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f867 	bl	8000150 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	f107 0108 	add.w	r1, r7, #8
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	480a      	ldr	r0, [pc, #40]	; (80010b8 <Display_LCD_UART+0xb0>)
 8001090:	f003 f966 	bl	8004360 <HAL_UART_Transmit>
	         }

	  osDelay(500); // Delay to control display update frequency
 8001094:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001098:	f003 ffe6 	bl	8005068 <osDelay>
  {
 800109c:	e7b8      	b.n	8001010 <Display_LCD_UART+0x8>
 800109e:	bf00      	nop
 80010a0:	20000434 	.word	0x20000434
 80010a4:	080076e0 	.word	0x080076e0
 80010a8:	20000436 	.word	0x20000436
 80010ac:	080076f4 	.word	0x080076f4
 80010b0:	200004a0 	.word	0x200004a0
 80010b4:	08007704 	.word	0x08007704
 80010b8:	200003d0 	.word	0x200003d0

080010bc <HAL_UART_RxCpltCallback>:
  /* USER CODE END Display_LCD_UART */
}

/* UART Callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a25      	ldr	r2, [pc, #148]	; (8001160 <HAL_UART_RxCpltCallback+0xa4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d144      	bne.n	8001158 <HAL_UART_RxCpltCallback+0x9c>
    {
        uart_buffer[strlen((char *)uart_buffer)] = data_rx;
 80010ce:	4825      	ldr	r0, [pc, #148]	; (8001164 <HAL_UART_RxCpltCallback+0xa8>)
 80010d0:	f7ff f83e 	bl	8000150 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a24      	ldr	r2, [pc, #144]	; (8001168 <HAL_UART_RxCpltCallback+0xac>)
 80010d8:	7811      	ldrb	r1, [r2, #0]
 80010da:	4a22      	ldr	r2, [pc, #136]	; (8001164 <HAL_UART_RxCpltCallback+0xa8>)
 80010dc:	54d1      	strb	r1, [r2, r3]
        if (data_rx == '\n')
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_UART_RxCpltCallback+0xac>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b0a      	cmp	r3, #10
 80010e4:	d133      	bne.n	800114e <HAL_UART_RxCpltCallback+0x92>
        {
            if (strstr((char *)uart_buffer, "START") != NULL)
 80010e6:	4921      	ldr	r1, [pc, #132]	; (800116c <HAL_UART_RxCpltCallback+0xb0>)
 80010e8:	481e      	ldr	r0, [pc, #120]	; (8001164 <HAL_UART_RxCpltCallback+0xa8>)
 80010ea:	f005 f9c5 	bl	8006478 <strstr>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_UART_RxCpltCallback+0x40>
                start_flag = 1;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_UART_RxCpltCallback+0xb4>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e023      	b.n	8001144 <HAL_UART_RxCpltCallback+0x88>
            else if (strstr((char *)uart_buffer, "STOP") != NULL)
 80010fc:	491d      	ldr	r1, [pc, #116]	; (8001174 <HAL_UART_RxCpltCallback+0xb8>)
 80010fe:	4819      	ldr	r0, [pc, #100]	; (8001164 <HAL_UART_RxCpltCallback+0xa8>)
 8001100:	f005 f9ba 	bl	8006478 <strstr>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_UART_RxCpltCallback+0x56>
                start_flag = 0;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_UART_RxCpltCallback+0xb4>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e018      	b.n	8001144 <HAL_UART_RxCpltCallback+0x88>
            else if (strstr((char *)uart_buffer, "SET_DELAY_TEMP") != NULL)
 8001112:	4919      	ldr	r1, [pc, #100]	; (8001178 <HAL_UART_RxCpltCallback+0xbc>)
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <HAL_UART_RxCpltCallback+0xa8>)
 8001116:	f005 f9af 	bl	8006478 <strstr>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_UART_RxCpltCallback+0x70>
                sscanf((char *)uart_buffer, "SET_DELAY_TEMP=%lu", &delay_temp);
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <HAL_UART_RxCpltCallback+0xc0>)
 8001122:	4917      	ldr	r1, [pc, #92]	; (8001180 <HAL_UART_RxCpltCallback+0xc4>)
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <HAL_UART_RxCpltCallback+0xa8>)
 8001126:	f005 f97b 	bl	8006420 <siscanf>
 800112a:	e00b      	b.n	8001144 <HAL_UART_RxCpltCallback+0x88>
            else if (strstr((char *)uart_buffer, "SET_DELAY_SOIL") != NULL)
 800112c:	4915      	ldr	r1, [pc, #84]	; (8001184 <HAL_UART_RxCpltCallback+0xc8>)
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <HAL_UART_RxCpltCallback+0xa8>)
 8001130:	f005 f9a2 	bl	8006478 <strstr>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_UART_RxCpltCallback+0x88>
                sscanf((char *)uart_buffer, "SET_DELAY_SOIL=%lu", &delay_soil);
 800113a:	4a13      	ldr	r2, [pc, #76]	; (8001188 <HAL_UART_RxCpltCallback+0xcc>)
 800113c:	4913      	ldr	r1, [pc, #76]	; (800118c <HAL_UART_RxCpltCallback+0xd0>)
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <HAL_UART_RxCpltCallback+0xa8>)
 8001140:	f005 f96e 	bl	8006420 <siscanf>

            memset(uart_buffer, 0, sizeof(uart_buffer));
 8001144:	2264      	movs	r2, #100	; 0x64
 8001146:	2100      	movs	r1, #0
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <HAL_UART_RxCpltCallback+0xa8>)
 800114a:	f005 f941 	bl	80063d0 <memset>
        }

        HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	4905      	ldr	r1, [pc, #20]	; (8001168 <HAL_UART_RxCpltCallback+0xac>)
 8001152:	480f      	ldr	r0, [pc, #60]	; (8001190 <HAL_UART_RxCpltCallback+0xd4>)
 8001154:	f003 f98f 	bl	8004476 <HAL_UART_Receive_IT>
    }
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40013800 	.word	0x40013800
 8001164:	2000043c 	.word	0x2000043c
 8001168:	20000438 	.word	0x20000438
 800116c:	08007724 	.word	0x08007724
 8001170:	200004a0 	.word	0x200004a0
 8001174:	0800772c 	.word	0x0800772c
 8001178:	08007734 	.word	0x08007734
 800117c:	20000010 	.word	0x20000010
 8001180:	08007744 	.word	0x08007744
 8001184:	08007758 	.word	0x08007758
 8001188:	20000014 	.word	0x20000014
 800118c:	08007768 	.word	0x08007768
 8001190:	200003d0 	.word	0x200003d0

08001194 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011a6:	f000 fa29 	bl	80015fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012c00 	.word	0x40012c00

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>
	...

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_MspInit+0x68>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_MspInit+0x68>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_MspInit+0x68>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_MspInit+0x68>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <HAL_MspInit+0x68>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_MspInit+0x68>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	210f      	movs	r1, #15
 80011fe:	f06f 0001 	mvn.w	r0, #1
 8001202:	f000 ff48 	bl	8002096 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_MspInit+0x6c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_MspInit+0x6c>)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000

08001234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <HAL_ADC_MspInit+0x6c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d121      	bne.n	8001298 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_ADC_MspInit+0x70>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <HAL_ADC_MspInit+0x70>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_ADC_MspInit+0x70>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_ADC_MspInit+0x70>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <HAL_ADC_MspInit+0x70>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_ADC_MspInit+0x70>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001284:	2302      	movs	r3, #2
 8001286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_ADC_MspInit+0x74>)
 8001294:	f000 ffdc 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40012400 	.word	0x40012400
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010c00 	.word	0x40010c00

080012ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <HAL_I2C_MspInit+0x70>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d123      	bne.n	8001314 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_I2C_MspInit+0x74>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <HAL_I2C_MspInit+0x74>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_I2C_MspInit+0x74>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e4:	23c0      	movs	r3, #192	; 0xc0
 80012e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	4619      	mov	r1, r3
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <HAL_I2C_MspInit+0x78>)
 80012f8:	f000 ffaa 	bl	8002250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_I2C_MspInit+0x74>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_I2C_MspInit+0x74>)
 8001302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001306:	61d3      	str	r3, [r2, #28]
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_I2C_MspInit+0x74>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40005400 	.word	0x40005400
 8001320:	40021000 	.word	0x40021000
 8001324:	40010c00 	.word	0x40010c00

08001328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_TIM_Base_MspInit+0x34>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10b      	bne.n	8001352 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_TIM_Base_MspInit+0x38>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <HAL_TIM_Base_MspInit+0x38>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_TIM_Base_MspInit+0x38>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40000800 	.word	0x40000800
 8001360:	40021000 	.word	0x40021000

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a20      	ldr	r2, [pc, #128]	; (8001400 <HAL_UART_MspInit+0x9c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d139      	bne.n	80013f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <HAL_UART_MspInit+0xa0>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <HAL_UART_MspInit+0xa0>)
 800138a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <HAL_UART_MspInit+0xa0>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_UART_MspInit+0xa0>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a18      	ldr	r2, [pc, #96]	; (8001404 <HAL_UART_MspInit+0xa0>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_UART_MspInit+0xa0>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <HAL_UART_MspInit+0xa4>)
 80013ca:	f000 ff41 	bl	8002250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4809      	ldr	r0, [pc, #36]	; (8001408 <HAL_UART_MspInit+0xa4>)
 80013e4:	f000 ff34 	bl	8002250 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2105      	movs	r1, #5
 80013ec:	2025      	movs	r0, #37	; 0x25
 80013ee:	f000 fe52 	bl	8002096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013f2:	2025      	movs	r0, #37	; 0x25
 80013f4:	f000 fe6b 	bl	80020ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013800 	.word	0x40013800
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800

0800140c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	2019      	movs	r0, #25
 8001422:	f000 fe38 	bl	8002096 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001426:	2019      	movs	r0, #25
 8001428:	f000 fe51 	bl	80020ce <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_InitTick+0x9c>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_InitTick+0x9c>)
 8001432:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_InitTick+0x9c>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001444:	f107 0210 	add.w	r2, r7, #16
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f002 f940 	bl	80036d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001454:	f002 f92a 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8001458:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	4a13      	ldr	r2, [pc, #76]	; (80014ac <HAL_InitTick+0xa0>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0c9b      	lsrs	r3, r3, #18
 8001464:	3b01      	subs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_InitTick+0xa4>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <HAL_InitTick+0xa8>)
 800146c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_InitTick+0xa4>)
 8001470:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001474:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_InitTick+0xa4>)
 8001478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_InitTick+0xa4>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_InitTick+0xa4>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <HAL_InitTick+0xa4>)
 800148a:	f002 fadd 	bl	8003a48 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d104      	bne.n	800149e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001494:	4806      	ldr	r0, [pc, #24]	; (80014b0 <HAL_InitTick+0xa4>)
 8001496:	f002 fb71 	bl	8003b7c <HAL_TIM_Base_Start_IT>
 800149a:	4603      	mov	r3, r0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	431bde83 	.word	0x431bde83
 80014b0:	200004a4 	.word	0x200004a4
 80014b4:	40012c00 	.word	0x40012c00

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
	...

080014e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <TIM1_UP_IRQHandler+0x10>)
 80014ea:	f002 fb99 	bl	8003c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200004a4 	.word	0x200004a4

080014f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <USART1_IRQHandler+0x10>)
 80014fe:	f002 ffdf 	bl	80044c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200003d0 	.word	0x200003d0

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f004 ff10 	bl	8006360 <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20005000 	.word	0x20005000
 800156c:	00000400 	.word	0x00000400
 8001570:	200004ec 	.word	0x200004ec
 8001574:	20001258 	.word	0x20001258

08001578 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001584:	f7ff fff8 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800158a:	490c      	ldr	r1, [pc, #48]	; (80015bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015a0:	4c09      	ldr	r4, [pc, #36]	; (80015c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ae:	f004 fedd 	bl	800636c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b2:	f7ff fae3 	bl	8000b7c <main>
  bx lr
 80015b6:	4770      	bx	lr
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80015c0:	08007988 	.word	0x08007988
  ldr r2, =_sbss
 80015c4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80015c8:	20001258 	.word	0x20001258

080015cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_2_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x28>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x28>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 fd4d 	bl	8002080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f7ff ff10 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fdea 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40022000 	.word	0x40022000

080015fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x1c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_IncTick+0x20>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_IncTick+0x20>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000020 	.word	0x20000020
 800161c:	200004f0 	.word	0x200004f0

08001620 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <HAL_GetTick+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	200004f0 	.word	0x200004f0

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff fff0 	bl	8001620 <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d005      	beq.n	800165a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_Delay+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165a:	bf00      	nop
 800165c:	f7ff ffe0 	bl	8001620 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d8f7      	bhi.n	800165c <HAL_Delay+0x28>
  {
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000020 	.word	0x20000020

0800167c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0be      	b.n	800181c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fdba 	bl	8001234 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fbf1 	bl	8001ea8 <ADC_ConversionStop_Disable>
 80016c6:	4603      	mov	r3, r0
 80016c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 8099 	bne.w	800180a <HAL_ADC_Init+0x18e>
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 8095 	bne.w	800180a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016e8:	f023 0302 	bic.w	r3, r3, #2
 80016ec:	f043 0202 	orr.w	r2, r3, #2
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7b1b      	ldrb	r3, [r3, #12]
 8001702:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001704:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	4313      	orrs	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001714:	d003      	beq.n	800171e <HAL_ADC_Init+0xa2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d102      	bne.n	8001724 <HAL_ADC_Init+0xa8>
 800171e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001722:	e000      	b.n	8001726 <HAL_ADC_Init+0xaa>
 8001724:	2300      	movs	r3, #0
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7d1b      	ldrb	r3, [r3, #20]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d119      	bne.n	8001768 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7b1b      	ldrb	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	3b01      	subs	r3, #1
 8001742:	035a      	lsls	r2, r3, #13
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	e00b      	b.n	8001768 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	f043 0220 	orr.w	r2, r3, #32
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	430a      	orrs	r2, r1
 800177a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_ADC_Init+0x1a8>)
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	430b      	orrs	r3, r1
 800178e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001798:	d003      	beq.n	80017a2 <HAL_ADC_Init+0x126>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d104      	bne.n	80017ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	051b      	lsls	r3, r3, #20
 80017aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	430a      	orrs	r2, r1
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_ADC_Init+0x1ac>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d10b      	bne.n	80017e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017e6:	e018      	b.n	800181a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f023 0312 	bic.w	r3, r3, #18
 80017f0:	f043 0210 	orr.w	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	f043 0201 	orr.w	r2, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001808:	e007      	b.n	800181a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	f043 0210 	orr.w	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800181a:	7dfb      	ldrb	r3, [r7, #23]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	ffe1f7fd 	.word	0xffe1f7fd
 8001828:	ff1f0efe 	.word	0xff1f0efe

0800182c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Start+0x1a>
 8001842:	2302      	movs	r3, #2
 8001844:	e098      	b.n	8001978 <HAL_ADC_Start+0x14c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fad0 	bl	8001df4 <ADC_Enable>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 8087 	bne.w	800196e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a41      	ldr	r2, [pc, #260]	; (8001980 <HAL_ADC_Start+0x154>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d105      	bne.n	800188a <HAL_ADC_Start+0x5e>
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <HAL_ADC_Start+0x158>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d026      	beq.n	80018f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018b4:	e01d      	b.n	80018f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a2f      	ldr	r2, [pc, #188]	; (8001984 <HAL_ADC_Start+0x158>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d004      	beq.n	80018d6 <HAL_ADC_Start+0xaa>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a2b      	ldr	r2, [pc, #172]	; (8001980 <HAL_ADC_Start+0x154>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10d      	bne.n	80018f2 <HAL_ADC_Start+0xc6>
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_ADC_Start+0x158>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	f023 0206 	bic.w	r2, r3, #6
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
 800190a:	e002      	b.n	8001912 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0202 	mvn.w	r2, #2
 8001922:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800192e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001932:	d113      	bne.n	800195c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_ADC_Start+0x154>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d105      	bne.n	800194a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_ADC_Start+0x158>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001946:	2b00      	cmp	r3, #0
 8001948:	d108      	bne.n	800195c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	e00c      	b.n	8001976 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	e003      	b.n	8001976 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40012800 	.word	0x40012800
 8001984:	40012400 	.word	0x40012400

08001988 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Stop+0x1a>
 800199e:	2302      	movs	r3, #2
 80019a0:	e01a      	b.n	80019d8 <HAL_ADC_Stop+0x50>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fa7c 	bl	8001ea8 <ADC_ConversionStop_Disable>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80019f6:	f7ff fe13 	bl	8001620 <HAL_GetTick>
 80019fa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	f043 0220 	orr.w	r2, r3, #32
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0d3      	b.n	8001bca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d131      	bne.n	8001a94 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d12a      	bne.n	8001a94 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a3e:	e021      	b.n	8001a84 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a46:	d01d      	beq.n	8001a84 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_ADC_PollForConversion+0x7e>
 8001a4e:	f7ff fde7 	bl	8001620 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d212      	bcs.n	8001a84 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10b      	bne.n	8001a84 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	f043 0204 	orr.w	r2, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0a2      	b.n	8001bca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0d6      	beq.n	8001a40 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a92:	e070      	b.n	8001b76 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a94:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <HAL_ADC_PollForConversion+0x1f4>)
 8001a96:	681c      	ldr	r4, [r3, #0]
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f001 ff1f 	bl	80038dc <HAL_RCCEx_GetPeriphCLKFreq>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6919      	ldr	r1, [r3, #16]
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_ADC_PollForConversion+0x1f8>)
 8001aac:	400b      	ands	r3, r1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d118      	bne.n	8001ae4 <HAL_ADC_PollForConversion+0x104>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68d9      	ldr	r1, [r3, #12]
 8001ab8:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <HAL_ADC_PollForConversion+0x1fc>)
 8001aba:	400b      	ands	r3, r1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d111      	bne.n	8001ae4 <HAL_ADC_PollForConversion+0x104>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6919      	ldr	r1, [r3, #16]
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_ADC_PollForConversion+0x200>)
 8001ac8:	400b      	ands	r3, r1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d108      	bne.n	8001ae0 <HAL_ADC_PollForConversion+0x100>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68d9      	ldr	r1, [r3, #12]
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_ADC_PollForConversion+0x204>)
 8001ad6:	400b      	ands	r3, r1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_ADC_PollForConversion+0x100>
 8001adc:	2314      	movs	r3, #20
 8001ade:	e020      	b.n	8001b22 <HAL_ADC_PollForConversion+0x142>
 8001ae0:	2329      	movs	r3, #41	; 0x29
 8001ae2:	e01e      	b.n	8001b22 <HAL_ADC_PollForConversion+0x142>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_ADC_PollForConversion+0x200>)
 8001aec:	400b      	ands	r3, r1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x120>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68d9      	ldr	r1, [r3, #12]
 8001af8:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <HAL_ADC_PollForConversion+0x204>)
 8001afa:	400b      	ands	r3, r1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00d      	beq.n	8001b1c <HAL_ADC_PollForConversion+0x13c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6919      	ldr	r1, [r3, #16]
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_ADC_PollForConversion+0x208>)
 8001b08:	400b      	ands	r3, r1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d108      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x140>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68d9      	ldr	r1, [r3, #12]
 8001b14:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <HAL_ADC_PollForConversion+0x208>)
 8001b16:	400b      	ands	r3, r1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x140>
 8001b1c:	2354      	movs	r3, #84	; 0x54
 8001b1e:	e000      	b.n	8001b22 <HAL_ADC_PollForConversion+0x142>
 8001b20:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b28:	e021      	b.n	8001b6e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d01a      	beq.n	8001b68 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_ADC_PollForConversion+0x168>
 8001b38:	f7ff fd72 	bl	8001620 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d20f      	bcs.n	8001b68 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d90b      	bls.n	8001b68 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e030      	b.n	8001bca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d8d9      	bhi.n	8001b2a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0212 	mvn.w	r2, #18
 8001b7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b9a:	d115      	bne.n	8001bc8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d111      	bne.n	8001bc8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	f043 0201 	orr.w	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	371c      	adds	r7, #28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000018 	.word	0x20000018
 8001bd8:	24924924 	.word	0x24924924
 8001bdc:	00924924 	.word	0x00924924
 8001be0:	12492492 	.word	0x12492492
 8001be4:	00492492 	.word	0x00492492
 8001be8:	00249249 	.word	0x00249249

08001bec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x20>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e0dc      	b.n	8001dde <HAL_ADC_ConfigChannel+0x1da>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d81c      	bhi.n	8001c6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b05      	subs	r3, #5
 8001c46:	221f      	movs	r2, #31
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4019      	ands	r1, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b05      	subs	r3, #5
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c6c:	e03c      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d81c      	bhi.n	8001cb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b23      	subs	r3, #35	; 0x23
 8001c88:	221f      	movs	r2, #31
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	4019      	ands	r1, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b23      	subs	r3, #35	; 0x23
 8001ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
 8001cae:	e01b      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b41      	subs	r3, #65	; 0x41
 8001cc2:	221f      	movs	r2, #31
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4019      	ands	r1, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b41      	subs	r3, #65	; 0x41
 8001cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	d91c      	bls.n	8001d2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68d9      	ldr	r1, [r3, #12]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b1e      	subs	r3, #30
 8001d02:	2207      	movs	r2, #7
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4019      	ands	r1, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6898      	ldr	r0, [r3, #8]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b1e      	subs	r3, #30
 8001d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	e019      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6919      	ldr	r1, [r3, #16]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	4019      	ands	r1, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6898      	ldr	r0, [r3, #8]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	fa00 f203 	lsl.w	r2, r0, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d003      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d6a:	2b11      	cmp	r3, #17
 8001d6c:	d132      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d125      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d126      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d11a      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_ADC_ConfigChannel+0x1e8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9a      	lsrs	r2, r3, #18
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db4:	e002      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x1b2>
 8001dc2:	e007      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	f043 0220 	orr.w	r2, r3, #32
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40012400 	.word	0x40012400
 8001dec:	20000018 	.word	0x20000018
 8001df0:	431bde83 	.word	0x431bde83

08001df4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d040      	beq.n	8001e94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <ADC_Enable+0xac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <ADC_Enable+0xb0>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	0c9b      	lsrs	r3, r3, #18
 8001e2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e30:	e002      	b.n	8001e38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e3e:	f7ff fbef 	bl	8001620 <HAL_GetTick>
 8001e42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e44:	e01f      	b.n	8001e86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e46:	f7ff fbeb 	bl	8001620 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d918      	bls.n	8001e86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d011      	beq.n	8001e86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e007      	b.n	8001e96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d1d8      	bne.n	8001e46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000018 	.word	0x20000018
 8001ea4:	431bde83 	.word	0x431bde83

08001ea8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d12e      	bne.n	8001f20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ed2:	f7ff fba5 	bl	8001620 <HAL_GetTick>
 8001ed6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ed8:	e01b      	b.n	8001f12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eda:	f7ff fba1 	bl	8001620 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d914      	bls.n	8001f12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10d      	bne.n	8001f12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	f043 0210 	orr.w	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e007      	b.n	8001f22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d0dc      	beq.n	8001eda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <__NVIC_EnableIRQ+0x34>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff4f 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a8:	f7ff ff64 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ffb2 	bl	800201c <NVIC_EncodePriority>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff81 	bl	8001fc8 <__NVIC_SetPriority>
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff57 	bl	8001f90 <__NVIC_EnableIRQ>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d008      	beq.n	8002114 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2204      	movs	r2, #4
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e020      	b.n	8002156 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020e 	bic.w	r2, r2, #14
 8002122:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	2101      	movs	r1, #1
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d005      	beq.n	8002184 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2204      	movs	r2, #4
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e051      	b.n	8002228 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 020e 	bic.w	r2, r2, #14
 8002192:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a22      	ldr	r2, [pc, #136]	; (8002234 <HAL_DMA_Abort_IT+0xd4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d029      	beq.n	8002202 <HAL_DMA_Abort_IT+0xa2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a21      	ldr	r2, [pc, #132]	; (8002238 <HAL_DMA_Abort_IT+0xd8>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d022      	beq.n	80021fe <HAL_DMA_Abort_IT+0x9e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <HAL_DMA_Abort_IT+0xdc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01a      	beq.n	80021f8 <HAL_DMA_Abort_IT+0x98>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1e      	ldr	r2, [pc, #120]	; (8002240 <HAL_DMA_Abort_IT+0xe0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d012      	beq.n	80021f2 <HAL_DMA_Abort_IT+0x92>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <HAL_DMA_Abort_IT+0xe4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00a      	beq.n	80021ec <HAL_DMA_Abort_IT+0x8c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <HAL_DMA_Abort_IT+0xe8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d102      	bne.n	80021e6 <HAL_DMA_Abort_IT+0x86>
 80021e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021e4:	e00e      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ea:	e00b      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f0:	e008      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f6:	e005      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021fc:	e002      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 80021fe:	2310      	movs	r3, #16
 8002200:	e000      	b.n	8002204 <HAL_DMA_Abort_IT+0xa4>
 8002202:	2301      	movs	r3, #1
 8002204:	4a11      	ldr	r2, [pc, #68]	; (800224c <HAL_DMA_Abort_IT+0xec>)
 8002206:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
    } 
  }
  return status;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40020008 	.word	0x40020008
 8002238:	4002001c 	.word	0x4002001c
 800223c:	40020030 	.word	0x40020030
 8002240:	40020044 	.word	0x40020044
 8002244:	40020058 	.word	0x40020058
 8002248:	4002006c 	.word	0x4002006c
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b08b      	sub	sp, #44	; 0x2c
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002262:	e169      	b.n	8002538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002264:	2201      	movs	r2, #1
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	429a      	cmp	r2, r3
 800227e:	f040 8158 	bne.w	8002532 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a9a      	ldr	r2, [pc, #616]	; (80024f0 <HAL_GPIO_Init+0x2a0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d05e      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 800228c:	4a98      	ldr	r2, [pc, #608]	; (80024f0 <HAL_GPIO_Init+0x2a0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d875      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 8002292:	4a98      	ldr	r2, [pc, #608]	; (80024f4 <HAL_GPIO_Init+0x2a4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d058      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 8002298:	4a96      	ldr	r2, [pc, #600]	; (80024f4 <HAL_GPIO_Init+0x2a4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d86f      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 800229e:	4a96      	ldr	r2, [pc, #600]	; (80024f8 <HAL_GPIO_Init+0x2a8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d052      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 80022a4:	4a94      	ldr	r2, [pc, #592]	; (80024f8 <HAL_GPIO_Init+0x2a8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d869      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022aa:	4a94      	ldr	r2, [pc, #592]	; (80024fc <HAL_GPIO_Init+0x2ac>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d04c      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 80022b0:	4a92      	ldr	r2, [pc, #584]	; (80024fc <HAL_GPIO_Init+0x2ac>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d863      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022b6:	4a92      	ldr	r2, [pc, #584]	; (8002500 <HAL_GPIO_Init+0x2b0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d046      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 80022bc:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_GPIO_Init+0x2b0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d85d      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	d82a      	bhi.n	800231c <HAL_GPIO_Init+0xcc>
 80022c6:	2b12      	cmp	r3, #18
 80022c8:	d859      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022ca:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <HAL_GPIO_Init+0x80>)
 80022cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d0:	0800234b 	.word	0x0800234b
 80022d4:	08002325 	.word	0x08002325
 80022d8:	08002337 	.word	0x08002337
 80022dc:	08002379 	.word	0x08002379
 80022e0:	0800237f 	.word	0x0800237f
 80022e4:	0800237f 	.word	0x0800237f
 80022e8:	0800237f 	.word	0x0800237f
 80022ec:	0800237f 	.word	0x0800237f
 80022f0:	0800237f 	.word	0x0800237f
 80022f4:	0800237f 	.word	0x0800237f
 80022f8:	0800237f 	.word	0x0800237f
 80022fc:	0800237f 	.word	0x0800237f
 8002300:	0800237f 	.word	0x0800237f
 8002304:	0800237f 	.word	0x0800237f
 8002308:	0800237f 	.word	0x0800237f
 800230c:	0800237f 	.word	0x0800237f
 8002310:	0800237f 	.word	0x0800237f
 8002314:	0800232d 	.word	0x0800232d
 8002318:	08002341 	.word	0x08002341
 800231c:	4a79      	ldr	r2, [pc, #484]	; (8002504 <HAL_GPIO_Init+0x2b4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002322:	e02c      	b.n	800237e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	623b      	str	r3, [r7, #32]
          break;
 800232a:	e029      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	3304      	adds	r3, #4
 8002332:	623b      	str	r3, [r7, #32]
          break;
 8002334:	e024      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	3308      	adds	r3, #8
 800233c:	623b      	str	r3, [r7, #32]
          break;
 800233e:	e01f      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	330c      	adds	r3, #12
 8002346:	623b      	str	r3, [r7, #32]
          break;
 8002348:	e01a      	b.n	8002380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002352:	2304      	movs	r3, #4
 8002354:	623b      	str	r3, [r7, #32]
          break;
 8002356:	e013      	b.n	8002380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002360:	2308      	movs	r3, #8
 8002362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	611a      	str	r2, [r3, #16]
          break;
 800236a:	e009      	b.n	8002380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800236c:	2308      	movs	r3, #8
 800236e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	615a      	str	r2, [r3, #20]
          break;
 8002376:	e003      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
          break;
 800237c:	e000      	b.n	8002380 <HAL_GPIO_Init+0x130>
          break;
 800237e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2bff      	cmp	r3, #255	; 0xff
 8002384:	d801      	bhi.n	800238a <HAL_GPIO_Init+0x13a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	e001      	b.n	800238e <HAL_GPIO_Init+0x13e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2bff      	cmp	r3, #255	; 0xff
 8002394:	d802      	bhi.n	800239c <HAL_GPIO_Init+0x14c>
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x152>
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	3b08      	subs	r3, #8
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	210f      	movs	r1, #15
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	401a      	ands	r2, r3
 80023b4:	6a39      	ldr	r1, [r7, #32]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	431a      	orrs	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80b1 	beq.w	8002532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023d0:	4b4d      	ldr	r3, [pc, #308]	; (8002508 <HAL_GPIO_Init+0x2b8>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a4c      	ldr	r2, [pc, #304]	; (8002508 <HAL_GPIO_Init+0x2b8>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <HAL_GPIO_Init+0x2b8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e8:	4a48      	ldr	r2, [pc, #288]	; (800250c <HAL_GPIO_Init+0x2bc>)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a40      	ldr	r2, [pc, #256]	; (8002510 <HAL_GPIO_Init+0x2c0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_GPIO_Init+0x1ec>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3f      	ldr	r2, [pc, #252]	; (8002514 <HAL_GPIO_Init+0x2c4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00d      	beq.n	8002438 <HAL_GPIO_Init+0x1e8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3e      	ldr	r2, [pc, #248]	; (8002518 <HAL_GPIO_Init+0x2c8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <HAL_GPIO_Init+0x1e4>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3d      	ldr	r2, [pc, #244]	; (800251c <HAL_GPIO_Init+0x2cc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_GPIO_Init+0x1e0>
 800242c:	2303      	movs	r3, #3
 800242e:	e006      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 8002430:	2304      	movs	r3, #4
 8002432:	e004      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 8002434:	2302      	movs	r3, #2
 8002436:	e002      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 800243c:	2300      	movs	r3, #0
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	f002 0203 	and.w	r2, r2, #3
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	4093      	lsls	r3, r2
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800244e:	492f      	ldr	r1, [pc, #188]	; (800250c <HAL_GPIO_Init+0x2bc>)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	492c      	ldr	r1, [pc, #176]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002476:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	43db      	mvns	r3, r3
 800247e:	4928      	ldr	r1, [pc, #160]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 8002480:	4013      	ands	r3, r2
 8002482:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	4922      	ldr	r1, [pc, #136]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	60cb      	str	r3, [r1, #12]
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	491e      	ldr	r1, [pc, #120]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4918      	ldr	r1, [pc, #96]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	4914      	ldr	r1, [pc, #80]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d021      	beq.n	8002524 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
 80024ec:	e021      	b.n	8002532 <HAL_GPIO_Init+0x2e2>
 80024ee:	bf00      	nop
 80024f0:	10320000 	.word	0x10320000
 80024f4:	10310000 	.word	0x10310000
 80024f8:	10220000 	.word	0x10220000
 80024fc:	10210000 	.word	0x10210000
 8002500:	10120000 	.word	0x10120000
 8002504:	10110000 	.word	0x10110000
 8002508:	40021000 	.word	0x40021000
 800250c:	40010000 	.word	0x40010000
 8002510:	40010800 	.word	0x40010800
 8002514:	40010c00 	.word	0x40010c00
 8002518:	40011000 	.word	0x40011000
 800251c:	40011400 	.word	0x40011400
 8002520:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_GPIO_Init+0x304>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	43db      	mvns	r3, r3
 800252c:	4909      	ldr	r1, [pc, #36]	; (8002554 <HAL_GPIO_Init+0x304>)
 800252e:	4013      	ands	r3, r2
 8002530:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f ae8e 	bne.w	8002264 <HAL_GPIO_Init+0x14>
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	372c      	adds	r7, #44	; 0x2c
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40010400 	.word	0x40010400

08002558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e001      	b.n	800257a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	807b      	strh	r3, [r7, #2]
 8002592:	4613      	mov	r3, r2
 8002594:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002596:	787b      	ldrb	r3, [r7, #1]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259c:	887a      	ldrh	r2, [r7, #2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025a2:	e003      	b.n	80025ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	041a      	lsls	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	611a      	str	r2, [r3, #16]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e12b      	b.n	8002822 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe fe64 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800260a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800261a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800261c:	f001 f832 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8002620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4a81      	ldr	r2, [pc, #516]	; (800282c <HAL_I2C_Init+0x274>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d807      	bhi.n	800263c <HAL_I2C_Init+0x84>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a80      	ldr	r2, [pc, #512]	; (8002830 <HAL_I2C_Init+0x278>)
 8002630:	4293      	cmp	r3, r2
 8002632:	bf94      	ite	ls
 8002634:	2301      	movls	r3, #1
 8002636:	2300      	movhi	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e006      	b.n	800264a <HAL_I2C_Init+0x92>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a7d      	ldr	r2, [pc, #500]	; (8002834 <HAL_I2C_Init+0x27c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	bf94      	ite	ls
 8002644:	2301      	movls	r3, #1
 8002646:	2300      	movhi	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0e7      	b.n	8002822 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4a78      	ldr	r2, [pc, #480]	; (8002838 <HAL_I2C_Init+0x280>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0c9b      	lsrs	r3, r3, #18
 800265c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a6a      	ldr	r2, [pc, #424]	; (800282c <HAL_I2C_Init+0x274>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d802      	bhi.n	800268c <HAL_I2C_Init+0xd4>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3301      	adds	r3, #1
 800268a:	e009      	b.n	80026a0 <HAL_I2C_Init+0xe8>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	4a69      	ldr	r2, [pc, #420]	; (800283c <HAL_I2C_Init+0x284>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	099b      	lsrs	r3, r3, #6
 800269e:	3301      	adds	r3, #1
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	495c      	ldr	r1, [pc, #368]	; (800282c <HAL_I2C_Init+0x274>)
 80026bc:	428b      	cmp	r3, r1
 80026be:	d819      	bhi.n	80026f4 <HAL_I2C_Init+0x13c>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e59      	subs	r1, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ce:	1c59      	adds	r1, r3, #1
 80026d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026d4:	400b      	ands	r3, r1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_I2C_Init+0x138>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e59      	subs	r1, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e8:	3301      	adds	r3, #1
 80026ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ee:	e051      	b.n	8002794 <HAL_I2C_Init+0x1dc>
 80026f0:	2304      	movs	r3, #4
 80026f2:	e04f      	b.n	8002794 <HAL_I2C_Init+0x1dc>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d111      	bne.n	8002720 <HAL_I2C_Init+0x168>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1e58      	subs	r0, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e012      	b.n	8002746 <HAL_I2C_Init+0x18e>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1e58      	subs	r0, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	0099      	lsls	r1, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Init+0x196>
 800274a:	2301      	movs	r3, #1
 800274c:	e022      	b.n	8002794 <HAL_I2C_Init+0x1dc>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10e      	bne.n	8002774 <HAL_I2C_Init+0x1bc>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1e58      	subs	r0, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	440b      	add	r3, r1
 8002764:	fbb0 f3f3 	udiv	r3, r0, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002772:	e00f      	b.n	8002794 <HAL_I2C_Init+0x1dc>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e58      	subs	r0, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	0099      	lsls	r1, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	fbb0 f3f3 	udiv	r3, r0, r3
 800278a:	3301      	adds	r3, #1
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	6809      	ldr	r1, [r1, #0]
 8002798:	4313      	orrs	r3, r2
 800279a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6911      	ldr	r1, [r2, #16]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68d2      	ldr	r2, [r2, #12]
 80027ce:	4311      	orrs	r1, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	000186a0 	.word	0x000186a0
 8002830:	001e847f 	.word	0x001e847f
 8002834:	003d08ff 	.word	0x003d08ff
 8002838:	431bde83 	.word	0x431bde83
 800283c:	10624dd3 	.word	0x10624dd3

08002840 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	460b      	mov	r3, r1
 800284e:	817b      	strh	r3, [r7, #10]
 8002850:	4613      	mov	r3, r2
 8002852:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002854:	f7fe fee4 	bl	8001620 <HAL_GetTick>
 8002858:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b20      	cmp	r3, #32
 8002864:	f040 80e0 	bne.w	8002a28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2319      	movs	r3, #25
 800286e:	2201      	movs	r2, #1
 8002870:	4970      	ldr	r1, [pc, #448]	; (8002a34 <HAL_I2C_Master_Transmit+0x1f4>)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f964 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
 8002880:	e0d3      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_I2C_Master_Transmit+0x50>
 800288c:	2302      	movs	r3, #2
 800288e:	e0cc      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x1ea>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d007      	beq.n	80028b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2221      	movs	r2, #33	; 0x21
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2210      	movs	r2, #16
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	893a      	ldrh	r2, [r7, #8]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a50      	ldr	r2, [pc, #320]	; (8002a38 <HAL_I2C_Master_Transmit+0x1f8>)
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028f8:	8979      	ldrh	r1, [r7, #10]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	6a3a      	ldr	r2, [r7, #32]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f89c 	bl	8002a3c <I2C_MasterRequestWrite>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e08d      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002924:	e066      	b.n	80029f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	6a39      	ldr	r1, [r7, #32]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 fa22 	bl	8002d74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b04      	cmp	r3, #4
 800293c:	d107      	bne.n	800294e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e06b      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b04      	cmp	r3, #4
 800298e:	d11b      	bne.n	80029c8 <HAL_I2C_Master_Transmit+0x188>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	d017      	beq.n	80029c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	6a39      	ldr	r1, [r7, #32]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fa19 	bl	8002e04 <I2C_WaitOnBTFFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d107      	bne.n	80029f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e01a      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d194      	bne.n	8002926 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	00100002 	.word	0x00100002
 8002a38:	ffff0000 	.word	0xffff0000

08002a3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d006      	beq.n	8002a66 <I2C_MasterRequestWrite+0x2a>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d003      	beq.n	8002a66 <I2C_MasterRequestWrite+0x2a>
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a64:	d108      	bne.n	8002a78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e00b      	b.n	8002a90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	2b12      	cmp	r3, #18
 8002a7e:	d107      	bne.n	8002a90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f84f 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00d      	beq.n	8002ac4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab6:	d103      	bne.n	8002ac0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e035      	b.n	8002b30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002acc:	d108      	bne.n	8002ae0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002adc:	611a      	str	r2, [r3, #16]
 8002ade:	e01b      	b.n	8002b18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ae0:	897b      	ldrh	r3, [r7, #10]
 8002ae2:	11db      	asrs	r3, r3, #7
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 0306 	and.w	r3, r3, #6
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f063 030f 	orn	r3, r3, #15
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	490e      	ldr	r1, [pc, #56]	; (8002b38 <I2C_MasterRequestWrite+0xfc>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f898 	bl	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e010      	b.n	8002b30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b0e:	897b      	ldrh	r3, [r7, #10]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <I2C_MasterRequestWrite+0x100>)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f888 	bl	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	00010008 	.word	0x00010008
 8002b3c:	00010002 	.word	0x00010002

08002b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b50:	e048      	b.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d044      	beq.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5a:	f7fe fd61 	bl	8001620 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d139      	bne.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d10d      	bne.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	e00c      	b.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2301      	moveq	r3, #1
 8002baa:	2300      	movne	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d116      	bne.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e023      	b.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	0c1b      	lsrs	r3, r3, #16
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10d      	bne.n	8002c0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	e00c      	b.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	43da      	mvns	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d093      	beq.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c42:	e071      	b.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d123      	bne.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f043 0204 	orr.w	r2, r3, #4
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e067      	b.n	8002d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d041      	beq.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca4:	f7fe fcbc 	bl	8001620 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d302      	bcc.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d136      	bne.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10c      	bne.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf14      	ite	ne
 8002cd6:	2301      	movne	r3, #1
 8002cd8:	2300      	moveq	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	e00b      	b.n	8002cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e021      	b.n	8002d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	0c1b      	lsrs	r3, r3, #16
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10c      	bne.n	8002d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	43da      	mvns	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e00b      	b.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf14      	ite	ne
 8002d5e:	2301      	movne	r3, #1
 8002d60:	2300      	moveq	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f47f af6d 	bne.w	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d80:	e034      	b.n	8002dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f886 	bl	8002e94 <I2C_IsAcknowledgeFailed>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e034      	b.n	8002dfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d028      	beq.n	8002dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9a:	f7fe fc41 	bl	8001620 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d302      	bcc.n	8002db0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d11d      	bne.n	8002dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	2b80      	cmp	r3, #128	; 0x80
 8002dbc:	d016      	beq.n	8002dec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e007      	b.n	8002dfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d1c3      	bne.n	8002d82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e10:	e034      	b.n	8002e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f83e 	bl	8002e94 <I2C_IsAcknowledgeFailed>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e034      	b.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d028      	beq.n	8002e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7fe fbf9 	bl	8001620 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11d      	bne.n	8002e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d016      	beq.n	8002e7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e007      	b.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d1c3      	bne.n	8002e12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d11b      	bne.n	8002ee4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0204 	orr.w	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e272      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8087 	beq.w	800301e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f10:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d00c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f1c:	4b8f      	ldr	r3, [pc, #572]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d112      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
 8002f28:	4b8c      	ldr	r3, [pc, #560]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d10b      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f36:	4b89      	ldr	r3, [pc, #548]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d06c      	beq.n	800301c <HAL_RCC_OscConfig+0x12c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d168      	bne.n	800301c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e24c      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x76>
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a7f      	ldr	r2, [pc, #508]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e02e      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b7b      	ldr	r3, [pc, #492]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7a      	ldr	r2, [pc, #488]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b78      	ldr	r3, [pc, #480]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a77      	ldr	r2, [pc, #476]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0xbc>
 8002f92:	4b72      	ldr	r3, [pc, #456]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a71      	ldr	r2, [pc, #452]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6e      	ldr	r2, [pc, #440]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002fac:	4b6b      	ldr	r3, [pc, #428]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6a      	ldr	r2, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b68      	ldr	r3, [pc, #416]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a67      	ldr	r2, [pc, #412]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fb28 	bl	8001620 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe fb24 	bl	8001620 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e200      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xe4>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fb14 	bl	8001620 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fb10 	bl	8001620 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1ec      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x10c>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d063      	beq.n	80030f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302a:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x18c>
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b43      	ldr	r3, [pc, #268]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1c0      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4939      	ldr	r1, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308a:	f7fe fac9 	bl	8001620 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe fac5 	bl	8001620 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1a1      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4927      	ldr	r1, [pc, #156]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe faa8 	bl	8001620 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe faa4 	bl	8001620 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e180      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d03a      	beq.n	8003174 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d019      	beq.n	800313a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_RCC_OscConfig+0x274>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310c:	f7fe fa88 	bl	8001620 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe fa84 	bl	8001620 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e160      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003132:	2001      	movs	r0, #1
 8003134:	f000 fafe 	bl	8003734 <RCC_Delay>
 8003138:	e01c      	b.n	8003174 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_OscConfig+0x274>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fe fa6e 	bl	8001620 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003146:	e00f      	b.n	8003168 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe fa6a 	bl	8001620 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d908      	bls.n	8003168 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e146      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	42420000 	.word	0x42420000
 8003164:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	4b92      	ldr	r3, [pc, #584]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e9      	bne.n	8003148 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a6 	beq.w	80032ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003186:	4b8b      	ldr	r3, [pc, #556]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a87      	ldr	r2, [pc, #540]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	61d3      	str	r3, [r2, #28]
 800319e:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b82      	ldr	r3, [pc, #520]	; (80033b8 <HAL_RCC_OscConfig+0x4c8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d118      	bne.n	80031ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b7f      	ldr	r3, [pc, #508]	; (80033b8 <HAL_RCC_OscConfig+0x4c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a7e      	ldr	r2, [pc, #504]	; (80033b8 <HAL_RCC_OscConfig+0x4c8>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7fe fa2b 	bl	8001620 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fe fa27 	bl	8001620 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e103      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x4c8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x312>
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a6e      	ldr	r2, [pc, #440]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	e02d      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x334>
 800320a:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a69      	ldr	r2, [pc, #420]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a66      	ldr	r2, [pc, #408]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	e01c      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d10c      	bne.n	8003246 <HAL_RCC_OscConfig+0x356>
 800322c:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a60      	ldr	r2, [pc, #384]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	e00b      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003246:	4b5b      	ldr	r3, [pc, #364]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a5a      	ldr	r2, [pc, #360]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6213      	str	r3, [r2, #32]
 8003252:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a57      	ldr	r2, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d015      	beq.n	8003292 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe f9db 	bl	8001620 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe f9d7 	bl	8001620 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0b1      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ee      	beq.n	800326e <HAL_RCC_OscConfig+0x37e>
 8003290:	e014      	b.n	80032bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7fe f9c5 	bl	8001620 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe f9c1 	bl	8001620 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e09b      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b0:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ee      	bne.n	800329a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b3c      	ldr	r3, [pc, #240]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8087 	beq.w	80033e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d061      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d146      	bne.n	800337a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ec:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCC_OscConfig+0x4cc>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe f995 	bl	8001620 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe f991 	bl	8001620 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e06d      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d108      	bne.n	8003334 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4921      	ldr	r1, [pc, #132]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003334:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a19      	ldr	r1, [r3, #32]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	430b      	orrs	r3, r1
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x4cc>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe f965 	bl	8001620 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe f961 	bl	8001620 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e03d      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x46a>
 8003378:	e035      	b.n	80033e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCC_OscConfig+0x4cc>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe f94e 	bl	8001620 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe f94a 	bl	8001620 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e026      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x498>
 80033a6:	e01e      	b.n	80033e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e019      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_OscConfig+0x500>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0d0      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003408:	4b6a      	ldr	r3, [pc, #424]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d910      	bls.n	8003438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 0207 	bic.w	r2, r3, #7
 800341e:	4965      	ldr	r1, [pc, #404]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0b8      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003450:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800345a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003468:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003474:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	494d      	ldr	r1, [pc, #308]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d040      	beq.n	8003514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d115      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e073      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c2:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e06b      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4936      	ldr	r1, [pc, #216]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e4:	f7fe f89c 	bl	8001620 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7fe f898 	bl	8001620 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e053      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 020c 	and.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d1eb      	bne.n	80034ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d210      	bcs.n	8003544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4922      	ldr	r1, [pc, #136]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e032      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4916      	ldr	r1, [pc, #88]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	490e      	ldr	r1, [pc, #56]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003582:	f000 f821 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003586:	4602      	mov	r2, r0
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	490a      	ldr	r1, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	5ccb      	ldrb	r3, [r1, r3]
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1cc>)
 800359c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_ClockConfig+0x1d0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fd ff32 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40022000 	.word	0x40022000
 80035b8:	40021000 	.word	0x40021000
 80035bc:	08007790 	.word	0x08007790
 80035c0:	20000018 	.word	0x20000018
 80035c4:	2000001c 	.word	0x2000001c

080035c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCC_GetSysClockFreq+0x94>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x30>
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x36>
 80035f6:	e027      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_GetSysClockFreq+0x98>)
 80035fa:	613b      	str	r3, [r7, #16]
      break;
 80035fc:	e027      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	0c9b      	lsrs	r3, r3, #18
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003608:	5cd3      	ldrb	r3, [r2, r3]
 800360a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d010      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_RCC_GetSysClockFreq+0x94>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	0c5b      	lsrs	r3, r3, #17
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	4a11      	ldr	r2, [pc, #68]	; (8003668 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003622:	5cd3      	ldrb	r3, [r2, r3]
 8003624:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <HAL_RCC_GetSysClockFreq+0x98>)
 800362a:	fb03 f202 	mul.w	r2, r3, r2
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e004      	b.n	8003642 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a0c      	ldr	r2, [pc, #48]	; (800366c <HAL_RCC_GetSysClockFreq+0xa4>)
 800363c:	fb02 f303 	mul.w	r3, r2, r3
 8003640:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	613b      	str	r3, [r7, #16]
      break;
 8003646:	e002      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetSysClockFreq+0x98>)
 800364a:	613b      	str	r3, [r7, #16]
      break;
 800364c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364e:	693b      	ldr	r3, [r7, #16]
}
 8003650:	4618      	mov	r0, r3
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	007a1200 	.word	0x007a1200
 8003664:	080077a8 	.word	0x080077a8
 8003668:	080077b8 	.word	0x080077b8
 800366c:	003d0900 	.word	0x003d0900

08003670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b02      	ldr	r3, [pc, #8]	; (8003680 <HAL_RCC_GetHCLKFreq+0x10>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	20000018 	.word	0x20000018

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003688:	f7ff fff2 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4903      	ldr	r1, [pc, #12]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	080077a0 	.word	0x080077a0

080036ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036b0:	f7ff ffde 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	0adb      	lsrs	r3, r3, #11
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40021000 	.word	0x40021000
 80036d0:	080077a0 	.word	0x080077a0

080036d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	220f      	movs	r2, #15
 80036e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_RCC_GetClockConfig+0x58>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036f0:	4b0e      	ldr	r3, [pc, #56]	; (800372c <HAL_RCC_GetClockConfig+0x58>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_GetClockConfig+0x58>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_RCC_GetClockConfig+0x58>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_GetClockConfig+0x5c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40021000 	.word	0x40021000
 8003730:	40022000 	.word	0x40022000

08003734 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <RCC_Delay+0x34>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a0a      	ldr	r2, [pc, #40]	; (800376c <RCC_Delay+0x38>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0a5b      	lsrs	r3, r3, #9
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003750:	bf00      	nop
  }
  while (Delay --);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e5a      	subs	r2, r3, #1
 8003756:	60fa      	str	r2, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f9      	bne.n	8003750 <RCC_Delay+0x1c>
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	20000018 	.word	0x20000018
 800376c:	10624dd3 	.word	0x10624dd3

08003770 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d07d      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003790:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	4a4b      	ldr	r2, [pc, #300]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a6:	61d3      	str	r3, [r2, #28]
 80037a8:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b4:	2301      	movs	r3, #1
 80037b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d118      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a42      	ldr	r2, [pc, #264]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d0:	f7fd ff26 	bl	8001620 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	e008      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d8:	f7fd ff22 	bl	8001620 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e06d      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f6:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02e      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	d027      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381e:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003824:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800382a:	4a29      	ldr	r2, [pc, #164]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d014      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fd fef1 	bl	8001620 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	e00a      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd feed 	bl	8001620 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e036      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4917      	ldr	r1, [pc, #92]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	4313      	orrs	r3, r2
 8003874:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	490b      	ldr	r1, [pc, #44]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	4904      	ldr	r1, [pc, #16]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40007000 	.word	0x40007000
 80038d8:	42420440 	.word	0x42420440

080038dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	2300      	movs	r3, #0
 80038ea:	61fb      	str	r3, [r7, #28]
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b10      	cmp	r3, #16
 8003902:	f200 808a 	bhi.w	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d045      	beq.n	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d075      	beq.n	80039fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003912:	e082      	b.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003914:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800391a:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d07b      	beq.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	0c9b      	lsrs	r3, r3, #18
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	4a41      	ldr	r2, [pc, #260]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003930:	5cd3      	ldrb	r3, [r2, r3]
 8003932:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d015      	beq.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800393e:	4b3c      	ldr	r3, [pc, #240]	; (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	0c5b      	lsrs	r3, r3, #17
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	4a3b      	ldr	r2, [pc, #236]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00d      	beq.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003958:	4a38      	ldr	r2, [pc, #224]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e004      	b.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4a34      	ldr	r2, [pc, #208]	; (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003974:	4b2e      	ldr	r3, [pc, #184]	; (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003980:	d102      	bne.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	61bb      	str	r3, [r7, #24]
      break;
 8003986:	e04a      	b.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4a2d      	ldr	r2, [pc, #180]	; (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	61bb      	str	r3, [r7, #24]
      break;
 8003996:	e042      	b.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003998:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a8:	d108      	bne.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80039b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e01f      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c6:	d109      	bne.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80039d4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e00f      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e6:	d11c      	bne.n	8003a22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d016      	beq.n	8003a22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80039f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80039f8:	61bb      	str	r3, [r7, #24]
      break;
 80039fa:	e012      	b.n	8003a22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80039fc:	e011      	b.n	8003a22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80039fe:	f7ff fe55 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8003a02:	4602      	mov	r2, r0
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	0b9b      	lsrs	r3, r3, #14
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	61bb      	str	r3, [r7, #24]
      break;
 8003a18:	e004      	b.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e002      	b.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a22:	bf00      	nop
    }
  }
  return (frequency);
 8003a24:	69bb      	ldr	r3, [r7, #24]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	080077bc 	.word	0x080077bc
 8003a38:	080077cc 	.word	0x080077cc
 8003a3c:	007a1200 	.word	0x007a1200
 8003a40:	003d0900 	.word	0x003d0900
 8003a44:	aaaaaaab 	.word	0xaaaaaaab

08003a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e041      	b.n	8003ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fd fc5a 	bl	8001328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f000 faa6 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d001      	beq.n	8003b00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e032      	b.n	8003b66 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a18      	ldr	r2, [pc, #96]	; (8003b70 <HAL_TIM_Base_Start+0x88>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00e      	beq.n	8003b30 <HAL_TIM_Base_Start+0x48>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d009      	beq.n	8003b30 <HAL_TIM_Base_Start+0x48>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <HAL_TIM_Base_Start+0x8c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_TIM_Base_Start+0x48>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <HAL_TIM_Base_Start+0x90>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d111      	bne.n	8003b54 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d010      	beq.n	8003b64 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b52:	e007      	b.n	8003b64 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800

08003b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d001      	beq.n	8003b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e03a      	b.n	8003c0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_TIM_Base_Start_IT+0x98>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x58>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d009      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x58>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <HAL_TIM_Base_Start_IT+0x9c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x58>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <HAL_TIM_Base_Start_IT+0xa0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d111      	bne.n	8003bf8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d010      	beq.n	8003c08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	e007      	b.n	8003c08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800

08003c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d020      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01b      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0202 	mvn.w	r2, #2
 8003c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f998 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003c70:	e005      	b.n	8003c7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f98b 	bl	8003f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f99a 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d020      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01b      	beq.n	8003cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0204 	mvn.w	r2, #4
 8003ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f972 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e005      	b.n	8003cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f965 	bl	8003f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f974 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d020      	beq.n	8003d1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01b      	beq.n	8003d1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0208 	mvn.w	r2, #8
 8003cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f94c 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003d08:	e005      	b.n	8003d16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f93f 	bl	8003f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f94e 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d020      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01b      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0210 	mvn.w	r2, #16
 8003d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f926 	bl	8003fa0 <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f919 	bl	8003f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f928 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0201 	mvn.w	r2, #1
 8003d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fa04 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa7f 	bl	80042ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00c      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f8f8 	bl	8003fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00c      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0220 	mvn.w	r2, #32
 8003df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa52 	bl	800429c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_TIM_ConfigClockSource+0x1c>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0b4      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x186>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e54:	d03e      	beq.n	8003ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5a:	f200 8087 	bhi.w	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	f000 8086 	beq.w	8003f72 <HAL_TIM_ConfigClockSource+0x172>
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	d87f      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b70      	cmp	r3, #112	; 0x70
 8003e6e:	d01a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d87b      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b60      	cmp	r3, #96	; 0x60
 8003e76:	d050      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x11a>
 8003e78:	2b60      	cmp	r3, #96	; 0x60
 8003e7a:	d877      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b50      	cmp	r3, #80	; 0x50
 8003e7e:	d03c      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0xfa>
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d873      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d058      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x13a>
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d86f      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b30      	cmp	r3, #48	; 0x30
 8003e8e:	d064      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003e90:	2b30      	cmp	r3, #48	; 0x30
 8003e92:	d86b      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d060      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d867      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05c      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d05a      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea4:	e062      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6899      	ldr	r1, [r3, #8]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f000 f974 	bl	80041a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	609a      	str	r2, [r3, #8]
      break;
 8003ed2:	e04f      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6899      	ldr	r1, [r3, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f000 f95d 	bl	80041a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ef6:	609a      	str	r2, [r3, #8]
      break;
 8003ef8:	e03c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6859      	ldr	r1, [r3, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f000 f8d4 	bl	80040b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2150      	movs	r1, #80	; 0x50
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f92b 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003f18:	e02c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	461a      	mov	r2, r3
 8003f28:	f000 f8f2 	bl	8004110 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2160      	movs	r1, #96	; 0x60
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f91b 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003f38:	e01c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 f8b4 	bl	80040b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2140      	movs	r1, #64	; 0x40
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f90b 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003f58:	e00c      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f000 f902 	bl	800416e <TIM_ITRx_SetConfig>
      break;
 8003f6a:	e003      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f70:	e000      	b.n	8003f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr
	...

08003fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <TIM_Base_SetConfig+0xd0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <TIM_Base_SetConfig+0xd4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a2b      	ldr	r2, [pc, #172]	; (80040b0 <TIM_Base_SetConfig+0xd8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a22      	ldr	r2, [pc, #136]	; (80040a8 <TIM_Base_SetConfig+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00b      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d007      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1f      	ldr	r2, [pc, #124]	; (80040ac <TIM_Base_SetConfig+0xd4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1e      	ldr	r2, [pc, #120]	; (80040b0 <TIM_Base_SetConfig+0xd8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d108      	bne.n	800404c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <TIM_Base_SetConfig+0xd0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d103      	bne.n	8004080 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]
  }
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800

080040b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0201 	bic.w	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 030a 	bic.w	r3, r3, #10
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr

08004110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0210 	bic.w	r2, r3, #16
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	031b      	lsls	r3, r3, #12
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800414c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	621a      	str	r2, [r3, #32]
}
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	f043 0307 	orr.w	r3, r3, #7
 8004190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b087      	sub	sp, #28
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	021a      	lsls	r2, r3, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	609a      	str	r2, [r3, #8]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e046      	b.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004244:	d009      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a12      	ldr	r2, [pc, #72]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a10      	ldr	r2, [pc, #64]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10c      	bne.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4313      	orrs	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	40012c00 	.word	0x40012c00
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800

0800429c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e042      	b.n	8004358 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd f83c 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fdb7 	bl	8004e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b20      	cmp	r3, #32
 800437e:	d175      	bne.n	800446c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_UART_Transmit+0x2c>
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e06e      	b.n	800446e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2221      	movs	r2, #33	; 0x21
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800439e:	f7fd f93f 	bl	8001620 <HAL_GetTick>
 80043a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b8:	d108      	bne.n	80043cc <HAL_UART_Transmit+0x6c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d104      	bne.n	80043cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e003      	b.n	80043d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043d4:	e02e      	b.n	8004434 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	2180      	movs	r1, #128	; 0x80
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fb1c 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e03a      	b.n	800446e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800440c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	3302      	adds	r3, #2
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	e007      	b.n	8004426 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	3301      	adds	r3, #1
 8004424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1cb      	bne.n	80043d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	2140      	movs	r1, #64	; 0x40
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fae8 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e006      	b.n	800446e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	e000      	b.n	800446e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800446c:	2302      	movs	r3, #2
  }
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	4613      	mov	r3, r2
 8004482:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b20      	cmp	r3, #32
 800448e:	d112      	bne.n	80044b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_UART_Receive_IT+0x26>
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e00b      	b.n	80044b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	461a      	mov	r2, r3
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fb0f 	bl	8004ad0 <UART_Start_Receive_IT>
 80044b2:	4603      	mov	r3, r0
 80044b4:	e000      	b.n	80044b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b0ba      	sub	sp, #232	; 0xe8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10f      	bne.n	8004526 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_UART_IRQHandler+0x66>
 8004512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fbec 	bl	8004cfc <UART_Receive_IT>
      return;
 8004524:	e25b      	b.n	80049de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80de 	beq.w	80046ec <HAL_UART_IRQHandler+0x22c>
 8004530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800453c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004540:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80d1 	beq.w	80046ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_UART_IRQHandler+0xae>
 8004556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f043 0201 	orr.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <HAL_UART_IRQHandler+0xd2>
 800457a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f043 0202 	orr.w	r2, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_UART_IRQHandler+0xf6>
 800459e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f043 0204 	orr.w	r2, r3, #4
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d011      	beq.n	80045e6 <HAL_UART_IRQHandler+0x126>
 80045c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f043 0208 	orr.w	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 81f2 	beq.w	80049d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_UART_IRQHandler+0x14e>
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fb77 	bl	8004cfc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d103      	bne.n	800463a <HAL_UART_IRQHandler+0x17a>
 8004632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d04f      	beq.n	80046da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fa81 	bl	8004b42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d041      	beq.n	80046d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3314      	adds	r3, #20
 8004654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3314      	adds	r3, #20
 8004676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800467a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800467e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1d9      	bne.n	800464e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d013      	beq.n	80046ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	4a7e      	ldr	r2, [pc, #504]	; (80048a0 <HAL_UART_IRQHandler+0x3e0>)
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd fd56 	bl	8002160 <HAL_DMA_Abort_IT>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046c4:	4610      	mov	r0, r2
 80046c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	e00e      	b.n	80046e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f993 	bl	80049f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d0:	e00a      	b.n	80046e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f98f 	bl	80049f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d8:	e006      	b.n	80046e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f98b 	bl	80049f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80046e6:	e175      	b.n	80049d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	bf00      	nop
    return;
 80046ea:	e173      	b.n	80049d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 814f 	bne.w	8004994 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 8148 	beq.w	8004994 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8141 	beq.w	8004994 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80b6 	beq.w	80048a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004744:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8145 	beq.w	80049d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004756:	429a      	cmp	r2, r3
 8004758:	f080 813e 	bcs.w	80049d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004762:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b20      	cmp	r3, #32
 800476c:	f000 8088 	beq.w	8004880 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800478a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800478e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	330c      	adds	r3, #12
 8004798:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800479c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1d9      	bne.n	8004770 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3314      	adds	r3, #20
 80047c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3314      	adds	r3, #20
 80047dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e1      	bne.n	80047bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3314      	adds	r3, #20
 80047fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3314      	adds	r3, #20
 8004818:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800481c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800481e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004822:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004824:	e841 2300 	strex	r3, r2, [r1]
 8004828:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800482a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e3      	bne.n	80047f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800484e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004850:	f023 0310 	bic.w	r3, r3, #16
 8004854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	330c      	adds	r3, #12
 800485e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004862:	65ba      	str	r2, [r7, #88]	; 0x58
 8004864:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e3      	bne.n	800483e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	4618      	mov	r0, r3
 800487c:	f7fd fc35 	bl	80020ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800488e:	b29b      	uxth	r3, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	b29b      	uxth	r3, r3
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8b6 	bl	8004a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800489c:	e09c      	b.n	80049d8 <HAL_UART_IRQHandler+0x518>
 800489e:	bf00      	nop
 80048a0:	08004c07 	.word	0x08004c07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 808e 	beq.w	80049dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8089 	beq.w	80049dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048ee:	647a      	str	r2, [r7, #68]	; 0x44
 80048f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e3      	bne.n	80048ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	623b      	str	r3, [r7, #32]
   return(result);
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3314      	adds	r3, #20
 8004922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004926:	633a      	str	r2, [r7, #48]	; 0x30
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800492c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e3      	bne.n	8004902 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	60fb      	str	r3, [r7, #12]
   return(result);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0310 	bic.w	r3, r3, #16
 800495e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800496c:	61fa      	str	r2, [r7, #28]
 800496e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	69b9      	ldr	r1, [r7, #24]
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	617b      	str	r3, [r7, #20]
   return(result);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e3      	bne.n	8004948 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f83b 	bl	8004a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004992:	e023      	b.n	80049dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <HAL_UART_IRQHandler+0x4f4>
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f93e 	bl	8004c2e <UART_Transmit_IT>
    return;
 80049b2:	e014      	b.n	80049de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00e      	beq.n	80049de <HAL_UART_IRQHandler+0x51e>
 80049c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f97d 	bl	8004ccc <UART_EndTransmit_IT>
    return;
 80049d2:	e004      	b.n	80049de <HAL_UART_IRQHandler+0x51e>
    return;
 80049d4:	bf00      	nop
 80049d6:	e002      	b.n	80049de <HAL_UART_IRQHandler+0x51e>
      return;
 80049d8:	bf00      	nop
 80049da:	e000      	b.n	80049de <HAL_UART_IRQHandler+0x51e>
      return;
 80049dc:	bf00      	nop
  }
}
 80049de:	37e8      	adds	r7, #232	; 0xe8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr

08004a08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2e:	e03b      	b.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d037      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a38:	f7fc fdf2 	bl	8001620 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	6a3a      	ldr	r2, [r7, #32]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d302      	bcc.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e03a      	b.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d023      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b80      	cmp	r3, #128	; 0x80
 8004a64:	d020      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d01d      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d116      	bne.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f856 	bl	8004b42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2208      	movs	r2, #8
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e00f      	b.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d0b4      	beq.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	88fa      	ldrh	r2, [r7, #6]
 8004ae8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2222      	movs	r2, #34	; 0x22
 8004afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0220 	orr.w	r2, r2, #32
 8004b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b095      	sub	sp, #84	; 0x54
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b6a:	643a      	str	r2, [r7, #64]	; 0x40
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e5      	bne.n	8004b4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e5      	bne.n	8004b7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d119      	bne.n	8004bee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f023 0310 	bic.w	r3, r3, #16
 8004bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bda:	61ba      	str	r2, [r7, #24]
 8004bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	6979      	ldr	r1, [r7, #20]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	613b      	str	r3, [r7, #16]
   return(result);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e5      	bne.n	8004bba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bfc:	bf00      	nop
 8004bfe:	3754      	adds	r7, #84	; 0x54
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff fee8 	bl	80049f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b21      	cmp	r3, #33	; 0x21
 8004c40:	d13e      	bne.n	8004cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	d114      	bne.n	8004c76 <UART_Transmit_IT+0x48>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d110      	bne.n	8004c76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	1c9a      	adds	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	621a      	str	r2, [r3, #32]
 8004c74:	e008      	b.n	8004c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6211      	str	r1, [r2, #32]
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4619      	mov	r1, r3
 8004c96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10f      	bne.n	8004cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e000      	b.n	8004cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff fe79 	bl	80049e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08c      	sub	sp, #48	; 0x30
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b22      	cmp	r3, #34	; 0x22
 8004d0e:	f040 80ae 	bne.w	8004e6e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	d117      	bne.n	8004d4c <UART_Receive_IT+0x50>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d113      	bne.n	8004d4c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	1c9a      	adds	r2, r3, #2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28
 8004d4a:	e026      	b.n	8004d9a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d007      	beq.n	8004d70 <UART_Receive_IT+0x74>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <UART_Receive_IT+0x82>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	e008      	b.n	8004d90 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4619      	mov	r1, r3
 8004da8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d15d      	bne.n	8004e6a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0220 	bic.w	r2, r2, #32
 8004dbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d135      	bne.n	8004e60 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f023 0310 	bic.w	r3, r3, #16
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1a:	623a      	str	r2, [r7, #32]
 8004e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	69f9      	ldr	r1, [r7, #28]
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e5      	bne.n	8004dfa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d10a      	bne.n	8004e52 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fdd5 	bl	8004a08 <HAL_UARTEx_RxEventCallback>
 8004e5e:	e002      	b.n	8004e66 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fc f92b 	bl	80010bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e002      	b.n	8004e70 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e000      	b.n	8004e70 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e6e:	2302      	movs	r3, #2
  }
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3730      	adds	r7, #48	; 0x30
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004eb2:	f023 030c 	bic.w	r3, r3, #12
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <UART_SetConfig+0x114>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d103      	bne.n	8004ee8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ee0:	f7fe fbe4 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	e002      	b.n	8004eee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ee8:	f7fe fbcc 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8004eec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009a      	lsls	r2, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	4a22      	ldr	r2, [pc, #136]	; (8004f90 <UART_SetConfig+0x118>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	0119      	lsls	r1, r3, #4
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009a      	lsls	r2, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <UART_SetConfig+0x118>)
 8004f26:	fba3 0302 	umull	r0, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2064      	movs	r0, #100	; 0x64
 8004f2e:	fb00 f303 	mul.w	r3, r0, r3
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	3332      	adds	r3, #50	; 0x32
 8004f38:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <UART_SetConfig+0x118>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f44:	4419      	add	r1, r3
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009a      	lsls	r2, r3, #2
 8004f50:	441a      	add	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f5c:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <UART_SetConfig+0x118>)
 8004f5e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	2064      	movs	r0, #100	; 0x64
 8004f66:	fb00 f303 	mul.w	r3, r0, r3
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	3332      	adds	r3, #50	; 0x32
 8004f70:	4a07      	ldr	r2, [pc, #28]	; (8004f90 <UART_SetConfig+0x118>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	f003 020f 	and.w	r2, r3, #15
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	440a      	add	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	51eb851f 	.word	0x51eb851f

08004f94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fa6:	2b84      	cmp	r3, #132	; 0x84
 8004fa8:	d005      	beq.n	8004fb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004faa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3303      	adds	r3, #3
 8004fb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fc6:	f000 fad9 	bl	800557c <vTaskStartScheduler>
  
  return osOK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <osThreadCreate+0x54>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01c      	beq.n	8005024 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685c      	ldr	r4, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681d      	ldr	r5, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691e      	ldr	r6, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff ffc9 	bl	8004f94 <makeFreeRtosPriority>
 8005002:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800500c:	9202      	str	r2, [sp, #8]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	9100      	str	r1, [sp, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	4632      	mov	r2, r6
 8005016:	4629      	mov	r1, r5
 8005018:	4620      	mov	r0, r4
 800501a:	f000 f8e8 	bl	80051ee <xTaskCreateStatic>
 800501e:	4603      	mov	r3, r0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e01c      	b.n	800505e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685c      	ldr	r4, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005030:	b29e      	uxth	r6, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ffab 	bl	8004f94 <makeFreeRtosPriority>
 800503e:	4602      	mov	r2, r0
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	9200      	str	r2, [sp, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	4632      	mov	r2, r6
 800504c:	4629      	mov	r1, r5
 800504e:	4620      	mov	r0, r4
 8005050:	f000 f92a 	bl	80052a8 <xTaskCreate>
 8005054:	4603      	mov	r3, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	d001      	beq.n	800505e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005068 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <osDelay+0x16>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	e000      	b.n	8005080 <osDelay+0x18>
 800507e:	2301      	movs	r3, #1
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fa47 	bl	8005514 <vTaskDelay>
  
  return osOK;
 8005086:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f103 0208 	add.w	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f04f 32ff 	mov.w	r2, #4294967295
 80050a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f103 0208 	add.w	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f103 0208 	add.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr

080050ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d103      	bne.n	800514c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e00c      	b.n	8005166 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3308      	adds	r3, #8
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e002      	b.n	800515a <vListInsert+0x2e>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	d2f6      	bcs.n	8005154 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	601a      	str	r2, [r3, #0]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6892      	ldr	r2, [r2, #8]
 80051b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6852      	ldr	r2, [r2, #4]
 80051bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d103      	bne.n	80051d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	1e5a      	subs	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b08e      	sub	sp, #56	; 0x38
 80051f2:	af04      	add	r7, sp, #16
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005214:	bf00      	nop
 8005216:	e7fe      	b.n	8005216 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <xTaskCreateStatic+0x46>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	61fb      	str	r3, [r7, #28]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005234:	2354      	movs	r3, #84	; 0x54
 8005236:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b54      	cmp	r3, #84	; 0x54
 800523c:	d00a      	beq.n	8005254 <xTaskCreateStatic+0x66>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	61bb      	str	r3, [r7, #24]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005254:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01e      	beq.n	800529a <xTaskCreateStatic+0xac>
 800525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01b      	beq.n	800529a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800526a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	2202      	movs	r2, #2
 8005270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005274:	2300      	movs	r3, #0
 8005276:	9303      	str	r3, [sp, #12]
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	9302      	str	r3, [sp, #8]
 800527c:	f107 0314 	add.w	r3, r7, #20
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f850 	bl	8005332 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005294:	f000 f8d4 	bl	8005440 <prvAddNewTaskToReadyList>
 8005298:	e001      	b.n	800529e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800529e:	697b      	ldr	r3, [r7, #20]
	}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3728      	adds	r7, #40	; 0x28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08c      	sub	sp, #48	; 0x30
 80052ac:	af04      	add	r7, sp, #16
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	4613      	mov	r3, r2
 80052b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fe67 	bl	8005f90 <pvPortMalloc>
 80052c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00e      	beq.n	80052e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052ca:	2054      	movs	r0, #84	; 0x54
 80052cc:	f000 fe60 	bl	8005f90 <pvPortMalloc>
 80052d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
 80052de:	e005      	b.n	80052ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f000 ff21 	bl	8006128 <vPortFree>
 80052e6:	e001      	b.n	80052ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d017      	beq.n	8005322 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	2300      	movs	r3, #0
 80052fe:	9303      	str	r3, [sp, #12]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	9302      	str	r3, [sp, #8]
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f80e 	bl	8005332 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005316:	69f8      	ldr	r0, [r7, #28]
 8005318:	f000 f892 	bl	8005440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800531c:	2301      	movs	r3, #1
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e002      	b.n	8005328 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005322:	f04f 33ff 	mov.w	r3, #4294967295
 8005326:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005328:	69bb      	ldr	r3, [r7, #24]
	}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b088      	sub	sp, #32
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800534a:	3b01      	subs	r3, #1
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <prvInitialiseNewTask+0x48>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	617b      	str	r3, [r7, #20]
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01f      	beq.n	80053c0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	e012      	b.n	80053ac <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	7819      	ldrb	r1, [r3, #0]
 800538e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	3334      	adds	r3, #52	; 0x34
 8005396:	460a      	mov	r2, r1
 8005398:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	4413      	add	r3, r2
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d006      	beq.n	80053b4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3301      	adds	r3, #1
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2b0f      	cmp	r3, #15
 80053b0:	d9e9      	bls.n	8005386 <prvInitialiseNewTask+0x54>
 80053b2:	e000      	b.n	80053b6 <prvInitialiseNewTask+0x84>
			{
				break;
 80053b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053be:	e003      	b.n	80053c8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	2b06      	cmp	r3, #6
 80053cc:	d901      	bls.n	80053d2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053ce:	2306      	movs	r3, #6
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053dc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	3304      	adds	r3, #4
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fe70 	bl	80050ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	3318      	adds	r3, #24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff fe6b 	bl	80050ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	f1c3 0207 	rsb	r2, r3, #7
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	2200      	movs	r2, #0
 8005412:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	68f9      	ldr	r1, [r7, #12]
 8005420:	69b8      	ldr	r0, [r7, #24]
 8005422:	f000 fc03 	bl	8005c2c <pxPortInitialiseStack>
 8005426:	4602      	mov	r2, r0
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005436:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005438:	bf00      	nop
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005448:	f000 fce0 	bl	8005e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800544c:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <prvAddNewTaskToReadyList+0xb8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <prvAddNewTaskToReadyList+0xb8>)
 8005454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005456:	4b29      	ldr	r3, [pc, #164]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800545e:	4a27      	ldr	r2, [pc, #156]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005464:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <prvAddNewTaskToReadyList+0xb8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d110      	bne.n	800548e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800546c:	f000 faba 	bl	80059e4 <prvInitialiseTaskLists>
 8005470:	e00d      	b.n	800548e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005472:	4b23      	ldr	r3, [pc, #140]	; (8005500 <prvAddNewTaskToReadyList+0xc0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800547a:	4b20      	ldr	r3, [pc, #128]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	429a      	cmp	r2, r3
 8005486:	d802      	bhi.n	800548e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005488:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800548e:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <prvAddNewTaskToReadyList+0xc4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3301      	adds	r3, #1
 8005494:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <prvAddNewTaskToReadyList+0xc4>)
 8005496:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	2201      	movs	r2, #1
 800549e:	409a      	lsls	r2, r3
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <prvAddNewTaskToReadyList+0xc8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <prvAddNewTaskToReadyList+0xc8>)
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4a15      	ldr	r2, [pc, #84]	; (800550c <prvAddNewTaskToReadyList+0xcc>)
 80054b8:	441a      	add	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3304      	adds	r3, #4
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7ff fe10 	bl	80050e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054c6:	f000 fcd1 	bl	8005e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <prvAddNewTaskToReadyList+0xc0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00e      	beq.n	80054f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054d2:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <prvAddNewTaskToReadyList+0xbc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	429a      	cmp	r2, r3
 80054de:	d207      	bcs.n	80054f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <prvAddNewTaskToReadyList+0xd0>)
 80054e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	200005f4 	.word	0x200005f4
 80054fc:	200004f4 	.word	0x200004f4
 8005500:	20000600 	.word	0x20000600
 8005504:	20000610 	.word	0x20000610
 8005508:	200005fc 	.word	0x200005fc
 800550c:	200004f8 	.word	0x200004f8
 8005510:	e000ed04 	.word	0xe000ed04

08005514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <vTaskDelay+0x60>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <vTaskDelay+0x30>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60bb      	str	r3, [r7, #8]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005544:	f000 f87a 	bl	800563c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005548:	2100      	movs	r1, #0
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fb08 	bl	8005b60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005550:	f000 f882 	bl	8005658 <xTaskResumeAll>
 8005554:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <vTaskDelay+0x64>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	2000061c 	.word	0x2000061c
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800558a:	463a      	mov	r2, r7
 800558c:	1d39      	adds	r1, r7, #4
 800558e:	f107 0308 	add.w	r3, r7, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f7fb f8e4 	bl	8000760 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	9202      	str	r2, [sp, #8]
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	2300      	movs	r3, #0
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	2300      	movs	r3, #0
 80055a8:	460a      	mov	r2, r1
 80055aa:	491e      	ldr	r1, [pc, #120]	; (8005624 <vTaskStartScheduler+0xa8>)
 80055ac:	481e      	ldr	r0, [pc, #120]	; (8005628 <vTaskStartScheduler+0xac>)
 80055ae:	f7ff fe1e 	bl	80051ee <xTaskCreateStatic>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4a1d      	ldr	r2, [pc, #116]	; (800562c <vTaskStartScheduler+0xb0>)
 80055b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055b8:	4b1c      	ldr	r3, [pc, #112]	; (800562c <vTaskStartScheduler+0xb0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e001      	b.n	80055ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d116      	bne.n	80055fe <vTaskStartScheduler+0x82>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055e4:	4b12      	ldr	r3, [pc, #72]	; (8005630 <vTaskStartScheduler+0xb4>)
 80055e6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055ec:	4b11      	ldr	r3, [pc, #68]	; (8005634 <vTaskStartScheduler+0xb8>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <vTaskStartScheduler+0xbc>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055f8:	f000 fb96 	bl	8005d28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055fc:	e00e      	b.n	800561c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d10a      	bne.n	800561c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60fb      	str	r3, [r7, #12]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <vTaskStartScheduler+0x9e>
}
 800561c:	bf00      	nop
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	0800777c 	.word	0x0800777c
 8005628:	080059b5 	.word	0x080059b5
 800562c:	20000618 	.word	0x20000618
 8005630:	20000614 	.word	0x20000614
 8005634:	20000600 	.word	0x20000600
 8005638:	200005f8 	.word	0x200005f8

0800563c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005640:	4b04      	ldr	r3, [pc, #16]	; (8005654 <vTaskSuspendAll+0x18>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	4a03      	ldr	r2, [pc, #12]	; (8005654 <vTaskSuspendAll+0x18>)
 8005648:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800564a:	bf00      	nop
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	2000061c 	.word	0x2000061c

08005658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <xTaskResumeAll+0x114>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <xTaskResumeAll+0x2c>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	603b      	str	r3, [r7, #0]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005684:	f000 fbc2 	bl	8005e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005688:	4b38      	ldr	r3, [pc, #224]	; (800576c <xTaskResumeAll+0x114>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3b01      	subs	r3, #1
 800568e:	4a37      	ldr	r2, [pc, #220]	; (800576c <xTaskResumeAll+0x114>)
 8005690:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005692:	4b36      	ldr	r3, [pc, #216]	; (800576c <xTaskResumeAll+0x114>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d161      	bne.n	800575e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800569a:	4b35      	ldr	r3, [pc, #212]	; (8005770 <xTaskResumeAll+0x118>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d05d      	beq.n	800575e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056a2:	e02e      	b.n	8005702 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a4:	4b33      	ldr	r3, [pc, #204]	; (8005774 <xTaskResumeAll+0x11c>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3318      	adds	r3, #24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fd73 	bl	800519c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fd6e 	bl	800519c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	2201      	movs	r2, #1
 80056c6:	409a      	lsls	r2, r3
 80056c8:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <xTaskResumeAll+0x120>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	4a2a      	ldr	r2, [pc, #168]	; (8005778 <xTaskResumeAll+0x120>)
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4a27      	ldr	r2, [pc, #156]	; (800577c <xTaskResumeAll+0x124>)
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f7ff fcfc 	bl	80050e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f2:	4b23      	ldr	r3, [pc, #140]	; (8005780 <xTaskResumeAll+0x128>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056fc:	4b21      	ldr	r3, [pc, #132]	; (8005784 <xTaskResumeAll+0x12c>)
 80056fe:	2201      	movs	r2, #1
 8005700:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <xTaskResumeAll+0x11c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1cc      	bne.n	80056a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005710:	f000 fa06 	bl	8005b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005714:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <xTaskResumeAll+0x130>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d010      	beq.n	8005742 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005720:	f000 f836 	bl	8005790 <xTaskIncrementTick>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800572a:	4b16      	ldr	r3, [pc, #88]	; (8005784 <xTaskResumeAll+0x12c>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3b01      	subs	r3, #1
 8005734:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f1      	bne.n	8005720 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <xTaskResumeAll+0x130>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005742:	4b10      	ldr	r3, [pc, #64]	; (8005784 <xTaskResumeAll+0x12c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800574a:	2301      	movs	r3, #1
 800574c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <xTaskResumeAll+0x134>)
 8005750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800575e:	f000 fb85 	bl	8005e6c <vPortExitCritical>

	return xAlreadyYielded;
 8005762:	68bb      	ldr	r3, [r7, #8]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	2000061c 	.word	0x2000061c
 8005770:	200005f4 	.word	0x200005f4
 8005774:	200005b4 	.word	0x200005b4
 8005778:	200005fc 	.word	0x200005fc
 800577c:	200004f8 	.word	0x200004f8
 8005780:	200004f4 	.word	0x200004f4
 8005784:	20000608 	.word	0x20000608
 8005788:	20000604 	.word	0x20000604
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800579a:	4b4e      	ldr	r3, [pc, #312]	; (80058d4 <xTaskIncrementTick+0x144>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 808e 	bne.w	80058c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057a4:	4b4c      	ldr	r3, [pc, #304]	; (80058d8 <xTaskIncrementTick+0x148>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3301      	adds	r3, #1
 80057aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057ac:	4a4a      	ldr	r2, [pc, #296]	; (80058d8 <xTaskIncrementTick+0x148>)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d120      	bne.n	80057fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057b8:	4b48      	ldr	r3, [pc, #288]	; (80058dc <xTaskIncrementTick+0x14c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	603b      	str	r3, [r7, #0]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xTaskIncrementTick+0x46>
 80057d8:	4b40      	ldr	r3, [pc, #256]	; (80058dc <xTaskIncrementTick+0x14c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	4b40      	ldr	r3, [pc, #256]	; (80058e0 <xTaskIncrementTick+0x150>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a3e      	ldr	r2, [pc, #248]	; (80058dc <xTaskIncrementTick+0x14c>)
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4a3e      	ldr	r2, [pc, #248]	; (80058e0 <xTaskIncrementTick+0x150>)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	4b3d      	ldr	r3, [pc, #244]	; (80058e4 <xTaskIncrementTick+0x154>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3301      	adds	r3, #1
 80057f2:	4a3c      	ldr	r2, [pc, #240]	; (80058e4 <xTaskIncrementTick+0x154>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	f000 f993 	bl	8005b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057fa:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <xTaskIncrementTick+0x158>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	429a      	cmp	r2, r3
 8005802:	d348      	bcc.n	8005896 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005804:	4b35      	ldr	r3, [pc, #212]	; (80058dc <xTaskIncrementTick+0x14c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <xTaskIncrementTick+0x158>)
 8005810:	f04f 32ff 	mov.w	r2, #4294967295
 8005814:	601a      	str	r2, [r3, #0]
					break;
 8005816:	e03e      	b.n	8005896 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <xTaskIncrementTick+0x14c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d203      	bcs.n	8005838 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005830:	4a2d      	ldr	r2, [pc, #180]	; (80058e8 <xTaskIncrementTick+0x158>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005836:	e02e      	b.n	8005896 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3304      	adds	r3, #4
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff fcad 	bl	800519c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	3318      	adds	r3, #24
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fca4 	bl	800519c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	2201      	movs	r2, #1
 800585a:	409a      	lsls	r2, r3
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <xTaskIncrementTick+0x15c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4313      	orrs	r3, r2
 8005862:	4a22      	ldr	r2, [pc, #136]	; (80058ec <xTaskIncrementTick+0x15c>)
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4a1f      	ldr	r2, [pc, #124]	; (80058f0 <xTaskIncrementTick+0x160>)
 8005874:	441a      	add	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7ff fc32 	bl	80050e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005886:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <xTaskIncrementTick+0x164>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	429a      	cmp	r2, r3
 800588e:	d3b9      	bcc.n	8005804 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005894:	e7b6      	b.n	8005804 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <xTaskIncrementTick+0x164>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	4914      	ldr	r1, [pc, #80]	; (80058f0 <xTaskIncrementTick+0x160>)
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d901      	bls.n	80058b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058b2:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <xTaskIncrementTick+0x168>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80058ba:	2301      	movs	r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e004      	b.n	80058ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058c0:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <xTaskIncrementTick+0x16c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	4a0d      	ldr	r2, [pc, #52]	; (80058fc <xTaskIncrementTick+0x16c>)
 80058c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058ca:	697b      	ldr	r3, [r7, #20]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	2000061c 	.word	0x2000061c
 80058d8:	200005f8 	.word	0x200005f8
 80058dc:	200005ac 	.word	0x200005ac
 80058e0:	200005b0 	.word	0x200005b0
 80058e4:	2000060c 	.word	0x2000060c
 80058e8:	20000614 	.word	0x20000614
 80058ec:	200005fc 	.word	0x200005fc
 80058f0:	200004f8 	.word	0x200004f8
 80058f4:	200004f4 	.word	0x200004f4
 80058f8:	20000608 	.word	0x20000608
 80058fc:	20000604 	.word	0x20000604

08005900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005906:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <vTaskSwitchContext+0xa0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800590e:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <vTaskSwitchContext+0xa4>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005914:	e03f      	b.n	8005996 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005916:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <vTaskSwitchContext+0xa4>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591c:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <vTaskSwitchContext+0xa8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	fab3 f383 	clz	r3, r3
 8005928:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	f1c3 031f 	rsb	r3, r3, #31
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	491e      	ldr	r1, [pc, #120]	; (80059ac <vTaskSwitchContext+0xac>)
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	607b      	str	r3, [r7, #4]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <vTaskSwitchContext+0x5a>
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4a11      	ldr	r2, [pc, #68]	; (80059ac <vTaskSwitchContext+0xac>)
 8005968:	4413      	add	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3308      	adds	r3, #8
 800597e:	429a      	cmp	r2, r3
 8005980:	d104      	bne.n	800598c <vTaskSwitchContext+0x8c>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	4a07      	ldr	r2, [pc, #28]	; (80059b0 <vTaskSwitchContext+0xb0>)
 8005994:	6013      	str	r3, [r2, #0]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr
 80059a0:	2000061c 	.word	0x2000061c
 80059a4:	20000608 	.word	0x20000608
 80059a8:	200005fc 	.word	0x200005fc
 80059ac:	200004f8 	.word	0x200004f8
 80059b0:	200004f4 	.word	0x200004f4

080059b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059bc:	f000 f852 	bl	8005a64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <prvIdleTask+0x28>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d9f9      	bls.n	80059bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <prvIdleTask+0x2c>)
 80059ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059d8:	e7f0      	b.n	80059bc <prvIdleTask+0x8>
 80059da:	bf00      	nop
 80059dc:	200004f8 	.word	0x200004f8
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	e00c      	b.n	8005a0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <prvInitialiseTaskLists+0x60>)
 80059fc:	4413      	add	r3, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff fb46 	bl	8005090 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3301      	adds	r3, #1
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b06      	cmp	r3, #6
 8005a0e:	d9ef      	bls.n	80059f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a10:	480d      	ldr	r0, [pc, #52]	; (8005a48 <prvInitialiseTaskLists+0x64>)
 8005a12:	f7ff fb3d 	bl	8005090 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a16:	480d      	ldr	r0, [pc, #52]	; (8005a4c <prvInitialiseTaskLists+0x68>)
 8005a18:	f7ff fb3a 	bl	8005090 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a1c:	480c      	ldr	r0, [pc, #48]	; (8005a50 <prvInitialiseTaskLists+0x6c>)
 8005a1e:	f7ff fb37 	bl	8005090 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a22:	480c      	ldr	r0, [pc, #48]	; (8005a54 <prvInitialiseTaskLists+0x70>)
 8005a24:	f7ff fb34 	bl	8005090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a28:	480b      	ldr	r0, [pc, #44]	; (8005a58 <prvInitialiseTaskLists+0x74>)
 8005a2a:	f7ff fb31 	bl	8005090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <prvInitialiseTaskLists+0x78>)
 8005a30:	4a05      	ldr	r2, [pc, #20]	; (8005a48 <prvInitialiseTaskLists+0x64>)
 8005a32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <prvInitialiseTaskLists+0x7c>)
 8005a36:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <prvInitialiseTaskLists+0x68>)
 8005a38:	601a      	str	r2, [r3, #0]
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	200004f8 	.word	0x200004f8
 8005a48:	20000584 	.word	0x20000584
 8005a4c:	20000598 	.word	0x20000598
 8005a50:	200005b4 	.word	0x200005b4
 8005a54:	200005c8 	.word	0x200005c8
 8005a58:	200005e0 	.word	0x200005e0
 8005a5c:	200005ac 	.word	0x200005ac
 8005a60:	200005b0 	.word	0x200005b0

08005a64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6a:	e019      	b.n	8005aa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a6c:	f000 f9ce 	bl	8005e0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a70:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <prvCheckTasksWaitingTermination+0x50>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fb8d 	bl	800519c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <prvCheckTasksWaitingTermination+0x54>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	4a0b      	ldr	r2, [pc, #44]	; (8005ab8 <prvCheckTasksWaitingTermination+0x54>)
 8005a8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005a94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a96:	f000 f9e9 	bl	8005e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f810 	bl	8005ac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e1      	bne.n	8005a6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200005c8 	.word	0x200005c8
 8005ab8:	200005f4 	.word	0x200005f4
 8005abc:	200005dc 	.word	0x200005dc

08005ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d108      	bne.n	8005ae4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fb26 	bl	8006128 <vPortFree>
				vPortFree( pxTCB );
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fb23 	bl	8006128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ae2:	e018      	b.n	8005b16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d103      	bne.n	8005af6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fb1a 	bl	8006128 <vPortFree>
	}
 8005af4:	e00f      	b.n	8005b16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d00a      	beq.n	8005b16 <prvDeleteTCB+0x56>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60fb      	str	r3, [r7, #12]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <prvDeleteTCB+0x54>
	}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b26:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <prvResetNextTaskUnblockTime+0x38>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d104      	bne.n	8005b3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <prvResetNextTaskUnblockTime+0x3c>)
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295
 8005b36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b38:	e008      	b.n	8005b4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <prvResetNextTaskUnblockTime+0x38>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a04      	ldr	r2, [pc, #16]	; (8005b5c <prvResetNextTaskUnblockTime+0x3c>)
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	200005ac 	.word	0x200005ac
 8005b5c:	20000614 	.word	0x20000614

08005b60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b6a:	4b29      	ldr	r3, [pc, #164]	; (8005c10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fb10 	bl	800519c <uxListRemove>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b82:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	2201      	movs	r2, #1
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43da      	mvns	r2, r3
 8005b90:	4b21      	ldr	r3, [pc, #132]	; (8005c18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4013      	ands	r3, r2
 8005b96:	4a20      	ldr	r2, [pc, #128]	; (8005c18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d10a      	bne.n	8005bb8 <prvAddCurrentTaskToDelayedList+0x58>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4619      	mov	r1, r3
 8005bb0:	481a      	ldr	r0, [pc, #104]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bb2:	f7ff fa98 	bl	80050e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bb6:	e026      	b.n	8005c06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bc0:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d209      	bcs.n	8005be4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f7ff faa5 	bl	800512c <vListInsert>
}
 8005be2:	e010      	b.n	8005c06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005be4:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f7ff fa9b 	bl	800512c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bf6:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d202      	bcs.n	8005c06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c00:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6013      	str	r3, [r2, #0]
}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	200005f8 	.word	0x200005f8
 8005c14:	200004f4 	.word	0x200004f4
 8005c18:	200005fc 	.word	0x200005fc
 8005c1c:	200005e0 	.word	0x200005e0
 8005c20:	200005b0 	.word	0x200005b0
 8005c24:	200005ac 	.word	0x200005ac
 8005c28:	20000614 	.word	0x20000614

08005c2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3b04      	subs	r3, #4
 8005c3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3b04      	subs	r3, #4
 8005c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3b04      	subs	r3, #4
 8005c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c5c:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <pxPortInitialiseStack+0x54>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3b14      	subs	r3, #20
 8005c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3b20      	subs	r3, #32
 8005c72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c74:	68fb      	ldr	r3, [r7, #12]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr
 8005c80:	08005c85 	.word	0x08005c85

08005c84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <prvTaskExitError+0x54>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d00a      	beq.n	8005cae <prvTaskExitError+0x2a>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <prvTaskExitError+0x28>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60bb      	str	r3, [r7, #8]
}
 8005cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cc2:	bf00      	nop
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0fc      	beq.n	8005cc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000024 	.word	0x20000024
 8005cdc:	00000000 	.word	0x00000000

08005ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <pxCurrentTCBConst2>)
 8005ce2:	6819      	ldr	r1, [r3, #0]
 8005ce4:	6808      	ldr	r0, [r1, #0]
 8005ce6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cea:	f380 8809 	msr	PSP, r0
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f04f 0000 	mov.w	r0, #0
 8005cf6:	f380 8811 	msr	BASEPRI, r0
 8005cfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005cfe:	4770      	bx	lr

08005d00 <pxCurrentTCBConst2>:
 8005d00:	200004f4 	.word	0x200004f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop

08005d08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005d08:	4806      	ldr	r0, [pc, #24]	; (8005d24 <prvPortStartFirstTask+0x1c>)
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	6800      	ldr	r0, [r0, #0]
 8005d0e:	f380 8808 	msr	MSP, r0
 8005d12:	b662      	cpsie	i
 8005d14:	b661      	cpsie	f
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	df00      	svc	0
 8005d20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d22:	bf00      	nop
 8005d24:	e000ed08 	.word	0xe000ed08

08005d28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d2e:	4b32      	ldr	r3, [pc, #200]	; (8005df8 <xPortStartScheduler+0xd0>)
 8005d30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <xPortStartScheduler+0xd4>)
 8005d54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d56:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005d58:	2207      	movs	r2, #7
 8005d5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d5c:	e009      	b.n	8005d72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d5e:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	4a26      	ldr	r2, [pc, #152]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005d66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d0ef      	beq.n	8005d5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d7e:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1c3 0307 	rsb	r3, r3, #7
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d00a      	beq.n	8005da0 <xPortStartScheduler+0x78>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	60bb      	str	r3, [r7, #8]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005da0:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005da8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005daa:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005db2:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <xPortStartScheduler+0xd8>)
 8005db4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <xPortStartScheduler+0xdc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a10      	ldr	r2, [pc, #64]	; (8005e04 <xPortStartScheduler+0xdc>)
 8005dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <xPortStartScheduler+0xdc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <xPortStartScheduler+0xdc>)
 8005dd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dd6:	f000 f8b9 	bl	8005f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dda:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <xPortStartScheduler+0xe0>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005de0:	f7ff ff92 	bl	8005d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005de4:	f7ff fd8c 	bl	8005900 <vTaskSwitchContext>
	prvTaskExitError();
 8005de8:	f7ff ff4c 	bl	8005c84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	e000e400 	.word	0xe000e400
 8005dfc:	20000620 	.word	0x20000620
 8005e00:	20000624 	.word	0x20000624
 8005e04:	e000ed20 	.word	0xe000ed20
 8005e08:	20000024 	.word	0x20000024

08005e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	607b      	str	r3, [r7, #4]
}
 8005e24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <vPortEnterCritical+0x58>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <vPortEnterCritical+0x58>)
 8005e2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <vPortEnterCritical+0x58>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d10f      	bne.n	8005e58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <vPortEnterCritical+0x5c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	603b      	str	r3, [r7, #0]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <vPortEnterCritical+0x4a>
	}
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000024 	.word	0x20000024
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e72:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <vPortExitCritical+0x4c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <vPortExitCritical+0x24>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	607b      	str	r3, [r7, #4]
}
 8005e8c:	bf00      	nop
 8005e8e:	e7fe      	b.n	8005e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e90:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <vPortExitCritical+0x4c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <vPortExitCritical+0x4c>)
 8005e98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e9a:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <vPortExitCritical+0x4c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <vPortExitCritical+0x42>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005eac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr
 8005eb8:	20000024 	.word	0x20000024
 8005ebc:	00000000 	.word	0x00000000

08005ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ec0:	f3ef 8009 	mrs	r0, PSP
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <pxCurrentTCBConst>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ed0:	6010      	str	r0, [r2, #0]
 8005ed2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ed6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005eda:	f380 8811 	msr	BASEPRI, r0
 8005ede:	f7ff fd0f 	bl	8005900 <vTaskSwitchContext>
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f380 8811 	msr	BASEPRI, r0
 8005eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005eee:	6819      	ldr	r1, [r3, #0]
 8005ef0:	6808      	ldr	r0, [r1, #0]
 8005ef2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ef6:	f380 8809 	msr	PSP, r0
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	4770      	bx	lr

08005f00 <pxCurrentTCBConst>:
 8005f00:	200004f4 	.word	0x200004f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop

08005f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f22:	f7ff fc35 	bl	8005790 <xTaskIncrementTick>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <SysTick_Handler+0x40>)
 8005f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	2300      	movs	r3, #0
 8005f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
}
 8005f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <vPortSetupTimerInterrupt+0x30>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <vPortSetupTimerInterrupt+0x34>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <vPortSetupTimerInterrupt+0x38>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <vPortSetupTimerInterrupt+0x3c>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	099b      	lsrs	r3, r3, #6
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <vPortSetupTimerInterrupt+0x40>)
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f6e:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <vPortSetupTimerInterrupt+0x30>)
 8005f70:	2207      	movs	r2, #7
 8005f72:	601a      	str	r2, [r3, #0]
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	e000e010 	.word	0xe000e010
 8005f80:	e000e018 	.word	0xe000e018
 8005f84:	20000018 	.word	0x20000018
 8005f88:	10624dd3 	.word	0x10624dd3
 8005f8c:	e000e014 	.word	0xe000e014

08005f90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	; 0x28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f9c:	f7ff fb4e 	bl	800563c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fa0:	4b5b      	ldr	r3, [pc, #364]	; (8006110 <pvPortMalloc+0x180>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fa8:	f000 f920 	bl	80061ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fac:	4b59      	ldr	r3, [pc, #356]	; (8006114 <pvPortMalloc+0x184>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 8093 	bne.w	80060e0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01d      	beq.n	8005ffc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f023 0307 	bic.w	r3, r3, #7
 8005fd8:	3308      	adds	r3, #8
 8005fda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <pvPortMalloc+0x6c>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	617b      	str	r3, [r7, #20]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d06e      	beq.n	80060e0 <pvPortMalloc+0x150>
 8006002:	4b45      	ldr	r3, [pc, #276]	; (8006118 <pvPortMalloc+0x188>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d869      	bhi.n	80060e0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800600c:	4b43      	ldr	r3, [pc, #268]	; (800611c <pvPortMalloc+0x18c>)
 800600e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006010:	4b42      	ldr	r3, [pc, #264]	; (800611c <pvPortMalloc+0x18c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006016:	e004      	b.n	8006022 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	429a      	cmp	r2, r3
 800602a:	d903      	bls.n	8006034 <pvPortMalloc+0xa4>
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f1      	bne.n	8006018 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006034:	4b36      	ldr	r3, [pc, #216]	; (8006110 <pvPortMalloc+0x180>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	429a      	cmp	r2, r3
 800603c:	d050      	beq.n	80060e0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2208      	movs	r2, #8
 8006044:	4413      	add	r3, r2
 8006046:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	1ad2      	subs	r2, r2, r3
 8006058:	2308      	movs	r3, #8
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	429a      	cmp	r2, r3
 800605e:	d91f      	bls.n	80060a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <pvPortMalloc+0xf8>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	613b      	str	r3, [r7, #16]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800609a:	69b8      	ldr	r0, [r7, #24]
 800609c:	f000 f908 	bl	80062b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060a0:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <pvPortMalloc+0x188>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <pvPortMalloc+0x188>)
 80060ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060ae:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <pvPortMalloc+0x188>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <pvPortMalloc+0x190>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d203      	bcs.n	80060c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060ba:	4b17      	ldr	r3, [pc, #92]	; (8006118 <pvPortMalloc+0x188>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a18      	ldr	r2, [pc, #96]	; (8006120 <pvPortMalloc+0x190>)
 80060c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	4b13      	ldr	r3, [pc, #76]	; (8006114 <pvPortMalloc+0x184>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <pvPortMalloc+0x194>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	4a11      	ldr	r2, [pc, #68]	; (8006124 <pvPortMalloc+0x194>)
 80060de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060e0:	f7ff faba 	bl	8005658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <pvPortMalloc+0x174>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	60fb      	str	r3, [r7, #12]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <pvPortMalloc+0x172>
	return pvReturn;
 8006104:	69fb      	ldr	r3, [r7, #28]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3728      	adds	r7, #40	; 0x28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20001230 	.word	0x20001230
 8006114:	20001244 	.word	0x20001244
 8006118:	20001234 	.word	0x20001234
 800611c:	20001228 	.word	0x20001228
 8006120:	20001238 	.word	0x20001238
 8006124:	2000123c 	.word	0x2000123c

08006128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d04d      	beq.n	80061d6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800613a:	2308      	movs	r3, #8
 800613c:	425b      	negs	r3, r3
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4413      	add	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	4b24      	ldr	r3, [pc, #144]	; (80061e0 <vPortFree+0xb8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <vPortFree+0x44>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60fb      	str	r3, [r7, #12]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <vPortFree+0x62>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60bb      	str	r3, [r7, #8]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <vPortFree+0xb8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01e      	beq.n	80061d6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d11a      	bne.n	80061d6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <vPortFree+0xb8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	43db      	mvns	r3, r3
 80061aa:	401a      	ands	r2, r3
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061b0:	f7ff fa44 	bl	800563c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <vPortFree+0xbc>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4413      	add	r3, r2
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <vPortFree+0xbc>)
 80061c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061c2:	6938      	ldr	r0, [r7, #16]
 80061c4:	f000 f874 	bl	80062b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061c8:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <vPortFree+0xc0>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	4a06      	ldr	r2, [pc, #24]	; (80061e8 <vPortFree+0xc0>)
 80061d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061d2:	f7ff fa41 	bl	8005658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061d6:	bf00      	nop
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20001244 	.word	0x20001244
 80061e4:	20001234 	.word	0x20001234
 80061e8:	20001240 	.word	0x20001240

080061ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061f8:	4b27      	ldr	r3, [pc, #156]	; (8006298 <prvHeapInit+0xac>)
 80061fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00c      	beq.n	8006220 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3307      	adds	r3, #7
 800620a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0307 	bic.w	r3, r3, #7
 8006212:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	4a1f      	ldr	r2, [pc, #124]	; (8006298 <prvHeapInit+0xac>)
 800621c:	4413      	add	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006224:	4a1d      	ldr	r2, [pc, #116]	; (800629c <prvHeapInit+0xb0>)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800622a:	4b1c      	ldr	r3, [pc, #112]	; (800629c <prvHeapInit+0xb0>)
 800622c:	2200      	movs	r2, #0
 800622e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	4413      	add	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006238:	2208      	movs	r2, #8
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0307 	bic.w	r3, r3, #7
 8006246:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <prvHeapInit+0xb4>)
 800624c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800624e:	4b14      	ldr	r3, [pc, #80]	; (80062a0 <prvHeapInit+0xb4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2200      	movs	r2, #0
 8006254:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006256:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <prvHeapInit+0xb4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <prvHeapInit+0xb4>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <prvHeapInit+0xb8>)
 800627a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a09      	ldr	r2, [pc, #36]	; (80062a8 <prvHeapInit+0xbc>)
 8006282:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006284:	4b09      	ldr	r3, [pc, #36]	; (80062ac <prvHeapInit+0xc0>)
 8006286:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800628a:	601a      	str	r2, [r3, #0]
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20000628 	.word	0x20000628
 800629c:	20001228 	.word	0x20001228
 80062a0:	20001230 	.word	0x20001230
 80062a4:	20001238 	.word	0x20001238
 80062a8:	20001234 	.word	0x20001234
 80062ac:	20001244 	.word	0x20001244

080062b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062b8:	4b27      	ldr	r3, [pc, #156]	; (8006358 <prvInsertBlockIntoFreeList+0xa8>)
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e002      	b.n	80062c4 <prvInsertBlockIntoFreeList+0x14>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d8f7      	bhi.n	80062be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d108      	bne.n	80062f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	441a      	add	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d118      	bne.n	8006338 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	4b14      	ldr	r3, [pc, #80]	; (800635c <prvInsertBlockIntoFreeList+0xac>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d00d      	beq.n	800632e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	441a      	add	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e008      	b.n	8006340 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <prvInsertBlockIntoFreeList+0xac>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e003      	b.n	8006340 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d002      	beq.n	800634e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr
 8006358:	20001228 	.word	0x20001228
 800635c:	20001230 	.word	0x20001230

08006360 <__errno>:
 8006360:	4b01      	ldr	r3, [pc, #4]	; (8006368 <__errno+0x8>)
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000028 	.word	0x20000028

0800636c <__libc_init_array>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	2600      	movs	r6, #0
 8006370:	4d0c      	ldr	r5, [pc, #48]	; (80063a4 <__libc_init_array+0x38>)
 8006372:	4c0d      	ldr	r4, [pc, #52]	; (80063a8 <__libc_init_array+0x3c>)
 8006374:	1b64      	subs	r4, r4, r5
 8006376:	10a4      	asrs	r4, r4, #2
 8006378:	42a6      	cmp	r6, r4
 800637a:	d109      	bne.n	8006390 <__libc_init_array+0x24>
 800637c:	f001 f966 	bl	800764c <_init>
 8006380:	2600      	movs	r6, #0
 8006382:	4d0a      	ldr	r5, [pc, #40]	; (80063ac <__libc_init_array+0x40>)
 8006384:	4c0a      	ldr	r4, [pc, #40]	; (80063b0 <__libc_init_array+0x44>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	42a6      	cmp	r6, r4
 800638c:	d105      	bne.n	800639a <__libc_init_array+0x2e>
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	f855 3b04 	ldr.w	r3, [r5], #4
 8006394:	4798      	blx	r3
 8006396:	3601      	adds	r6, #1
 8006398:	e7ee      	b.n	8006378 <__libc_init_array+0xc>
 800639a:	f855 3b04 	ldr.w	r3, [r5], #4
 800639e:	4798      	blx	r3
 80063a0:	3601      	adds	r6, #1
 80063a2:	e7f2      	b.n	800638a <__libc_init_array+0x1e>
 80063a4:	08007980 	.word	0x08007980
 80063a8:	08007980 	.word	0x08007980
 80063ac:	08007980 	.word	0x08007980
 80063b0:	08007984 	.word	0x08007984

080063b4 <memcpy>:
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	4770      	bx	lr
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	4291      	cmp	r1, r2
 80063c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063cc:	d1f9      	bne.n	80063c2 <memcpy+0xe>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memset>:
 80063d0:	4603      	mov	r3, r0
 80063d2:	4402      	add	r2, r0
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d100      	bne.n	80063da <memset+0xa>
 80063d8:	4770      	bx	lr
 80063da:	f803 1b01 	strb.w	r1, [r3], #1
 80063de:	e7f9      	b.n	80063d4 <memset+0x4>

080063e0 <siprintf>:
 80063e0:	b40e      	push	{r1, r2, r3}
 80063e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063e6:	b500      	push	{lr}
 80063e8:	b09c      	sub	sp, #112	; 0x70
 80063ea:	ab1d      	add	r3, sp, #116	; 0x74
 80063ec:	9002      	str	r0, [sp, #8]
 80063ee:	9006      	str	r0, [sp, #24]
 80063f0:	9107      	str	r1, [sp, #28]
 80063f2:	9104      	str	r1, [sp, #16]
 80063f4:	4808      	ldr	r0, [pc, #32]	; (8006418 <siprintf+0x38>)
 80063f6:	4909      	ldr	r1, [pc, #36]	; (800641c <siprintf+0x3c>)
 80063f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063fc:	9105      	str	r1, [sp, #20]
 80063fe:	6800      	ldr	r0, [r0, #0]
 8006400:	a902      	add	r1, sp, #8
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	f000 f8aa 	bl	800655c <_svfiprintf_r>
 8006408:	2200      	movs	r2, #0
 800640a:	9b02      	ldr	r3, [sp, #8]
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	b01c      	add	sp, #112	; 0x70
 8006410:	f85d eb04 	ldr.w	lr, [sp], #4
 8006414:	b003      	add	sp, #12
 8006416:	4770      	bx	lr
 8006418:	20000028 	.word	0x20000028
 800641c:	ffff0208 	.word	0xffff0208

08006420 <siscanf>:
 8006420:	b40e      	push	{r1, r2, r3}
 8006422:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006426:	b530      	push	{r4, r5, lr}
 8006428:	b09c      	sub	sp, #112	; 0x70
 800642a:	ac1f      	add	r4, sp, #124	; 0x7c
 800642c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006430:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006434:	9002      	str	r0, [sp, #8]
 8006436:	9006      	str	r0, [sp, #24]
 8006438:	f7f9 fe8a 	bl	8000150 <strlen>
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <siscanf+0x4c>)
 800643e:	9003      	str	r0, [sp, #12]
 8006440:	930b      	str	r3, [sp, #44]	; 0x2c
 8006442:	2300      	movs	r3, #0
 8006444:	930f      	str	r3, [sp, #60]	; 0x3c
 8006446:	9314      	str	r3, [sp, #80]	; 0x50
 8006448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800644c:	9007      	str	r0, [sp, #28]
 800644e:	4808      	ldr	r0, [pc, #32]	; (8006470 <siscanf+0x50>)
 8006450:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006454:	462a      	mov	r2, r5
 8006456:	4623      	mov	r3, r4
 8006458:	a902      	add	r1, sp, #8
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	9401      	str	r4, [sp, #4]
 800645e:	f000 f9d7 	bl	8006810 <__ssvfiscanf_r>
 8006462:	b01c      	add	sp, #112	; 0x70
 8006464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006468:	b003      	add	sp, #12
 800646a:	4770      	bx	lr
 800646c:	08006475 	.word	0x08006475
 8006470:	20000028 	.word	0x20000028

08006474 <__seofread>:
 8006474:	2000      	movs	r0, #0
 8006476:	4770      	bx	lr

08006478 <strstr>:
 8006478:	780a      	ldrb	r2, [r1, #0]
 800647a:	b570      	push	{r4, r5, r6, lr}
 800647c:	b96a      	cbnz	r2, 800649a <strstr+0x22>
 800647e:	bd70      	pop	{r4, r5, r6, pc}
 8006480:	429a      	cmp	r2, r3
 8006482:	d109      	bne.n	8006498 <strstr+0x20>
 8006484:	460c      	mov	r4, r1
 8006486:	4605      	mov	r5, r0
 8006488:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f6      	beq.n	800647e <strstr+0x6>
 8006490:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006494:	429e      	cmp	r6, r3
 8006496:	d0f7      	beq.n	8006488 <strstr+0x10>
 8006498:	3001      	adds	r0, #1
 800649a:	7803      	ldrb	r3, [r0, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1ef      	bne.n	8006480 <strstr+0x8>
 80064a0:	4618      	mov	r0, r3
 80064a2:	e7ec      	b.n	800647e <strstr+0x6>

080064a4 <__ssputs_r>:
 80064a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	688e      	ldr	r6, [r1, #8]
 80064aa:	4682      	mov	sl, r0
 80064ac:	429e      	cmp	r6, r3
 80064ae:	460c      	mov	r4, r1
 80064b0:	4690      	mov	r8, r2
 80064b2:	461f      	mov	r7, r3
 80064b4:	d838      	bhi.n	8006528 <__ssputs_r+0x84>
 80064b6:	898a      	ldrh	r2, [r1, #12]
 80064b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064bc:	d032      	beq.n	8006524 <__ssputs_r+0x80>
 80064be:	6825      	ldr	r5, [r4, #0]
 80064c0:	6909      	ldr	r1, [r1, #16]
 80064c2:	3301      	adds	r3, #1
 80064c4:	eba5 0901 	sub.w	r9, r5, r1
 80064c8:	6965      	ldr	r5, [r4, #20]
 80064ca:	444b      	add	r3, r9
 80064cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064d4:	106d      	asrs	r5, r5, #1
 80064d6:	429d      	cmp	r5, r3
 80064d8:	bf38      	it	cc
 80064da:	461d      	movcc	r5, r3
 80064dc:	0553      	lsls	r3, r2, #21
 80064de:	d531      	bpl.n	8006544 <__ssputs_r+0xa0>
 80064e0:	4629      	mov	r1, r5
 80064e2:	f000 ffeb 	bl	80074bc <_malloc_r>
 80064e6:	4606      	mov	r6, r0
 80064e8:	b950      	cbnz	r0, 8006500 <__ssputs_r+0x5c>
 80064ea:	230c      	movs	r3, #12
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	f8ca 3000 	str.w	r3, [sl]
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006500:	464a      	mov	r2, r9
 8006502:	6921      	ldr	r1, [r4, #16]
 8006504:	f7ff ff56 	bl	80063b4 <memcpy>
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800650e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006512:	81a3      	strh	r3, [r4, #12]
 8006514:	6126      	str	r6, [r4, #16]
 8006516:	444e      	add	r6, r9
 8006518:	6026      	str	r6, [r4, #0]
 800651a:	463e      	mov	r6, r7
 800651c:	6165      	str	r5, [r4, #20]
 800651e:	eba5 0509 	sub.w	r5, r5, r9
 8006522:	60a5      	str	r5, [r4, #8]
 8006524:	42be      	cmp	r6, r7
 8006526:	d900      	bls.n	800652a <__ssputs_r+0x86>
 8006528:	463e      	mov	r6, r7
 800652a:	4632      	mov	r2, r6
 800652c:	4641      	mov	r1, r8
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	f000 ff42 	bl	80073b8 <memmove>
 8006534:	68a3      	ldr	r3, [r4, #8]
 8006536:	2000      	movs	r0, #0
 8006538:	1b9b      	subs	r3, r3, r6
 800653a:	60a3      	str	r3, [r4, #8]
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	4433      	add	r3, r6
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	e7db      	b.n	80064fc <__ssputs_r+0x58>
 8006544:	462a      	mov	r2, r5
 8006546:	f001 f82d 	bl	80075a4 <_realloc_r>
 800654a:	4606      	mov	r6, r0
 800654c:	2800      	cmp	r0, #0
 800654e:	d1e1      	bne.n	8006514 <__ssputs_r+0x70>
 8006550:	4650      	mov	r0, sl
 8006552:	6921      	ldr	r1, [r4, #16]
 8006554:	f000 ff4a 	bl	80073ec <_free_r>
 8006558:	e7c7      	b.n	80064ea <__ssputs_r+0x46>
	...

0800655c <_svfiprintf_r>:
 800655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	4698      	mov	r8, r3
 8006562:	898b      	ldrh	r3, [r1, #12]
 8006564:	4607      	mov	r7, r0
 8006566:	061b      	lsls	r3, r3, #24
 8006568:	460d      	mov	r5, r1
 800656a:	4614      	mov	r4, r2
 800656c:	b09d      	sub	sp, #116	; 0x74
 800656e:	d50e      	bpl.n	800658e <_svfiprintf_r+0x32>
 8006570:	690b      	ldr	r3, [r1, #16]
 8006572:	b963      	cbnz	r3, 800658e <_svfiprintf_r+0x32>
 8006574:	2140      	movs	r1, #64	; 0x40
 8006576:	f000 ffa1 	bl	80074bc <_malloc_r>
 800657a:	6028      	str	r0, [r5, #0]
 800657c:	6128      	str	r0, [r5, #16]
 800657e:	b920      	cbnz	r0, 800658a <_svfiprintf_r+0x2e>
 8006580:	230c      	movs	r3, #12
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	f04f 30ff 	mov.w	r0, #4294967295
 8006588:	e0d1      	b.n	800672e <_svfiprintf_r+0x1d2>
 800658a:	2340      	movs	r3, #64	; 0x40
 800658c:	616b      	str	r3, [r5, #20]
 800658e:	2300      	movs	r3, #0
 8006590:	9309      	str	r3, [sp, #36]	; 0x24
 8006592:	2320      	movs	r3, #32
 8006594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006598:	2330      	movs	r3, #48	; 0x30
 800659a:	f04f 0901 	mov.w	r9, #1
 800659e:	f8cd 800c 	str.w	r8, [sp, #12]
 80065a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006748 <_svfiprintf_r+0x1ec>
 80065a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065aa:	4623      	mov	r3, r4
 80065ac:	469a      	mov	sl, r3
 80065ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065b2:	b10a      	cbz	r2, 80065b8 <_svfiprintf_r+0x5c>
 80065b4:	2a25      	cmp	r2, #37	; 0x25
 80065b6:	d1f9      	bne.n	80065ac <_svfiprintf_r+0x50>
 80065b8:	ebba 0b04 	subs.w	fp, sl, r4
 80065bc:	d00b      	beq.n	80065d6 <_svfiprintf_r+0x7a>
 80065be:	465b      	mov	r3, fp
 80065c0:	4622      	mov	r2, r4
 80065c2:	4629      	mov	r1, r5
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7ff ff6d 	bl	80064a4 <__ssputs_r>
 80065ca:	3001      	adds	r0, #1
 80065cc:	f000 80aa 	beq.w	8006724 <_svfiprintf_r+0x1c8>
 80065d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d2:	445a      	add	r2, fp
 80065d4:	9209      	str	r2, [sp, #36]	; 0x24
 80065d6:	f89a 3000 	ldrb.w	r3, [sl]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80a2 	beq.w	8006724 <_svfiprintf_r+0x1c8>
 80065e0:	2300      	movs	r3, #0
 80065e2:	f04f 32ff 	mov.w	r2, #4294967295
 80065e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ea:	f10a 0a01 	add.w	sl, sl, #1
 80065ee:	9304      	str	r3, [sp, #16]
 80065f0:	9307      	str	r3, [sp, #28]
 80065f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065f6:	931a      	str	r3, [sp, #104]	; 0x68
 80065f8:	4654      	mov	r4, sl
 80065fa:	2205      	movs	r2, #5
 80065fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006600:	4851      	ldr	r0, [pc, #324]	; (8006748 <_svfiprintf_r+0x1ec>)
 8006602:	f000 fecb 	bl	800739c <memchr>
 8006606:	9a04      	ldr	r2, [sp, #16]
 8006608:	b9d8      	cbnz	r0, 8006642 <_svfiprintf_r+0xe6>
 800660a:	06d0      	lsls	r0, r2, #27
 800660c:	bf44      	itt	mi
 800660e:	2320      	movmi	r3, #32
 8006610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006614:	0711      	lsls	r1, r2, #28
 8006616:	bf44      	itt	mi
 8006618:	232b      	movmi	r3, #43	; 0x2b
 800661a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800661e:	f89a 3000 	ldrb.w	r3, [sl]
 8006622:	2b2a      	cmp	r3, #42	; 0x2a
 8006624:	d015      	beq.n	8006652 <_svfiprintf_r+0xf6>
 8006626:	4654      	mov	r4, sl
 8006628:	2000      	movs	r0, #0
 800662a:	f04f 0c0a 	mov.w	ip, #10
 800662e:	9a07      	ldr	r2, [sp, #28]
 8006630:	4621      	mov	r1, r4
 8006632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006636:	3b30      	subs	r3, #48	; 0x30
 8006638:	2b09      	cmp	r3, #9
 800663a:	d94e      	bls.n	80066da <_svfiprintf_r+0x17e>
 800663c:	b1b0      	cbz	r0, 800666c <_svfiprintf_r+0x110>
 800663e:	9207      	str	r2, [sp, #28]
 8006640:	e014      	b.n	800666c <_svfiprintf_r+0x110>
 8006642:	eba0 0308 	sub.w	r3, r0, r8
 8006646:	fa09 f303 	lsl.w	r3, r9, r3
 800664a:	4313      	orrs	r3, r2
 800664c:	46a2      	mov	sl, r4
 800664e:	9304      	str	r3, [sp, #16]
 8006650:	e7d2      	b.n	80065f8 <_svfiprintf_r+0x9c>
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	1d19      	adds	r1, r3, #4
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	9103      	str	r1, [sp, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	bfbb      	ittet	lt
 800665e:	425b      	neglt	r3, r3
 8006660:	f042 0202 	orrlt.w	r2, r2, #2
 8006664:	9307      	strge	r3, [sp, #28]
 8006666:	9307      	strlt	r3, [sp, #28]
 8006668:	bfb8      	it	lt
 800666a:	9204      	strlt	r2, [sp, #16]
 800666c:	7823      	ldrb	r3, [r4, #0]
 800666e:	2b2e      	cmp	r3, #46	; 0x2e
 8006670:	d10c      	bne.n	800668c <_svfiprintf_r+0x130>
 8006672:	7863      	ldrb	r3, [r4, #1]
 8006674:	2b2a      	cmp	r3, #42	; 0x2a
 8006676:	d135      	bne.n	80066e4 <_svfiprintf_r+0x188>
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	3402      	adds	r4, #2
 800667c:	1d1a      	adds	r2, r3, #4
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	9203      	str	r2, [sp, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	bfb8      	it	lt
 8006686:	f04f 33ff 	movlt.w	r3, #4294967295
 800668a:	9305      	str	r3, [sp, #20]
 800668c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800674c <_svfiprintf_r+0x1f0>
 8006690:	2203      	movs	r2, #3
 8006692:	4650      	mov	r0, sl
 8006694:	7821      	ldrb	r1, [r4, #0]
 8006696:	f000 fe81 	bl	800739c <memchr>
 800669a:	b140      	cbz	r0, 80066ae <_svfiprintf_r+0x152>
 800669c:	2340      	movs	r3, #64	; 0x40
 800669e:	eba0 000a 	sub.w	r0, r0, sl
 80066a2:	fa03 f000 	lsl.w	r0, r3, r0
 80066a6:	9b04      	ldr	r3, [sp, #16]
 80066a8:	3401      	adds	r4, #1
 80066aa:	4303      	orrs	r3, r0
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b2:	2206      	movs	r2, #6
 80066b4:	4826      	ldr	r0, [pc, #152]	; (8006750 <_svfiprintf_r+0x1f4>)
 80066b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066ba:	f000 fe6f 	bl	800739c <memchr>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d038      	beq.n	8006734 <_svfiprintf_r+0x1d8>
 80066c2:	4b24      	ldr	r3, [pc, #144]	; (8006754 <_svfiprintf_r+0x1f8>)
 80066c4:	bb1b      	cbnz	r3, 800670e <_svfiprintf_r+0x1b2>
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	3307      	adds	r3, #7
 80066ca:	f023 0307 	bic.w	r3, r3, #7
 80066ce:	3308      	adds	r3, #8
 80066d0:	9303      	str	r3, [sp, #12]
 80066d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d4:	4433      	add	r3, r6
 80066d6:	9309      	str	r3, [sp, #36]	; 0x24
 80066d8:	e767      	b.n	80065aa <_svfiprintf_r+0x4e>
 80066da:	460c      	mov	r4, r1
 80066dc:	2001      	movs	r0, #1
 80066de:	fb0c 3202 	mla	r2, ip, r2, r3
 80066e2:	e7a5      	b.n	8006630 <_svfiprintf_r+0xd4>
 80066e4:	2300      	movs	r3, #0
 80066e6:	f04f 0c0a 	mov.w	ip, #10
 80066ea:	4619      	mov	r1, r3
 80066ec:	3401      	adds	r4, #1
 80066ee:	9305      	str	r3, [sp, #20]
 80066f0:	4620      	mov	r0, r4
 80066f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066f6:	3a30      	subs	r2, #48	; 0x30
 80066f8:	2a09      	cmp	r2, #9
 80066fa:	d903      	bls.n	8006704 <_svfiprintf_r+0x1a8>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0c5      	beq.n	800668c <_svfiprintf_r+0x130>
 8006700:	9105      	str	r1, [sp, #20]
 8006702:	e7c3      	b.n	800668c <_svfiprintf_r+0x130>
 8006704:	4604      	mov	r4, r0
 8006706:	2301      	movs	r3, #1
 8006708:	fb0c 2101 	mla	r1, ip, r1, r2
 800670c:	e7f0      	b.n	80066f0 <_svfiprintf_r+0x194>
 800670e:	ab03      	add	r3, sp, #12
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	462a      	mov	r2, r5
 8006714:	4638      	mov	r0, r7
 8006716:	4b10      	ldr	r3, [pc, #64]	; (8006758 <_svfiprintf_r+0x1fc>)
 8006718:	a904      	add	r1, sp, #16
 800671a:	f3af 8000 	nop.w
 800671e:	1c42      	adds	r2, r0, #1
 8006720:	4606      	mov	r6, r0
 8006722:	d1d6      	bne.n	80066d2 <_svfiprintf_r+0x176>
 8006724:	89ab      	ldrh	r3, [r5, #12]
 8006726:	065b      	lsls	r3, r3, #25
 8006728:	f53f af2c 	bmi.w	8006584 <_svfiprintf_r+0x28>
 800672c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800672e:	b01d      	add	sp, #116	; 0x74
 8006730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006734:	ab03      	add	r3, sp, #12
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	462a      	mov	r2, r5
 800673a:	4638      	mov	r0, r7
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <_svfiprintf_r+0x1fc>)
 800673e:	a904      	add	r1, sp, #16
 8006740:	f000 fa50 	bl	8006be4 <_printf_i>
 8006744:	e7eb      	b.n	800671e <_svfiprintf_r+0x1c2>
 8006746:	bf00      	nop
 8006748:	080077ce 	.word	0x080077ce
 800674c:	080077d4 	.word	0x080077d4
 8006750:	080077d8 	.word	0x080077d8
 8006754:	00000000 	.word	0x00000000
 8006758:	080064a5 	.word	0x080064a5

0800675c <_sungetc_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	1c4b      	adds	r3, r1, #1
 8006760:	4614      	mov	r4, r2
 8006762:	d103      	bne.n	800676c <_sungetc_r+0x10>
 8006764:	f04f 35ff 	mov.w	r5, #4294967295
 8006768:	4628      	mov	r0, r5
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	8993      	ldrh	r3, [r2, #12]
 800676e:	b2cd      	uxtb	r5, r1
 8006770:	f023 0320 	bic.w	r3, r3, #32
 8006774:	8193      	strh	r3, [r2, #12]
 8006776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006778:	6852      	ldr	r2, [r2, #4]
 800677a:	b18b      	cbz	r3, 80067a0 <_sungetc_r+0x44>
 800677c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800677e:	4293      	cmp	r3, r2
 8006780:	dd08      	ble.n	8006794 <_sungetc_r+0x38>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	1e5a      	subs	r2, r3, #1
 8006786:	6022      	str	r2, [r4, #0]
 8006788:	f803 5c01 	strb.w	r5, [r3, #-1]
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	3301      	adds	r3, #1
 8006790:	6063      	str	r3, [r4, #4]
 8006792:	e7e9      	b.n	8006768 <_sungetc_r+0xc>
 8006794:	4621      	mov	r1, r4
 8006796:	f000 fdc7 	bl	8007328 <__submore>
 800679a:	2800      	cmp	r0, #0
 800679c:	d0f1      	beq.n	8006782 <_sungetc_r+0x26>
 800679e:	e7e1      	b.n	8006764 <_sungetc_r+0x8>
 80067a0:	6921      	ldr	r1, [r4, #16]
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	b151      	cbz	r1, 80067bc <_sungetc_r+0x60>
 80067a6:	4299      	cmp	r1, r3
 80067a8:	d208      	bcs.n	80067bc <_sungetc_r+0x60>
 80067aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80067ae:	42a9      	cmp	r1, r5
 80067b0:	d104      	bne.n	80067bc <_sungetc_r+0x60>
 80067b2:	3b01      	subs	r3, #1
 80067b4:	3201      	adds	r2, #1
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	6062      	str	r2, [r4, #4]
 80067ba:	e7d5      	b.n	8006768 <_sungetc_r+0xc>
 80067bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80067c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067c4:	6363      	str	r3, [r4, #52]	; 0x34
 80067c6:	2303      	movs	r3, #3
 80067c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80067ca:	4623      	mov	r3, r4
 80067cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	2301      	movs	r3, #1
 80067d4:	e7dc      	b.n	8006790 <_sungetc_r+0x34>

080067d6 <__ssrefill_r>:
 80067d6:	b510      	push	{r4, lr}
 80067d8:	460c      	mov	r4, r1
 80067da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80067dc:	b169      	cbz	r1, 80067fa <__ssrefill_r+0x24>
 80067de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067e2:	4299      	cmp	r1, r3
 80067e4:	d001      	beq.n	80067ea <__ssrefill_r+0x14>
 80067e6:	f000 fe01 	bl	80073ec <_free_r>
 80067ea:	2000      	movs	r0, #0
 80067ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067ee:	6360      	str	r0, [r4, #52]	; 0x34
 80067f0:	6063      	str	r3, [r4, #4]
 80067f2:	b113      	cbz	r3, 80067fa <__ssrefill_r+0x24>
 80067f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	bd10      	pop	{r4, pc}
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	6063      	str	r3, [r4, #4]
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	f043 0320 	orr.w	r3, r3, #32
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	e7f3      	b.n	80067f8 <__ssrefill_r+0x22>

08006810 <__ssvfiscanf_r>:
 8006810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006814:	460c      	mov	r4, r1
 8006816:	2100      	movs	r1, #0
 8006818:	4606      	mov	r6, r0
 800681a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800681e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006822:	49a7      	ldr	r1, [pc, #668]	; (8006ac0 <__ssvfiscanf_r+0x2b0>)
 8006824:	f10d 0804 	add.w	r8, sp, #4
 8006828:	91a0      	str	r1, [sp, #640]	; 0x280
 800682a:	49a6      	ldr	r1, [pc, #664]	; (8006ac4 <__ssvfiscanf_r+0x2b4>)
 800682c:	4fa6      	ldr	r7, [pc, #664]	; (8006ac8 <__ssvfiscanf_r+0x2b8>)
 800682e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8006acc <__ssvfiscanf_r+0x2bc>
 8006832:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006836:	91a1      	str	r1, [sp, #644]	; 0x284
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	7813      	ldrb	r3, [r2, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 815c 	beq.w	8006afa <__ssvfiscanf_r+0x2ea>
 8006842:	5dd9      	ldrb	r1, [r3, r7]
 8006844:	1c55      	adds	r5, r2, #1
 8006846:	f011 0108 	ands.w	r1, r1, #8
 800684a:	d019      	beq.n	8006880 <__ssvfiscanf_r+0x70>
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	dd0f      	ble.n	8006872 <__ssvfiscanf_r+0x62>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	781a      	ldrb	r2, [r3, #0]
 8006856:	5cba      	ldrb	r2, [r7, r2]
 8006858:	0712      	lsls	r2, r2, #28
 800685a:	d401      	bmi.n	8006860 <__ssvfiscanf_r+0x50>
 800685c:	462a      	mov	r2, r5
 800685e:	e7ec      	b.n	800683a <__ssvfiscanf_r+0x2a>
 8006860:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006862:	3301      	adds	r3, #1
 8006864:	3201      	adds	r2, #1
 8006866:	9245      	str	r2, [sp, #276]	; 0x114
 8006868:	6862      	ldr	r2, [r4, #4]
 800686a:	6023      	str	r3, [r4, #0]
 800686c:	3a01      	subs	r2, #1
 800686e:	6062      	str	r2, [r4, #4]
 8006870:	e7ec      	b.n	800684c <__ssvfiscanf_r+0x3c>
 8006872:	4621      	mov	r1, r4
 8006874:	4630      	mov	r0, r6
 8006876:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006878:	4798      	blx	r3
 800687a:	2800      	cmp	r0, #0
 800687c:	d0e9      	beq.n	8006852 <__ssvfiscanf_r+0x42>
 800687e:	e7ed      	b.n	800685c <__ssvfiscanf_r+0x4c>
 8006880:	2b25      	cmp	r3, #37	; 0x25
 8006882:	d012      	beq.n	80068aa <__ssvfiscanf_r+0x9a>
 8006884:	469a      	mov	sl, r3
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f340 8094 	ble.w	80069b6 <__ssvfiscanf_r+0x1a6>
 800688e:	6822      	ldr	r2, [r4, #0]
 8006890:	7813      	ldrb	r3, [r2, #0]
 8006892:	4553      	cmp	r3, sl
 8006894:	f040 8131 	bne.w	8006afa <__ssvfiscanf_r+0x2ea>
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	3201      	adds	r2, #1
 800689c:	3b01      	subs	r3, #1
 800689e:	6063      	str	r3, [r4, #4]
 80068a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80068a2:	6022      	str	r2, [r4, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	9345      	str	r3, [sp, #276]	; 0x114
 80068a8:	e7d8      	b.n	800685c <__ssvfiscanf_r+0x4c>
 80068aa:	9141      	str	r1, [sp, #260]	; 0x104
 80068ac:	9143      	str	r1, [sp, #268]	; 0x10c
 80068ae:	7853      	ldrb	r3, [r2, #1]
 80068b0:	2b2a      	cmp	r3, #42	; 0x2a
 80068b2:	bf04      	itt	eq
 80068b4:	2310      	moveq	r3, #16
 80068b6:	1c95      	addeq	r5, r2, #2
 80068b8:	f04f 020a 	mov.w	r2, #10
 80068bc:	bf08      	it	eq
 80068be:	9341      	streq	r3, [sp, #260]	; 0x104
 80068c0:	46aa      	mov	sl, r5
 80068c2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80068c6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80068ca:	2b09      	cmp	r3, #9
 80068cc:	d91d      	bls.n	800690a <__ssvfiscanf_r+0xfa>
 80068ce:	2203      	movs	r2, #3
 80068d0:	487e      	ldr	r0, [pc, #504]	; (8006acc <__ssvfiscanf_r+0x2bc>)
 80068d2:	f000 fd63 	bl	800739c <memchr>
 80068d6:	b140      	cbz	r0, 80068ea <__ssvfiscanf_r+0xda>
 80068d8:	2301      	movs	r3, #1
 80068da:	4655      	mov	r5, sl
 80068dc:	eba0 0009 	sub.w	r0, r0, r9
 80068e0:	fa03 f000 	lsl.w	r0, r3, r0
 80068e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80068e6:	4318      	orrs	r0, r3
 80068e8:	9041      	str	r0, [sp, #260]	; 0x104
 80068ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068ee:	2b78      	cmp	r3, #120	; 0x78
 80068f0:	d806      	bhi.n	8006900 <__ssvfiscanf_r+0xf0>
 80068f2:	2b57      	cmp	r3, #87	; 0x57
 80068f4:	d810      	bhi.n	8006918 <__ssvfiscanf_r+0x108>
 80068f6:	2b25      	cmp	r3, #37	; 0x25
 80068f8:	d0c4      	beq.n	8006884 <__ssvfiscanf_r+0x74>
 80068fa:	d857      	bhi.n	80069ac <__ssvfiscanf_r+0x19c>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d065      	beq.n	80069cc <__ssvfiscanf_r+0x1bc>
 8006900:	2303      	movs	r3, #3
 8006902:	9347      	str	r3, [sp, #284]	; 0x11c
 8006904:	230a      	movs	r3, #10
 8006906:	9342      	str	r3, [sp, #264]	; 0x108
 8006908:	e072      	b.n	80069f0 <__ssvfiscanf_r+0x1e0>
 800690a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800690c:	4655      	mov	r5, sl
 800690e:	fb02 1103 	mla	r1, r2, r3, r1
 8006912:	3930      	subs	r1, #48	; 0x30
 8006914:	9143      	str	r1, [sp, #268]	; 0x10c
 8006916:	e7d3      	b.n	80068c0 <__ssvfiscanf_r+0xb0>
 8006918:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800691c:	2a20      	cmp	r2, #32
 800691e:	d8ef      	bhi.n	8006900 <__ssvfiscanf_r+0xf0>
 8006920:	a101      	add	r1, pc, #4	; (adr r1, 8006928 <__ssvfiscanf_r+0x118>)
 8006922:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006926:	bf00      	nop
 8006928:	080069db 	.word	0x080069db
 800692c:	08006901 	.word	0x08006901
 8006930:	08006901 	.word	0x08006901
 8006934:	08006a39 	.word	0x08006a39
 8006938:	08006901 	.word	0x08006901
 800693c:	08006901 	.word	0x08006901
 8006940:	08006901 	.word	0x08006901
 8006944:	08006901 	.word	0x08006901
 8006948:	08006901 	.word	0x08006901
 800694c:	08006901 	.word	0x08006901
 8006950:	08006901 	.word	0x08006901
 8006954:	08006a4f 	.word	0x08006a4f
 8006958:	08006a25 	.word	0x08006a25
 800695c:	080069b3 	.word	0x080069b3
 8006960:	080069b3 	.word	0x080069b3
 8006964:	080069b3 	.word	0x080069b3
 8006968:	08006901 	.word	0x08006901
 800696c:	08006a29 	.word	0x08006a29
 8006970:	08006901 	.word	0x08006901
 8006974:	08006901 	.word	0x08006901
 8006978:	08006901 	.word	0x08006901
 800697c:	08006901 	.word	0x08006901
 8006980:	08006a5f 	.word	0x08006a5f
 8006984:	08006a31 	.word	0x08006a31
 8006988:	080069d3 	.word	0x080069d3
 800698c:	08006901 	.word	0x08006901
 8006990:	08006901 	.word	0x08006901
 8006994:	08006a5b 	.word	0x08006a5b
 8006998:	08006901 	.word	0x08006901
 800699c:	08006a25 	.word	0x08006a25
 80069a0:	08006901 	.word	0x08006901
 80069a4:	08006901 	.word	0x08006901
 80069a8:	080069db 	.word	0x080069db
 80069ac:	3b45      	subs	r3, #69	; 0x45
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d8a6      	bhi.n	8006900 <__ssvfiscanf_r+0xf0>
 80069b2:	2305      	movs	r3, #5
 80069b4:	e01b      	b.n	80069ee <__ssvfiscanf_r+0x1de>
 80069b6:	4621      	mov	r1, r4
 80069b8:	4630      	mov	r0, r6
 80069ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80069bc:	4798      	blx	r3
 80069be:	2800      	cmp	r0, #0
 80069c0:	f43f af65 	beq.w	800688e <__ssvfiscanf_r+0x7e>
 80069c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f040 808d 	bne.w	8006ae6 <__ssvfiscanf_r+0x2d6>
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	e08f      	b.n	8006af2 <__ssvfiscanf_r+0x2e2>
 80069d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80069d4:	f042 0220 	orr.w	r2, r2, #32
 80069d8:	9241      	str	r2, [sp, #260]	; 0x104
 80069da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80069dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e0:	9241      	str	r2, [sp, #260]	; 0x104
 80069e2:	2210      	movs	r2, #16
 80069e4:	2b6f      	cmp	r3, #111	; 0x6f
 80069e6:	bf34      	ite	cc
 80069e8:	2303      	movcc	r3, #3
 80069ea:	2304      	movcs	r3, #4
 80069ec:	9242      	str	r2, [sp, #264]	; 0x108
 80069ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80069f0:	6863      	ldr	r3, [r4, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dd42      	ble.n	8006a7c <__ssvfiscanf_r+0x26c>
 80069f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80069f8:	0659      	lsls	r1, r3, #25
 80069fa:	d404      	bmi.n	8006a06 <__ssvfiscanf_r+0x1f6>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	781a      	ldrb	r2, [r3, #0]
 8006a00:	5cba      	ldrb	r2, [r7, r2]
 8006a02:	0712      	lsls	r2, r2, #28
 8006a04:	d441      	bmi.n	8006a8a <__ssvfiscanf_r+0x27a>
 8006a06:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	dc50      	bgt.n	8006aae <__ssvfiscanf_r+0x29e>
 8006a0c:	466b      	mov	r3, sp
 8006a0e:	4622      	mov	r2, r4
 8006a10:	4630      	mov	r0, r6
 8006a12:	a941      	add	r1, sp, #260	; 0x104
 8006a14:	f000 fa0c 	bl	8006e30 <_scanf_chars>
 8006a18:	2801      	cmp	r0, #1
 8006a1a:	d06e      	beq.n	8006afa <__ssvfiscanf_r+0x2ea>
 8006a1c:	2802      	cmp	r0, #2
 8006a1e:	f47f af1d 	bne.w	800685c <__ssvfiscanf_r+0x4c>
 8006a22:	e7cf      	b.n	80069c4 <__ssvfiscanf_r+0x1b4>
 8006a24:	220a      	movs	r2, #10
 8006a26:	e7dd      	b.n	80069e4 <__ssvfiscanf_r+0x1d4>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	9342      	str	r3, [sp, #264]	; 0x108
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e7de      	b.n	80069ee <__ssvfiscanf_r+0x1de>
 8006a30:	2308      	movs	r3, #8
 8006a32:	9342      	str	r3, [sp, #264]	; 0x108
 8006a34:	2304      	movs	r3, #4
 8006a36:	e7da      	b.n	80069ee <__ssvfiscanf_r+0x1de>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	f000 fb4a 	bl	80070d4 <__sccl>
 8006a40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006a42:	4605      	mov	r5, r0
 8006a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a48:	9341      	str	r3, [sp, #260]	; 0x104
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7cf      	b.n	80069ee <__ssvfiscanf_r+0x1de>
 8006a4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a54:	9341      	str	r3, [sp, #260]	; 0x104
 8006a56:	2300      	movs	r3, #0
 8006a58:	e7c9      	b.n	80069ee <__ssvfiscanf_r+0x1de>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e7c7      	b.n	80069ee <__ssvfiscanf_r+0x1de>
 8006a5e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006a60:	06c3      	lsls	r3, r0, #27
 8006a62:	f53f aefb 	bmi.w	800685c <__ssvfiscanf_r+0x4c>
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006a6a:	1d19      	adds	r1, r3, #4
 8006a6c:	9100      	str	r1, [sp, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f010 0f01 	tst.w	r0, #1
 8006a74:	bf14      	ite	ne
 8006a76:	801a      	strhne	r2, [r3, #0]
 8006a78:	601a      	streq	r2, [r3, #0]
 8006a7a:	e6ef      	b.n	800685c <__ssvfiscanf_r+0x4c>
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4630      	mov	r0, r6
 8006a80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006a82:	4798      	blx	r3
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d0b6      	beq.n	80069f6 <__ssvfiscanf_r+0x1e6>
 8006a88:	e79c      	b.n	80069c4 <__ssvfiscanf_r+0x1b4>
 8006a8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006a8c:	3201      	adds	r2, #1
 8006a8e:	9245      	str	r2, [sp, #276]	; 0x114
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	3a01      	subs	r2, #1
 8006a94:	2a00      	cmp	r2, #0
 8006a96:	6062      	str	r2, [r4, #4]
 8006a98:	dd02      	ble.n	8006aa0 <__ssvfiscanf_r+0x290>
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	e7ad      	b.n	80069fc <__ssvfiscanf_r+0x1ec>
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006aa6:	4798      	blx	r3
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d0a7      	beq.n	80069fc <__ssvfiscanf_r+0x1ec>
 8006aac:	e78a      	b.n	80069c4 <__ssvfiscanf_r+0x1b4>
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	dc0e      	bgt.n	8006ad0 <__ssvfiscanf_r+0x2c0>
 8006ab2:	466b      	mov	r3, sp
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	a941      	add	r1, sp, #260	; 0x104
 8006aba:	f000 fa13 	bl	8006ee4 <_scanf_i>
 8006abe:	e7ab      	b.n	8006a18 <__ssvfiscanf_r+0x208>
 8006ac0:	0800675d 	.word	0x0800675d
 8006ac4:	080067d7 	.word	0x080067d7
 8006ac8:	0800781d 	.word	0x0800781d
 8006acc:	080077d4 	.word	0x080077d4
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <__ssvfiscanf_r+0x2f0>)
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f43f aec2 	beq.w	800685c <__ssvfiscanf_r+0x4c>
 8006ad8:	466b      	mov	r3, sp
 8006ada:	4622      	mov	r2, r4
 8006adc:	4630      	mov	r0, r6
 8006ade:	a941      	add	r1, sp, #260	; 0x104
 8006ae0:	f3af 8000 	nop.w
 8006ae4:	e798      	b.n	8006a18 <__ssvfiscanf_r+0x208>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006aec:	bf18      	it	ne
 8006aee:	f04f 30ff 	movne.w	r0, #4294967295
 8006af2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afa:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006afc:	e7f9      	b.n	8006af2 <__ssvfiscanf_r+0x2e2>
 8006afe:	bf00      	nop
 8006b00:	00000000 	.word	0x00000000

08006b04 <_printf_common>:
 8006b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b08:	4616      	mov	r6, r2
 8006b0a:	4699      	mov	r9, r3
 8006b0c:	688a      	ldr	r2, [r1, #8]
 8006b0e:	690b      	ldr	r3, [r1, #16]
 8006b10:	4607      	mov	r7, r0
 8006b12:	4293      	cmp	r3, r2
 8006b14:	bfb8      	it	lt
 8006b16:	4613      	movlt	r3, r2
 8006b18:	6033      	str	r3, [r6, #0]
 8006b1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b1e:	460c      	mov	r4, r1
 8006b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b24:	b10a      	cbz	r2, 8006b2a <_printf_common+0x26>
 8006b26:	3301      	adds	r3, #1
 8006b28:	6033      	str	r3, [r6, #0]
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	0699      	lsls	r1, r3, #26
 8006b2e:	bf42      	ittt	mi
 8006b30:	6833      	ldrmi	r3, [r6, #0]
 8006b32:	3302      	addmi	r3, #2
 8006b34:	6033      	strmi	r3, [r6, #0]
 8006b36:	6825      	ldr	r5, [r4, #0]
 8006b38:	f015 0506 	ands.w	r5, r5, #6
 8006b3c:	d106      	bne.n	8006b4c <_printf_common+0x48>
 8006b3e:	f104 0a19 	add.w	sl, r4, #25
 8006b42:	68e3      	ldr	r3, [r4, #12]
 8006b44:	6832      	ldr	r2, [r6, #0]
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	42ab      	cmp	r3, r5
 8006b4a:	dc28      	bgt.n	8006b9e <_printf_common+0x9a>
 8006b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b50:	1e13      	subs	r3, r2, #0
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	bf18      	it	ne
 8006b56:	2301      	movne	r3, #1
 8006b58:	0692      	lsls	r2, r2, #26
 8006b5a:	d42d      	bmi.n	8006bb8 <_printf_common+0xb4>
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4638      	mov	r0, r7
 8006b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b64:	47c0      	blx	r8
 8006b66:	3001      	adds	r0, #1
 8006b68:	d020      	beq.n	8006bac <_printf_common+0xa8>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	68e5      	ldr	r5, [r4, #12]
 8006b6e:	f003 0306 	and.w	r3, r3, #6
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	bf18      	it	ne
 8006b76:	2500      	movne	r5, #0
 8006b78:	6832      	ldr	r2, [r6, #0]
 8006b7a:	f04f 0600 	mov.w	r6, #0
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	bf08      	it	eq
 8006b82:	1aad      	subeq	r5, r5, r2
 8006b84:	6922      	ldr	r2, [r4, #16]
 8006b86:	bf08      	it	eq
 8006b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	bfc4      	itt	gt
 8006b90:	1a9b      	subgt	r3, r3, r2
 8006b92:	18ed      	addgt	r5, r5, r3
 8006b94:	341a      	adds	r4, #26
 8006b96:	42b5      	cmp	r5, r6
 8006b98:	d11a      	bne.n	8006bd0 <_printf_common+0xcc>
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	e008      	b.n	8006bb0 <_printf_common+0xac>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4652      	mov	r2, sl
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	47c0      	blx	r8
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d103      	bne.n	8006bb4 <_printf_common+0xb0>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb4:	3501      	adds	r5, #1
 8006bb6:	e7c4      	b.n	8006b42 <_printf_common+0x3e>
 8006bb8:	2030      	movs	r0, #48	; 0x30
 8006bba:	18e1      	adds	r1, r4, r3
 8006bbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bc6:	4422      	add	r2, r4
 8006bc8:	3302      	adds	r3, #2
 8006bca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bce:	e7c5      	b.n	8006b5c <_printf_common+0x58>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	47c0      	blx	r8
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d0e6      	beq.n	8006bac <_printf_common+0xa8>
 8006bde:	3601      	adds	r6, #1
 8006be0:	e7d9      	b.n	8006b96 <_printf_common+0x92>
	...

08006be4 <_printf_i>:
 8006be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006be8:	7e0f      	ldrb	r7, [r1, #24]
 8006bea:	4691      	mov	r9, r2
 8006bec:	2f78      	cmp	r7, #120	; 0x78
 8006bee:	4680      	mov	r8, r0
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	469a      	mov	sl, r3
 8006bf4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bfa:	d807      	bhi.n	8006c0c <_printf_i+0x28>
 8006bfc:	2f62      	cmp	r7, #98	; 0x62
 8006bfe:	d80a      	bhi.n	8006c16 <_printf_i+0x32>
 8006c00:	2f00      	cmp	r7, #0
 8006c02:	f000 80d9 	beq.w	8006db8 <_printf_i+0x1d4>
 8006c06:	2f58      	cmp	r7, #88	; 0x58
 8006c08:	f000 80a4 	beq.w	8006d54 <_printf_i+0x170>
 8006c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c14:	e03a      	b.n	8006c8c <_printf_i+0xa8>
 8006c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c1a:	2b15      	cmp	r3, #21
 8006c1c:	d8f6      	bhi.n	8006c0c <_printf_i+0x28>
 8006c1e:	a101      	add	r1, pc, #4	; (adr r1, 8006c24 <_printf_i+0x40>)
 8006c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c24:	08006c7d 	.word	0x08006c7d
 8006c28:	08006c91 	.word	0x08006c91
 8006c2c:	08006c0d 	.word	0x08006c0d
 8006c30:	08006c0d 	.word	0x08006c0d
 8006c34:	08006c0d 	.word	0x08006c0d
 8006c38:	08006c0d 	.word	0x08006c0d
 8006c3c:	08006c91 	.word	0x08006c91
 8006c40:	08006c0d 	.word	0x08006c0d
 8006c44:	08006c0d 	.word	0x08006c0d
 8006c48:	08006c0d 	.word	0x08006c0d
 8006c4c:	08006c0d 	.word	0x08006c0d
 8006c50:	08006d9f 	.word	0x08006d9f
 8006c54:	08006cc1 	.word	0x08006cc1
 8006c58:	08006d81 	.word	0x08006d81
 8006c5c:	08006c0d 	.word	0x08006c0d
 8006c60:	08006c0d 	.word	0x08006c0d
 8006c64:	08006dc1 	.word	0x08006dc1
 8006c68:	08006c0d 	.word	0x08006c0d
 8006c6c:	08006cc1 	.word	0x08006cc1
 8006c70:	08006c0d 	.word	0x08006c0d
 8006c74:	08006c0d 	.word	0x08006c0d
 8006c78:	08006d89 	.word	0x08006d89
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	1d1a      	adds	r2, r3, #4
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	602a      	str	r2, [r5, #0]
 8006c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0a4      	b.n	8006dda <_printf_i+0x1f6>
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	6829      	ldr	r1, [r5, #0]
 8006c94:	0606      	lsls	r6, r0, #24
 8006c96:	f101 0304 	add.w	r3, r1, #4
 8006c9a:	d50a      	bpl.n	8006cb2 <_printf_i+0xce>
 8006c9c:	680e      	ldr	r6, [r1, #0]
 8006c9e:	602b      	str	r3, [r5, #0]
 8006ca0:	2e00      	cmp	r6, #0
 8006ca2:	da03      	bge.n	8006cac <_printf_i+0xc8>
 8006ca4:	232d      	movs	r3, #45	; 0x2d
 8006ca6:	4276      	negs	r6, r6
 8006ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cac:	230a      	movs	r3, #10
 8006cae:	485e      	ldr	r0, [pc, #376]	; (8006e28 <_printf_i+0x244>)
 8006cb0:	e019      	b.n	8006ce6 <_printf_i+0x102>
 8006cb2:	680e      	ldr	r6, [r1, #0]
 8006cb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	bf18      	it	ne
 8006cbc:	b236      	sxthne	r6, r6
 8006cbe:	e7ef      	b.n	8006ca0 <_printf_i+0xbc>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	6820      	ldr	r0, [r4, #0]
 8006cc4:	1d19      	adds	r1, r3, #4
 8006cc6:	6029      	str	r1, [r5, #0]
 8006cc8:	0601      	lsls	r1, r0, #24
 8006cca:	d501      	bpl.n	8006cd0 <_printf_i+0xec>
 8006ccc:	681e      	ldr	r6, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <_printf_i+0xf2>
 8006cd0:	0646      	lsls	r6, r0, #25
 8006cd2:	d5fb      	bpl.n	8006ccc <_printf_i+0xe8>
 8006cd4:	881e      	ldrh	r6, [r3, #0]
 8006cd6:	2f6f      	cmp	r7, #111	; 0x6f
 8006cd8:	bf0c      	ite	eq
 8006cda:	2308      	moveq	r3, #8
 8006cdc:	230a      	movne	r3, #10
 8006cde:	4852      	ldr	r0, [pc, #328]	; (8006e28 <_printf_i+0x244>)
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ce6:	6865      	ldr	r5, [r4, #4]
 8006ce8:	2d00      	cmp	r5, #0
 8006cea:	bfa8      	it	ge
 8006cec:	6821      	ldrge	r1, [r4, #0]
 8006cee:	60a5      	str	r5, [r4, #8]
 8006cf0:	bfa4      	itt	ge
 8006cf2:	f021 0104 	bicge.w	r1, r1, #4
 8006cf6:	6021      	strge	r1, [r4, #0]
 8006cf8:	b90e      	cbnz	r6, 8006cfe <_printf_i+0x11a>
 8006cfa:	2d00      	cmp	r5, #0
 8006cfc:	d04d      	beq.n	8006d9a <_printf_i+0x1b6>
 8006cfe:	4615      	mov	r5, r2
 8006d00:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d04:	fb03 6711 	mls	r7, r3, r1, r6
 8006d08:	5dc7      	ldrb	r7, [r0, r7]
 8006d0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d0e:	4637      	mov	r7, r6
 8006d10:	42bb      	cmp	r3, r7
 8006d12:	460e      	mov	r6, r1
 8006d14:	d9f4      	bls.n	8006d00 <_printf_i+0x11c>
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d10b      	bne.n	8006d32 <_printf_i+0x14e>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	07de      	lsls	r6, r3, #31
 8006d1e:	d508      	bpl.n	8006d32 <_printf_i+0x14e>
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	6861      	ldr	r1, [r4, #4]
 8006d24:	4299      	cmp	r1, r3
 8006d26:	bfde      	ittt	le
 8006d28:	2330      	movle	r3, #48	; 0x30
 8006d2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d32:	1b52      	subs	r2, r2, r5
 8006d34:	6122      	str	r2, [r4, #16]
 8006d36:	464b      	mov	r3, r9
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	f8cd a000 	str.w	sl, [sp]
 8006d40:	aa03      	add	r2, sp, #12
 8006d42:	f7ff fedf 	bl	8006b04 <_printf_common>
 8006d46:	3001      	adds	r0, #1
 8006d48:	d14c      	bne.n	8006de4 <_printf_i+0x200>
 8006d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4e:	b004      	add	sp, #16
 8006d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d54:	4834      	ldr	r0, [pc, #208]	; (8006e28 <_printf_i+0x244>)
 8006d56:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d5a:	6829      	ldr	r1, [r5, #0]
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d62:	6029      	str	r1, [r5, #0]
 8006d64:	061d      	lsls	r5, r3, #24
 8006d66:	d514      	bpl.n	8006d92 <_printf_i+0x1ae>
 8006d68:	07df      	lsls	r7, r3, #31
 8006d6a:	bf44      	itt	mi
 8006d6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d70:	6023      	strmi	r3, [r4, #0]
 8006d72:	b91e      	cbnz	r6, 8006d7c <_printf_i+0x198>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	f023 0320 	bic.w	r3, r3, #32
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	e7af      	b.n	8006ce0 <_printf_i+0xfc>
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	f043 0320 	orr.w	r3, r3, #32
 8006d86:	6023      	str	r3, [r4, #0]
 8006d88:	2378      	movs	r3, #120	; 0x78
 8006d8a:	4828      	ldr	r0, [pc, #160]	; (8006e2c <_printf_i+0x248>)
 8006d8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d90:	e7e3      	b.n	8006d5a <_printf_i+0x176>
 8006d92:	0659      	lsls	r1, r3, #25
 8006d94:	bf48      	it	mi
 8006d96:	b2b6      	uxthmi	r6, r6
 8006d98:	e7e6      	b.n	8006d68 <_printf_i+0x184>
 8006d9a:	4615      	mov	r5, r2
 8006d9c:	e7bb      	b.n	8006d16 <_printf_i+0x132>
 8006d9e:	682b      	ldr	r3, [r5, #0]
 8006da0:	6826      	ldr	r6, [r4, #0]
 8006da2:	1d18      	adds	r0, r3, #4
 8006da4:	6961      	ldr	r1, [r4, #20]
 8006da6:	6028      	str	r0, [r5, #0]
 8006da8:	0635      	lsls	r5, r6, #24
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	d501      	bpl.n	8006db2 <_printf_i+0x1ce>
 8006dae:	6019      	str	r1, [r3, #0]
 8006db0:	e002      	b.n	8006db8 <_printf_i+0x1d4>
 8006db2:	0670      	lsls	r0, r6, #25
 8006db4:	d5fb      	bpl.n	8006dae <_printf_i+0x1ca>
 8006db6:	8019      	strh	r1, [r3, #0]
 8006db8:	2300      	movs	r3, #0
 8006dba:	4615      	mov	r5, r2
 8006dbc:	6123      	str	r3, [r4, #16]
 8006dbe:	e7ba      	b.n	8006d36 <_printf_i+0x152>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	1d1a      	adds	r2, r3, #4
 8006dc6:	602a      	str	r2, [r5, #0]
 8006dc8:	681d      	ldr	r5, [r3, #0]
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f000 fae5 	bl	800739c <memchr>
 8006dd2:	b108      	cbz	r0, 8006dd8 <_printf_i+0x1f4>
 8006dd4:	1b40      	subs	r0, r0, r5
 8006dd6:	6060      	str	r0, [r4, #4]
 8006dd8:	6863      	ldr	r3, [r4, #4]
 8006dda:	6123      	str	r3, [r4, #16]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de2:	e7a8      	b.n	8006d36 <_printf_i+0x152>
 8006de4:	462a      	mov	r2, r5
 8006de6:	4649      	mov	r1, r9
 8006de8:	4640      	mov	r0, r8
 8006dea:	6923      	ldr	r3, [r4, #16]
 8006dec:	47d0      	blx	sl
 8006dee:	3001      	adds	r0, #1
 8006df0:	d0ab      	beq.n	8006d4a <_printf_i+0x166>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	079b      	lsls	r3, r3, #30
 8006df6:	d413      	bmi.n	8006e20 <_printf_i+0x23c>
 8006df8:	68e0      	ldr	r0, [r4, #12]
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	4298      	cmp	r0, r3
 8006dfe:	bfb8      	it	lt
 8006e00:	4618      	movlt	r0, r3
 8006e02:	e7a4      	b.n	8006d4e <_printf_i+0x16a>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4632      	mov	r2, r6
 8006e08:	4649      	mov	r1, r9
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	47d0      	blx	sl
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d09b      	beq.n	8006d4a <_printf_i+0x166>
 8006e12:	3501      	adds	r5, #1
 8006e14:	68e3      	ldr	r3, [r4, #12]
 8006e16:	9903      	ldr	r1, [sp, #12]
 8006e18:	1a5b      	subs	r3, r3, r1
 8006e1a:	42ab      	cmp	r3, r5
 8006e1c:	dcf2      	bgt.n	8006e04 <_printf_i+0x220>
 8006e1e:	e7eb      	b.n	8006df8 <_printf_i+0x214>
 8006e20:	2500      	movs	r5, #0
 8006e22:	f104 0619 	add.w	r6, r4, #25
 8006e26:	e7f5      	b.n	8006e14 <_printf_i+0x230>
 8006e28:	080077df 	.word	0x080077df
 8006e2c:	080077f0 	.word	0x080077f0

08006e30 <_scanf_chars>:
 8006e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e34:	4615      	mov	r5, r2
 8006e36:	688a      	ldr	r2, [r1, #8]
 8006e38:	4680      	mov	r8, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	b932      	cbnz	r2, 8006e4c <_scanf_chars+0x1c>
 8006e3e:	698a      	ldr	r2, [r1, #24]
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	bf0c      	ite	eq
 8006e44:	2201      	moveq	r2, #1
 8006e46:	f04f 32ff 	movne.w	r2, #4294967295
 8006e4a:	608a      	str	r2, [r1, #8]
 8006e4c:	2700      	movs	r7, #0
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006ee0 <_scanf_chars+0xb0>
 8006e54:	06d1      	lsls	r1, r2, #27
 8006e56:	bf5f      	itttt	pl
 8006e58:	681a      	ldrpl	r2, [r3, #0]
 8006e5a:	1d11      	addpl	r1, r2, #4
 8006e5c:	6019      	strpl	r1, [r3, #0]
 8006e5e:	6816      	ldrpl	r6, [r2, #0]
 8006e60:	69a0      	ldr	r0, [r4, #24]
 8006e62:	b188      	cbz	r0, 8006e88 <_scanf_chars+0x58>
 8006e64:	2801      	cmp	r0, #1
 8006e66:	d107      	bne.n	8006e78 <_scanf_chars+0x48>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	6963      	ldr	r3, [r4, #20]
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	b953      	cbnz	r3, 8006e88 <_scanf_chars+0x58>
 8006e72:	2f00      	cmp	r7, #0
 8006e74:	d031      	beq.n	8006eda <_scanf_chars+0xaa>
 8006e76:	e022      	b.n	8006ebe <_scanf_chars+0x8e>
 8006e78:	2802      	cmp	r0, #2
 8006e7a:	d120      	bne.n	8006ebe <_scanf_chars+0x8e>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006e84:	071b      	lsls	r3, r3, #28
 8006e86:	d41a      	bmi.n	8006ebe <_scanf_chars+0x8e>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	3701      	adds	r7, #1
 8006e8c:	06da      	lsls	r2, r3, #27
 8006e8e:	bf5e      	ittt	pl
 8006e90:	682b      	ldrpl	r3, [r5, #0]
 8006e92:	781b      	ldrbpl	r3, [r3, #0]
 8006e94:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006e98:	682a      	ldr	r2, [r5, #0]
 8006e9a:	686b      	ldr	r3, [r5, #4]
 8006e9c:	3201      	adds	r2, #1
 8006e9e:	602a      	str	r2, [r5, #0]
 8006ea0:	68a2      	ldr	r2, [r4, #8]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	3a01      	subs	r2, #1
 8006ea6:	606b      	str	r3, [r5, #4]
 8006ea8:	60a2      	str	r2, [r4, #8]
 8006eaa:	b142      	cbz	r2, 8006ebe <_scanf_chars+0x8e>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dcd7      	bgt.n	8006e60 <_scanf_chars+0x30>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006eb8:	4798      	blx	r3
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d0d0      	beq.n	8006e60 <_scanf_chars+0x30>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	f013 0310 	ands.w	r3, r3, #16
 8006ec4:	d105      	bne.n	8006ed2 <_scanf_chars+0xa2>
 8006ec6:	68e2      	ldr	r2, [r4, #12]
 8006ec8:	3201      	adds	r2, #1
 8006eca:	60e2      	str	r2, [r4, #12]
 8006ecc:	69a2      	ldr	r2, [r4, #24]
 8006ece:	b102      	cbz	r2, 8006ed2 <_scanf_chars+0xa2>
 8006ed0:	7033      	strb	r3, [r6, #0]
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	6923      	ldr	r3, [r4, #16]
 8006ed6:	443b      	add	r3, r7
 8006ed8:	6123      	str	r3, [r4, #16]
 8006eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ede:	bf00      	nop
 8006ee0:	0800781d 	.word	0x0800781d

08006ee4 <_scanf_i>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	460c      	mov	r4, r1
 8006eea:	4698      	mov	r8, r3
 8006eec:	4b75      	ldr	r3, [pc, #468]	; (80070c4 <_scanf_i+0x1e0>)
 8006eee:	b087      	sub	sp, #28
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	4616      	mov	r6, r2
 8006ef4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ef8:	ab03      	add	r3, sp, #12
 8006efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006efe:	4b72      	ldr	r3, [pc, #456]	; (80070c8 <_scanf_i+0x1e4>)
 8006f00:	69a1      	ldr	r1, [r4, #24]
 8006f02:	4a72      	ldr	r2, [pc, #456]	; (80070cc <_scanf_i+0x1e8>)
 8006f04:	4627      	mov	r7, r4
 8006f06:	2903      	cmp	r1, #3
 8006f08:	bf18      	it	ne
 8006f0a:	461a      	movne	r2, r3
 8006f0c:	68a3      	ldr	r3, [r4, #8]
 8006f0e:	9201      	str	r2, [sp, #4]
 8006f10:	1e5a      	subs	r2, r3, #1
 8006f12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006f16:	bf81      	itttt	hi
 8006f18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006f1c:	eb03 0905 	addhi.w	r9, r3, r5
 8006f20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006f24:	60a3      	strhi	r3, [r4, #8]
 8006f26:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006f2a:	bf98      	it	ls
 8006f2c:	f04f 0900 	movls.w	r9, #0
 8006f30:	463d      	mov	r5, r7
 8006f32:	f04f 0b00 	mov.w	fp, #0
 8006f36:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	6831      	ldr	r1, [r6, #0]
 8006f3e:	ab03      	add	r3, sp, #12
 8006f40:	2202      	movs	r2, #2
 8006f42:	7809      	ldrb	r1, [r1, #0]
 8006f44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006f48:	f000 fa28 	bl	800739c <memchr>
 8006f4c:	b328      	cbz	r0, 8006f9a <_scanf_i+0xb6>
 8006f4e:	f1bb 0f01 	cmp.w	fp, #1
 8006f52:	d159      	bne.n	8007008 <_scanf_i+0x124>
 8006f54:	6862      	ldr	r2, [r4, #4]
 8006f56:	b92a      	cbnz	r2, 8006f64 <_scanf_i+0x80>
 8006f58:	2308      	movs	r3, #8
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f62:	6022      	str	r2, [r4, #0]
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006f6a:	6022      	str	r2, [r4, #0]
 8006f6c:	68a2      	ldr	r2, [r4, #8]
 8006f6e:	1e51      	subs	r1, r2, #1
 8006f70:	60a1      	str	r1, [r4, #8]
 8006f72:	b192      	cbz	r2, 8006f9a <_scanf_i+0xb6>
 8006f74:	6832      	ldr	r2, [r6, #0]
 8006f76:	1c51      	adds	r1, r2, #1
 8006f78:	6031      	str	r1, [r6, #0]
 8006f7a:	7812      	ldrb	r2, [r2, #0]
 8006f7c:	f805 2b01 	strb.w	r2, [r5], #1
 8006f80:	6872      	ldr	r2, [r6, #4]
 8006f82:	3a01      	subs	r2, #1
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	6072      	str	r2, [r6, #4]
 8006f88:	dc07      	bgt.n	8006f9a <_scanf_i+0xb6>
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006f92:	4790      	blx	r2
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f040 8085 	bne.w	80070a4 <_scanf_i+0x1c0>
 8006f9a:	f10b 0b01 	add.w	fp, fp, #1
 8006f9e:	f1bb 0f03 	cmp.w	fp, #3
 8006fa2:	d1cb      	bne.n	8006f3c <_scanf_i+0x58>
 8006fa4:	6863      	ldr	r3, [r4, #4]
 8006fa6:	b90b      	cbnz	r3, 8006fac <_scanf_i+0xc8>
 8006fa8:	230a      	movs	r3, #10
 8006faa:	6063      	str	r3, [r4, #4]
 8006fac:	6863      	ldr	r3, [r4, #4]
 8006fae:	4948      	ldr	r1, [pc, #288]	; (80070d0 <_scanf_i+0x1ec>)
 8006fb0:	6960      	ldr	r0, [r4, #20]
 8006fb2:	1ac9      	subs	r1, r1, r3
 8006fb4:	f000 f88e 	bl	80070d4 <__sccl>
 8006fb8:	f04f 0b00 	mov.w	fp, #0
 8006fbc:	68a3      	ldr	r3, [r4, #8]
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d03d      	beq.n	8007040 <_scanf_i+0x15c>
 8006fc4:	6831      	ldr	r1, [r6, #0]
 8006fc6:	6960      	ldr	r0, [r4, #20]
 8006fc8:	f891 c000 	ldrb.w	ip, [r1]
 8006fcc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d035      	beq.n	8007040 <_scanf_i+0x15c>
 8006fd4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006fd8:	d124      	bne.n	8007024 <_scanf_i+0x140>
 8006fda:	0510      	lsls	r0, r2, #20
 8006fdc:	d522      	bpl.n	8007024 <_scanf_i+0x140>
 8006fde:	f10b 0b01 	add.w	fp, fp, #1
 8006fe2:	f1b9 0f00 	cmp.w	r9, #0
 8006fe6:	d003      	beq.n	8006ff0 <_scanf_i+0x10c>
 8006fe8:	3301      	adds	r3, #1
 8006fea:	f109 39ff 	add.w	r9, r9, #4294967295
 8006fee:	60a3      	str	r3, [r4, #8]
 8006ff0:	6873      	ldr	r3, [r6, #4]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	6073      	str	r3, [r6, #4]
 8006ff8:	dd1b      	ble.n	8007032 <_scanf_i+0x14e>
 8006ffa:	6833      	ldr	r3, [r6, #0]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	6033      	str	r3, [r6, #0]
 8007000:	68a3      	ldr	r3, [r4, #8]
 8007002:	3b01      	subs	r3, #1
 8007004:	60a3      	str	r3, [r4, #8]
 8007006:	e7d9      	b.n	8006fbc <_scanf_i+0xd8>
 8007008:	f1bb 0f02 	cmp.w	fp, #2
 800700c:	d1ae      	bne.n	8006f6c <_scanf_i+0x88>
 800700e:	6822      	ldr	r2, [r4, #0]
 8007010:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007014:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007018:	d1bf      	bne.n	8006f9a <_scanf_i+0xb6>
 800701a:	2310      	movs	r3, #16
 800701c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	e7a2      	b.n	8006f6a <_scanf_i+0x86>
 8007024:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007028:	6022      	str	r2, [r4, #0]
 800702a:	780b      	ldrb	r3, [r1, #0]
 800702c:	f805 3b01 	strb.w	r3, [r5], #1
 8007030:	e7de      	b.n	8006ff0 <_scanf_i+0x10c>
 8007032:	4631      	mov	r1, r6
 8007034:	4650      	mov	r0, sl
 8007036:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800703a:	4798      	blx	r3
 800703c:	2800      	cmp	r0, #0
 800703e:	d0df      	beq.n	8007000 <_scanf_i+0x11c>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	05db      	lsls	r3, r3, #23
 8007044:	d50d      	bpl.n	8007062 <_scanf_i+0x17e>
 8007046:	42bd      	cmp	r5, r7
 8007048:	d909      	bls.n	800705e <_scanf_i+0x17a>
 800704a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800704e:	4632      	mov	r2, r6
 8007050:	4650      	mov	r0, sl
 8007052:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007056:	f105 39ff 	add.w	r9, r5, #4294967295
 800705a:	4798      	blx	r3
 800705c:	464d      	mov	r5, r9
 800705e:	42bd      	cmp	r5, r7
 8007060:	d02d      	beq.n	80070be <_scanf_i+0x1da>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	f012 0210 	ands.w	r2, r2, #16
 8007068:	d113      	bne.n	8007092 <_scanf_i+0x1ae>
 800706a:	702a      	strb	r2, [r5, #0]
 800706c:	4639      	mov	r1, r7
 800706e:	6863      	ldr	r3, [r4, #4]
 8007070:	4650      	mov	r0, sl
 8007072:	9e01      	ldr	r6, [sp, #4]
 8007074:	47b0      	blx	r6
 8007076:	6821      	ldr	r1, [r4, #0]
 8007078:	f8d8 3000 	ldr.w	r3, [r8]
 800707c:	f011 0f20 	tst.w	r1, #32
 8007080:	d013      	beq.n	80070aa <_scanf_i+0x1c6>
 8007082:	1d1a      	adds	r2, r3, #4
 8007084:	f8c8 2000 	str.w	r2, [r8]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6018      	str	r0, [r3, #0]
 800708c:	68e3      	ldr	r3, [r4, #12]
 800708e:	3301      	adds	r3, #1
 8007090:	60e3      	str	r3, [r4, #12]
 8007092:	2000      	movs	r0, #0
 8007094:	1bed      	subs	r5, r5, r7
 8007096:	44ab      	add	fp, r5
 8007098:	6925      	ldr	r5, [r4, #16]
 800709a:	445d      	add	r5, fp
 800709c:	6125      	str	r5, [r4, #16]
 800709e:	b007      	add	sp, #28
 80070a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a4:	f04f 0b00 	mov.w	fp, #0
 80070a8:	e7ca      	b.n	8007040 <_scanf_i+0x15c>
 80070aa:	1d1a      	adds	r2, r3, #4
 80070ac:	f8c8 2000 	str.w	r2, [r8]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f011 0f01 	tst.w	r1, #1
 80070b6:	bf14      	ite	ne
 80070b8:	8018      	strhne	r0, [r3, #0]
 80070ba:	6018      	streq	r0, [r3, #0]
 80070bc:	e7e6      	b.n	800708c <_scanf_i+0x1a8>
 80070be:	2001      	movs	r0, #1
 80070c0:	e7ed      	b.n	800709e <_scanf_i+0x1ba>
 80070c2:	bf00      	nop
 80070c4:	08007784 	.word	0x08007784
 80070c8:	08007325 	.word	0x08007325
 80070cc:	0800723d 	.word	0x0800723d
 80070d0:	0800781a 	.word	0x0800781a

080070d4 <__sccl>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	780b      	ldrb	r3, [r1, #0]
 80070d8:	4604      	mov	r4, r0
 80070da:	2b5e      	cmp	r3, #94	; 0x5e
 80070dc:	bf13      	iteet	ne
 80070de:	2200      	movne	r2, #0
 80070e0:	2201      	moveq	r2, #1
 80070e2:	784b      	ldrbeq	r3, [r1, #1]
 80070e4:	1c48      	addne	r0, r1, #1
 80070e6:	bf08      	it	eq
 80070e8:	1c88      	addeq	r0, r1, #2
 80070ea:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80070ee:	1e61      	subs	r1, r4, #1
 80070f0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80070f4:	42a9      	cmp	r1, r5
 80070f6:	d1fb      	bne.n	80070f0 <__sccl+0x1c>
 80070f8:	b90b      	cbnz	r3, 80070fe <__sccl+0x2a>
 80070fa:	3801      	subs	r0, #1
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
 80070fe:	f082 0201 	eor.w	r2, r2, #1
 8007102:	4605      	mov	r5, r0
 8007104:	54e2      	strb	r2, [r4, r3]
 8007106:	4628      	mov	r0, r5
 8007108:	f810 1b01 	ldrb.w	r1, [r0], #1
 800710c:	292d      	cmp	r1, #45	; 0x2d
 800710e:	d006      	beq.n	800711e <__sccl+0x4a>
 8007110:	295d      	cmp	r1, #93	; 0x5d
 8007112:	d0f3      	beq.n	80070fc <__sccl+0x28>
 8007114:	b909      	cbnz	r1, 800711a <__sccl+0x46>
 8007116:	4628      	mov	r0, r5
 8007118:	e7f0      	b.n	80070fc <__sccl+0x28>
 800711a:	460b      	mov	r3, r1
 800711c:	e7f1      	b.n	8007102 <__sccl+0x2e>
 800711e:	786e      	ldrb	r6, [r5, #1]
 8007120:	2e5d      	cmp	r6, #93	; 0x5d
 8007122:	d0fa      	beq.n	800711a <__sccl+0x46>
 8007124:	42b3      	cmp	r3, r6
 8007126:	dcf8      	bgt.n	800711a <__sccl+0x46>
 8007128:	4619      	mov	r1, r3
 800712a:	3502      	adds	r5, #2
 800712c:	3101      	adds	r1, #1
 800712e:	428e      	cmp	r6, r1
 8007130:	5462      	strb	r2, [r4, r1]
 8007132:	dcfb      	bgt.n	800712c <__sccl+0x58>
 8007134:	1af1      	subs	r1, r6, r3
 8007136:	3901      	subs	r1, #1
 8007138:	42b3      	cmp	r3, r6
 800713a:	bfa8      	it	ge
 800713c:	2100      	movge	r1, #0
 800713e:	1c58      	adds	r0, r3, #1
 8007140:	1843      	adds	r3, r0, r1
 8007142:	e7e0      	b.n	8007106 <__sccl+0x32>

08007144 <_strtol_l.constprop.0>:
 8007144:	2b01      	cmp	r3, #1
 8007146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714a:	4680      	mov	r8, r0
 800714c:	d001      	beq.n	8007152 <_strtol_l.constprop.0+0xe>
 800714e:	2b24      	cmp	r3, #36	; 0x24
 8007150:	d906      	bls.n	8007160 <_strtol_l.constprop.0+0x1c>
 8007152:	f7ff f905 	bl	8006360 <__errno>
 8007156:	2316      	movs	r3, #22
 8007158:	6003      	str	r3, [r0, #0]
 800715a:	2000      	movs	r0, #0
 800715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007160:	460d      	mov	r5, r1
 8007162:	4f35      	ldr	r7, [pc, #212]	; (8007238 <_strtol_l.constprop.0+0xf4>)
 8007164:	4628      	mov	r0, r5
 8007166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800716a:	5de6      	ldrb	r6, [r4, r7]
 800716c:	f016 0608 	ands.w	r6, r6, #8
 8007170:	d1f8      	bne.n	8007164 <_strtol_l.constprop.0+0x20>
 8007172:	2c2d      	cmp	r4, #45	; 0x2d
 8007174:	d12f      	bne.n	80071d6 <_strtol_l.constprop.0+0x92>
 8007176:	2601      	movs	r6, #1
 8007178:	782c      	ldrb	r4, [r5, #0]
 800717a:	1c85      	adds	r5, r0, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d057      	beq.n	8007230 <_strtol_l.constprop.0+0xec>
 8007180:	2b10      	cmp	r3, #16
 8007182:	d109      	bne.n	8007198 <_strtol_l.constprop.0+0x54>
 8007184:	2c30      	cmp	r4, #48	; 0x30
 8007186:	d107      	bne.n	8007198 <_strtol_l.constprop.0+0x54>
 8007188:	7828      	ldrb	r0, [r5, #0]
 800718a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800718e:	2858      	cmp	r0, #88	; 0x58
 8007190:	d149      	bne.n	8007226 <_strtol_l.constprop.0+0xe2>
 8007192:	2310      	movs	r3, #16
 8007194:	786c      	ldrb	r4, [r5, #1]
 8007196:	3502      	adds	r5, #2
 8007198:	2700      	movs	r7, #0
 800719a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800719e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80071a2:	fbbe f9f3 	udiv	r9, lr, r3
 80071a6:	4638      	mov	r0, r7
 80071a8:	fb03 ea19 	mls	sl, r3, r9, lr
 80071ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80071b0:	f1bc 0f09 	cmp.w	ip, #9
 80071b4:	d814      	bhi.n	80071e0 <_strtol_l.constprop.0+0x9c>
 80071b6:	4664      	mov	r4, ip
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	dd22      	ble.n	8007202 <_strtol_l.constprop.0+0xbe>
 80071bc:	2f00      	cmp	r7, #0
 80071be:	db1d      	blt.n	80071fc <_strtol_l.constprop.0+0xb8>
 80071c0:	4581      	cmp	r9, r0
 80071c2:	d31b      	bcc.n	80071fc <_strtol_l.constprop.0+0xb8>
 80071c4:	d101      	bne.n	80071ca <_strtol_l.constprop.0+0x86>
 80071c6:	45a2      	cmp	sl, r4
 80071c8:	db18      	blt.n	80071fc <_strtol_l.constprop.0+0xb8>
 80071ca:	2701      	movs	r7, #1
 80071cc:	fb00 4003 	mla	r0, r0, r3, r4
 80071d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071d4:	e7ea      	b.n	80071ac <_strtol_l.constprop.0+0x68>
 80071d6:	2c2b      	cmp	r4, #43	; 0x2b
 80071d8:	bf04      	itt	eq
 80071da:	782c      	ldrbeq	r4, [r5, #0]
 80071dc:	1c85      	addeq	r5, r0, #2
 80071de:	e7cd      	b.n	800717c <_strtol_l.constprop.0+0x38>
 80071e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80071e4:	f1bc 0f19 	cmp.w	ip, #25
 80071e8:	d801      	bhi.n	80071ee <_strtol_l.constprop.0+0xaa>
 80071ea:	3c37      	subs	r4, #55	; 0x37
 80071ec:	e7e4      	b.n	80071b8 <_strtol_l.constprop.0+0x74>
 80071ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80071f2:	f1bc 0f19 	cmp.w	ip, #25
 80071f6:	d804      	bhi.n	8007202 <_strtol_l.constprop.0+0xbe>
 80071f8:	3c57      	subs	r4, #87	; 0x57
 80071fa:	e7dd      	b.n	80071b8 <_strtol_l.constprop.0+0x74>
 80071fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007200:	e7e6      	b.n	80071d0 <_strtol_l.constprop.0+0x8c>
 8007202:	2f00      	cmp	r7, #0
 8007204:	da07      	bge.n	8007216 <_strtol_l.constprop.0+0xd2>
 8007206:	2322      	movs	r3, #34	; 0x22
 8007208:	4670      	mov	r0, lr
 800720a:	f8c8 3000 	str.w	r3, [r8]
 800720e:	2a00      	cmp	r2, #0
 8007210:	d0a4      	beq.n	800715c <_strtol_l.constprop.0+0x18>
 8007212:	1e69      	subs	r1, r5, #1
 8007214:	e005      	b.n	8007222 <_strtol_l.constprop.0+0xde>
 8007216:	b106      	cbz	r6, 800721a <_strtol_l.constprop.0+0xd6>
 8007218:	4240      	negs	r0, r0
 800721a:	2a00      	cmp	r2, #0
 800721c:	d09e      	beq.n	800715c <_strtol_l.constprop.0+0x18>
 800721e:	2f00      	cmp	r7, #0
 8007220:	d1f7      	bne.n	8007212 <_strtol_l.constprop.0+0xce>
 8007222:	6011      	str	r1, [r2, #0]
 8007224:	e79a      	b.n	800715c <_strtol_l.constprop.0+0x18>
 8007226:	2430      	movs	r4, #48	; 0x30
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1b5      	bne.n	8007198 <_strtol_l.constprop.0+0x54>
 800722c:	2308      	movs	r3, #8
 800722e:	e7b3      	b.n	8007198 <_strtol_l.constprop.0+0x54>
 8007230:	2c30      	cmp	r4, #48	; 0x30
 8007232:	d0a9      	beq.n	8007188 <_strtol_l.constprop.0+0x44>
 8007234:	230a      	movs	r3, #10
 8007236:	e7af      	b.n	8007198 <_strtol_l.constprop.0+0x54>
 8007238:	0800781d 	.word	0x0800781d

0800723c <_strtol_r>:
 800723c:	f7ff bf82 	b.w	8007144 <_strtol_l.constprop.0>

08007240 <_strtoul_l.constprop.0>:
 8007240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007244:	4686      	mov	lr, r0
 8007246:	460d      	mov	r5, r1
 8007248:	4f35      	ldr	r7, [pc, #212]	; (8007320 <_strtoul_l.constprop.0+0xe0>)
 800724a:	4628      	mov	r0, r5
 800724c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007250:	5de6      	ldrb	r6, [r4, r7]
 8007252:	f016 0608 	ands.w	r6, r6, #8
 8007256:	d1f8      	bne.n	800724a <_strtoul_l.constprop.0+0xa>
 8007258:	2c2d      	cmp	r4, #45	; 0x2d
 800725a:	d12f      	bne.n	80072bc <_strtoul_l.constprop.0+0x7c>
 800725c:	2601      	movs	r6, #1
 800725e:	782c      	ldrb	r4, [r5, #0]
 8007260:	1c85      	adds	r5, r0, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d057      	beq.n	8007316 <_strtoul_l.constprop.0+0xd6>
 8007266:	2b10      	cmp	r3, #16
 8007268:	d109      	bne.n	800727e <_strtoul_l.constprop.0+0x3e>
 800726a:	2c30      	cmp	r4, #48	; 0x30
 800726c:	d107      	bne.n	800727e <_strtoul_l.constprop.0+0x3e>
 800726e:	7828      	ldrb	r0, [r5, #0]
 8007270:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007274:	2858      	cmp	r0, #88	; 0x58
 8007276:	d149      	bne.n	800730c <_strtoul_l.constprop.0+0xcc>
 8007278:	2310      	movs	r3, #16
 800727a:	786c      	ldrb	r4, [r5, #1]
 800727c:	3502      	adds	r5, #2
 800727e:	f04f 38ff 	mov.w	r8, #4294967295
 8007282:	fbb8 f8f3 	udiv	r8, r8, r3
 8007286:	2700      	movs	r7, #0
 8007288:	fb03 f908 	mul.w	r9, r3, r8
 800728c:	4638      	mov	r0, r7
 800728e:	ea6f 0909 	mvn.w	r9, r9
 8007292:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007296:	f1bc 0f09 	cmp.w	ip, #9
 800729a:	d814      	bhi.n	80072c6 <_strtoul_l.constprop.0+0x86>
 800729c:	4664      	mov	r4, ip
 800729e:	42a3      	cmp	r3, r4
 80072a0:	dd22      	ble.n	80072e8 <_strtoul_l.constprop.0+0xa8>
 80072a2:	2f00      	cmp	r7, #0
 80072a4:	db1d      	blt.n	80072e2 <_strtoul_l.constprop.0+0xa2>
 80072a6:	4580      	cmp	r8, r0
 80072a8:	d31b      	bcc.n	80072e2 <_strtoul_l.constprop.0+0xa2>
 80072aa:	d101      	bne.n	80072b0 <_strtoul_l.constprop.0+0x70>
 80072ac:	45a1      	cmp	r9, r4
 80072ae:	db18      	blt.n	80072e2 <_strtoul_l.constprop.0+0xa2>
 80072b0:	2701      	movs	r7, #1
 80072b2:	fb00 4003 	mla	r0, r0, r3, r4
 80072b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072ba:	e7ea      	b.n	8007292 <_strtoul_l.constprop.0+0x52>
 80072bc:	2c2b      	cmp	r4, #43	; 0x2b
 80072be:	bf04      	itt	eq
 80072c0:	782c      	ldrbeq	r4, [r5, #0]
 80072c2:	1c85      	addeq	r5, r0, #2
 80072c4:	e7cd      	b.n	8007262 <_strtoul_l.constprop.0+0x22>
 80072c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80072ca:	f1bc 0f19 	cmp.w	ip, #25
 80072ce:	d801      	bhi.n	80072d4 <_strtoul_l.constprop.0+0x94>
 80072d0:	3c37      	subs	r4, #55	; 0x37
 80072d2:	e7e4      	b.n	800729e <_strtoul_l.constprop.0+0x5e>
 80072d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80072d8:	f1bc 0f19 	cmp.w	ip, #25
 80072dc:	d804      	bhi.n	80072e8 <_strtoul_l.constprop.0+0xa8>
 80072de:	3c57      	subs	r4, #87	; 0x57
 80072e0:	e7dd      	b.n	800729e <_strtoul_l.constprop.0+0x5e>
 80072e2:	f04f 37ff 	mov.w	r7, #4294967295
 80072e6:	e7e6      	b.n	80072b6 <_strtoul_l.constprop.0+0x76>
 80072e8:	2f00      	cmp	r7, #0
 80072ea:	da07      	bge.n	80072fc <_strtoul_l.constprop.0+0xbc>
 80072ec:	2322      	movs	r3, #34	; 0x22
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295
 80072f2:	f8ce 3000 	str.w	r3, [lr]
 80072f6:	b932      	cbnz	r2, 8007306 <_strtoul_l.constprop.0+0xc6>
 80072f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072fc:	b106      	cbz	r6, 8007300 <_strtoul_l.constprop.0+0xc0>
 80072fe:	4240      	negs	r0, r0
 8007300:	2a00      	cmp	r2, #0
 8007302:	d0f9      	beq.n	80072f8 <_strtoul_l.constprop.0+0xb8>
 8007304:	b107      	cbz	r7, 8007308 <_strtoul_l.constprop.0+0xc8>
 8007306:	1e69      	subs	r1, r5, #1
 8007308:	6011      	str	r1, [r2, #0]
 800730a:	e7f5      	b.n	80072f8 <_strtoul_l.constprop.0+0xb8>
 800730c:	2430      	movs	r4, #48	; 0x30
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1b5      	bne.n	800727e <_strtoul_l.constprop.0+0x3e>
 8007312:	2308      	movs	r3, #8
 8007314:	e7b3      	b.n	800727e <_strtoul_l.constprop.0+0x3e>
 8007316:	2c30      	cmp	r4, #48	; 0x30
 8007318:	d0a9      	beq.n	800726e <_strtoul_l.constprop.0+0x2e>
 800731a:	230a      	movs	r3, #10
 800731c:	e7af      	b.n	800727e <_strtoul_l.constprop.0+0x3e>
 800731e:	bf00      	nop
 8007320:	0800781d 	.word	0x0800781d

08007324 <_strtoul_r>:
 8007324:	f7ff bf8c 	b.w	8007240 <_strtoul_l.constprop.0>

08007328 <__submore>:
 8007328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007334:	4299      	cmp	r1, r3
 8007336:	d11b      	bne.n	8007370 <__submore+0x48>
 8007338:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800733c:	f000 f8be 	bl	80074bc <_malloc_r>
 8007340:	b918      	cbnz	r0, 800734a <__submore+0x22>
 8007342:	f04f 30ff 	mov.w	r0, #4294967295
 8007346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800734a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007350:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007354:	6360      	str	r0, [r4, #52]	; 0x34
 8007356:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800735a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800735e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007362:	7043      	strb	r3, [r0, #1]
 8007364:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007368:	7003      	strb	r3, [r0, #0]
 800736a:	6020      	str	r0, [r4, #0]
 800736c:	2000      	movs	r0, #0
 800736e:	e7ea      	b.n	8007346 <__submore+0x1e>
 8007370:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007372:	0077      	lsls	r7, r6, #1
 8007374:	463a      	mov	r2, r7
 8007376:	f000 f915 	bl	80075a4 <_realloc_r>
 800737a:	4605      	mov	r5, r0
 800737c:	2800      	cmp	r0, #0
 800737e:	d0e0      	beq.n	8007342 <__submore+0x1a>
 8007380:	eb00 0806 	add.w	r8, r0, r6
 8007384:	4601      	mov	r1, r0
 8007386:	4632      	mov	r2, r6
 8007388:	4640      	mov	r0, r8
 800738a:	f7ff f813 	bl	80063b4 <memcpy>
 800738e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007392:	f8c4 8000 	str.w	r8, [r4]
 8007396:	e7e9      	b.n	800736c <__submore+0x44>

08007398 <__retarget_lock_acquire_recursive>:
 8007398:	4770      	bx	lr

0800739a <__retarget_lock_release_recursive>:
 800739a:	4770      	bx	lr

0800739c <memchr>:
 800739c:	4603      	mov	r3, r0
 800739e:	b510      	push	{r4, lr}
 80073a0:	b2c9      	uxtb	r1, r1
 80073a2:	4402      	add	r2, r0
 80073a4:	4293      	cmp	r3, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	d101      	bne.n	80073ae <memchr+0x12>
 80073aa:	2000      	movs	r0, #0
 80073ac:	e003      	b.n	80073b6 <memchr+0x1a>
 80073ae:	7804      	ldrb	r4, [r0, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	428c      	cmp	r4, r1
 80073b4:	d1f6      	bne.n	80073a4 <memchr+0x8>
 80073b6:	bd10      	pop	{r4, pc}

080073b8 <memmove>:
 80073b8:	4288      	cmp	r0, r1
 80073ba:	b510      	push	{r4, lr}
 80073bc:	eb01 0402 	add.w	r4, r1, r2
 80073c0:	d902      	bls.n	80073c8 <memmove+0x10>
 80073c2:	4284      	cmp	r4, r0
 80073c4:	4623      	mov	r3, r4
 80073c6:	d807      	bhi.n	80073d8 <memmove+0x20>
 80073c8:	1e43      	subs	r3, r0, #1
 80073ca:	42a1      	cmp	r1, r4
 80073cc:	d008      	beq.n	80073e0 <memmove+0x28>
 80073ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073d6:	e7f8      	b.n	80073ca <memmove+0x12>
 80073d8:	4601      	mov	r1, r0
 80073da:	4402      	add	r2, r0
 80073dc:	428a      	cmp	r2, r1
 80073de:	d100      	bne.n	80073e2 <memmove+0x2a>
 80073e0:	bd10      	pop	{r4, pc}
 80073e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ea:	e7f7      	b.n	80073dc <memmove+0x24>

080073ec <_free_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4605      	mov	r5, r0
 80073f0:	2900      	cmp	r1, #0
 80073f2:	d040      	beq.n	8007476 <_free_r+0x8a>
 80073f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f8:	1f0c      	subs	r4, r1, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfb8      	it	lt
 80073fe:	18e4      	addlt	r4, r4, r3
 8007400:	f000 f910 	bl	8007624 <__malloc_lock>
 8007404:	4a1c      	ldr	r2, [pc, #112]	; (8007478 <_free_r+0x8c>)
 8007406:	6813      	ldr	r3, [r2, #0]
 8007408:	b933      	cbnz	r3, 8007418 <_free_r+0x2c>
 800740a:	6063      	str	r3, [r4, #4]
 800740c:	6014      	str	r4, [r2, #0]
 800740e:	4628      	mov	r0, r5
 8007410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007414:	f000 b90c 	b.w	8007630 <__malloc_unlock>
 8007418:	42a3      	cmp	r3, r4
 800741a:	d908      	bls.n	800742e <_free_r+0x42>
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	1821      	adds	r1, r4, r0
 8007420:	428b      	cmp	r3, r1
 8007422:	bf01      	itttt	eq
 8007424:	6819      	ldreq	r1, [r3, #0]
 8007426:	685b      	ldreq	r3, [r3, #4]
 8007428:	1809      	addeq	r1, r1, r0
 800742a:	6021      	streq	r1, [r4, #0]
 800742c:	e7ed      	b.n	800740a <_free_r+0x1e>
 800742e:	461a      	mov	r2, r3
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	b10b      	cbz	r3, 8007438 <_free_r+0x4c>
 8007434:	42a3      	cmp	r3, r4
 8007436:	d9fa      	bls.n	800742e <_free_r+0x42>
 8007438:	6811      	ldr	r1, [r2, #0]
 800743a:	1850      	adds	r0, r2, r1
 800743c:	42a0      	cmp	r0, r4
 800743e:	d10b      	bne.n	8007458 <_free_r+0x6c>
 8007440:	6820      	ldr	r0, [r4, #0]
 8007442:	4401      	add	r1, r0
 8007444:	1850      	adds	r0, r2, r1
 8007446:	4283      	cmp	r3, r0
 8007448:	6011      	str	r1, [r2, #0]
 800744a:	d1e0      	bne.n	800740e <_free_r+0x22>
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4401      	add	r1, r0
 8007452:	6011      	str	r1, [r2, #0]
 8007454:	6053      	str	r3, [r2, #4]
 8007456:	e7da      	b.n	800740e <_free_r+0x22>
 8007458:	d902      	bls.n	8007460 <_free_r+0x74>
 800745a:	230c      	movs	r3, #12
 800745c:	602b      	str	r3, [r5, #0]
 800745e:	e7d6      	b.n	800740e <_free_r+0x22>
 8007460:	6820      	ldr	r0, [r4, #0]
 8007462:	1821      	adds	r1, r4, r0
 8007464:	428b      	cmp	r3, r1
 8007466:	bf01      	itttt	eq
 8007468:	6819      	ldreq	r1, [r3, #0]
 800746a:	685b      	ldreq	r3, [r3, #4]
 800746c:	1809      	addeq	r1, r1, r0
 800746e:	6021      	streq	r1, [r4, #0]
 8007470:	6063      	str	r3, [r4, #4]
 8007472:	6054      	str	r4, [r2, #4]
 8007474:	e7cb      	b.n	800740e <_free_r+0x22>
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20001250 	.word	0x20001250

0800747c <sbrk_aligned>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4e0e      	ldr	r6, [pc, #56]	; (80074b8 <sbrk_aligned+0x3c>)
 8007480:	460c      	mov	r4, r1
 8007482:	6831      	ldr	r1, [r6, #0]
 8007484:	4605      	mov	r5, r0
 8007486:	b911      	cbnz	r1, 800748e <sbrk_aligned+0x12>
 8007488:	f000 f8bc 	bl	8007604 <_sbrk_r>
 800748c:	6030      	str	r0, [r6, #0]
 800748e:	4621      	mov	r1, r4
 8007490:	4628      	mov	r0, r5
 8007492:	f000 f8b7 	bl	8007604 <_sbrk_r>
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	d00a      	beq.n	80074b0 <sbrk_aligned+0x34>
 800749a:	1cc4      	adds	r4, r0, #3
 800749c:	f024 0403 	bic.w	r4, r4, #3
 80074a0:	42a0      	cmp	r0, r4
 80074a2:	d007      	beq.n	80074b4 <sbrk_aligned+0x38>
 80074a4:	1a21      	subs	r1, r4, r0
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 f8ac 	bl	8007604 <_sbrk_r>
 80074ac:	3001      	adds	r0, #1
 80074ae:	d101      	bne.n	80074b4 <sbrk_aligned+0x38>
 80074b0:	f04f 34ff 	mov.w	r4, #4294967295
 80074b4:	4620      	mov	r0, r4
 80074b6:	bd70      	pop	{r4, r5, r6, pc}
 80074b8:	20001254 	.word	0x20001254

080074bc <_malloc_r>:
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	1ccd      	adds	r5, r1, #3
 80074c2:	f025 0503 	bic.w	r5, r5, #3
 80074c6:	3508      	adds	r5, #8
 80074c8:	2d0c      	cmp	r5, #12
 80074ca:	bf38      	it	cc
 80074cc:	250c      	movcc	r5, #12
 80074ce:	2d00      	cmp	r5, #0
 80074d0:	4607      	mov	r7, r0
 80074d2:	db01      	blt.n	80074d8 <_malloc_r+0x1c>
 80074d4:	42a9      	cmp	r1, r5
 80074d6:	d905      	bls.n	80074e4 <_malloc_r+0x28>
 80074d8:	230c      	movs	r3, #12
 80074da:	2600      	movs	r6, #0
 80074dc:	603b      	str	r3, [r7, #0]
 80074de:	4630      	mov	r0, r6
 80074e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e4:	4e2e      	ldr	r6, [pc, #184]	; (80075a0 <_malloc_r+0xe4>)
 80074e6:	f000 f89d 	bl	8007624 <__malloc_lock>
 80074ea:	6833      	ldr	r3, [r6, #0]
 80074ec:	461c      	mov	r4, r3
 80074ee:	bb34      	cbnz	r4, 800753e <_malloc_r+0x82>
 80074f0:	4629      	mov	r1, r5
 80074f2:	4638      	mov	r0, r7
 80074f4:	f7ff ffc2 	bl	800747c <sbrk_aligned>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	4604      	mov	r4, r0
 80074fc:	d14d      	bne.n	800759a <_malloc_r+0xde>
 80074fe:	6834      	ldr	r4, [r6, #0]
 8007500:	4626      	mov	r6, r4
 8007502:	2e00      	cmp	r6, #0
 8007504:	d140      	bne.n	8007588 <_malloc_r+0xcc>
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	4631      	mov	r1, r6
 800750a:	4638      	mov	r0, r7
 800750c:	eb04 0803 	add.w	r8, r4, r3
 8007510:	f000 f878 	bl	8007604 <_sbrk_r>
 8007514:	4580      	cmp	r8, r0
 8007516:	d13a      	bne.n	800758e <_malloc_r+0xd2>
 8007518:	6821      	ldr	r1, [r4, #0]
 800751a:	3503      	adds	r5, #3
 800751c:	1a6d      	subs	r5, r5, r1
 800751e:	f025 0503 	bic.w	r5, r5, #3
 8007522:	3508      	adds	r5, #8
 8007524:	2d0c      	cmp	r5, #12
 8007526:	bf38      	it	cc
 8007528:	250c      	movcc	r5, #12
 800752a:	4638      	mov	r0, r7
 800752c:	4629      	mov	r1, r5
 800752e:	f7ff ffa5 	bl	800747c <sbrk_aligned>
 8007532:	3001      	adds	r0, #1
 8007534:	d02b      	beq.n	800758e <_malloc_r+0xd2>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	442b      	add	r3, r5
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	e00e      	b.n	800755c <_malloc_r+0xa0>
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	1b52      	subs	r2, r2, r5
 8007542:	d41e      	bmi.n	8007582 <_malloc_r+0xc6>
 8007544:	2a0b      	cmp	r2, #11
 8007546:	d916      	bls.n	8007576 <_malloc_r+0xba>
 8007548:	1961      	adds	r1, r4, r5
 800754a:	42a3      	cmp	r3, r4
 800754c:	6025      	str	r5, [r4, #0]
 800754e:	bf18      	it	ne
 8007550:	6059      	strne	r1, [r3, #4]
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	bf08      	it	eq
 8007556:	6031      	streq	r1, [r6, #0]
 8007558:	5162      	str	r2, [r4, r5]
 800755a:	604b      	str	r3, [r1, #4]
 800755c:	4638      	mov	r0, r7
 800755e:	f104 060b 	add.w	r6, r4, #11
 8007562:	f000 f865 	bl	8007630 <__malloc_unlock>
 8007566:	f026 0607 	bic.w	r6, r6, #7
 800756a:	1d23      	adds	r3, r4, #4
 800756c:	1af2      	subs	r2, r6, r3
 800756e:	d0b6      	beq.n	80074de <_malloc_r+0x22>
 8007570:	1b9b      	subs	r3, r3, r6
 8007572:	50a3      	str	r3, [r4, r2]
 8007574:	e7b3      	b.n	80074de <_malloc_r+0x22>
 8007576:	6862      	ldr	r2, [r4, #4]
 8007578:	42a3      	cmp	r3, r4
 800757a:	bf0c      	ite	eq
 800757c:	6032      	streq	r2, [r6, #0]
 800757e:	605a      	strne	r2, [r3, #4]
 8007580:	e7ec      	b.n	800755c <_malloc_r+0xa0>
 8007582:	4623      	mov	r3, r4
 8007584:	6864      	ldr	r4, [r4, #4]
 8007586:	e7b2      	b.n	80074ee <_malloc_r+0x32>
 8007588:	4634      	mov	r4, r6
 800758a:	6876      	ldr	r6, [r6, #4]
 800758c:	e7b9      	b.n	8007502 <_malloc_r+0x46>
 800758e:	230c      	movs	r3, #12
 8007590:	4638      	mov	r0, r7
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	f000 f84c 	bl	8007630 <__malloc_unlock>
 8007598:	e7a1      	b.n	80074de <_malloc_r+0x22>
 800759a:	6025      	str	r5, [r4, #0]
 800759c:	e7de      	b.n	800755c <_malloc_r+0xa0>
 800759e:	bf00      	nop
 80075a0:	20001250 	.word	0x20001250

080075a4 <_realloc_r>:
 80075a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a8:	4680      	mov	r8, r0
 80075aa:	4614      	mov	r4, r2
 80075ac:	460e      	mov	r6, r1
 80075ae:	b921      	cbnz	r1, 80075ba <_realloc_r+0x16>
 80075b0:	4611      	mov	r1, r2
 80075b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b6:	f7ff bf81 	b.w	80074bc <_malloc_r>
 80075ba:	b92a      	cbnz	r2, 80075c8 <_realloc_r+0x24>
 80075bc:	f7ff ff16 	bl	80073ec <_free_r>
 80075c0:	4625      	mov	r5, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c8:	f000 f838 	bl	800763c <_malloc_usable_size_r>
 80075cc:	4284      	cmp	r4, r0
 80075ce:	4607      	mov	r7, r0
 80075d0:	d802      	bhi.n	80075d8 <_realloc_r+0x34>
 80075d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075d6:	d812      	bhi.n	80075fe <_realloc_r+0x5a>
 80075d8:	4621      	mov	r1, r4
 80075da:	4640      	mov	r0, r8
 80075dc:	f7ff ff6e 	bl	80074bc <_malloc_r>
 80075e0:	4605      	mov	r5, r0
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d0ed      	beq.n	80075c2 <_realloc_r+0x1e>
 80075e6:	42bc      	cmp	r4, r7
 80075e8:	4622      	mov	r2, r4
 80075ea:	4631      	mov	r1, r6
 80075ec:	bf28      	it	cs
 80075ee:	463a      	movcs	r2, r7
 80075f0:	f7fe fee0 	bl	80063b4 <memcpy>
 80075f4:	4631      	mov	r1, r6
 80075f6:	4640      	mov	r0, r8
 80075f8:	f7ff fef8 	bl	80073ec <_free_r>
 80075fc:	e7e1      	b.n	80075c2 <_realloc_r+0x1e>
 80075fe:	4635      	mov	r5, r6
 8007600:	e7df      	b.n	80075c2 <_realloc_r+0x1e>
	...

08007604 <_sbrk_r>:
 8007604:	b538      	push	{r3, r4, r5, lr}
 8007606:	2300      	movs	r3, #0
 8007608:	4d05      	ldr	r5, [pc, #20]	; (8007620 <_sbrk_r+0x1c>)
 800760a:	4604      	mov	r4, r0
 800760c:	4608      	mov	r0, r1
 800760e:	602b      	str	r3, [r5, #0]
 8007610:	f7f9 ff7c 	bl	800150c <_sbrk>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d102      	bne.n	800761e <_sbrk_r+0x1a>
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	b103      	cbz	r3, 800761e <_sbrk_r+0x1a>
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	20001248 	.word	0x20001248

08007624 <__malloc_lock>:
 8007624:	4801      	ldr	r0, [pc, #4]	; (800762c <__malloc_lock+0x8>)
 8007626:	f7ff beb7 	b.w	8007398 <__retarget_lock_acquire_recursive>
 800762a:	bf00      	nop
 800762c:	2000124c 	.word	0x2000124c

08007630 <__malloc_unlock>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__malloc_unlock+0x8>)
 8007632:	f7ff beb2 	b.w	800739a <__retarget_lock_release_recursive>
 8007636:	bf00      	nop
 8007638:	2000124c 	.word	0x2000124c

0800763c <_malloc_usable_size_r>:
 800763c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007640:	1f18      	subs	r0, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	bfbc      	itt	lt
 8007646:	580b      	ldrlt	r3, [r1, r0]
 8007648:	18c0      	addlt	r0, r0, r3
 800764a:	4770      	bx	lr

0800764c <_init>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr

08007658 <_fini>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr
