
mohinhdonnhiem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fec  08005fec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005fec  08005fec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fec  08005fec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  08006064  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08006064  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a2d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e8  00000000  00000000  00032ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  000353b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b8a  00000000  00000000  000375e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001489e  00000000  00000000  0005116a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093633  00000000  00000000  00065a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f903b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005300  00000000  00000000  000f908c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ed8 	.word	0x08005ed8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005ed8 	.word	0x08005ed8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	; 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000732:	2afd      	cmp	r2, #253	; 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	; 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	; 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	; 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <DS18B20_DelayInit>:
#include "DS18B20.h"
//************************** Low Level Layer ********************************************************//
#include "delay_timer.h"

static void DS18B20_DelayInit(DS18B20_Name* DS18B20)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DS18B20->Timer);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f000 f98a 	bl	8000ca6 <DELAY_TIM_Init>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <DS18B20_DelayUs>:
static void DS18B20_DelayUs(DS18B20_Name* DS18B20, uint16_t Time)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	460b      	mov	r3, r1
 80009a4:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DS18B20->Timer, Time);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	887a      	ldrh	r2, [r7, #2]
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f984 	bl	8000cbc <DELAY_TIM_Us>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <DS18B20_DelayMs>:
static void DS18B20_DelayMs(DS18B20_Name* DS18B20, uint16_t Time)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Ms(DS18B20->Timer, Time);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	887a      	ldrh	r2, [r7, #2]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f98a 	bl	8000cea <DELAY_TIM_Ms>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <DS18B20_SetPinOut>:

static void DS18B20_SetPinOut(DS18B20_Name* DS18B20)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	889b      	ldrh	r3, [r3, #4]
 80009f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2302      	movs	r3, #2
 8000a00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f107 0208 	add.w	r2, r7, #8
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fed3 	bl	80027b8 <HAL_GPIO_Init>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <DS18B20_SetPinIn>:
static void DS18B20_SetPinIn(DS18B20_Name* DS18B20)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DS18B20->Pin;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	889b      	ldrh	r3, [r3, #4]
 8000a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20->PORT, &GPIO_InitStruct);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f107 0208 	add.w	r2, r7, #8
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 feb5 	bl	80027b8 <HAL_GPIO_Init>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <DS18B20_WritePin>:
static void DS18B20_WritePin(DS18B20_Name* DS18B20, uint8_t Value)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DS18B20->PORT, DS18B20->Pin, Value);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6898      	ldr	r0, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	889b      	ldrh	r3, [r3, #4]
 8000a6a:	78fa      	ldrb	r2, [r7, #3]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f002 f83e 	bl	8002aee <HAL_GPIO_WritePin>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <DS18B20_ReadPin>:
static uint8_t DS18B20_ReadPin(DS18B20_Name* DS18B20)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
	return  HAL_GPIO_ReadPin(DS18B20->PORT, DS18B20->Pin);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	889b      	ldrh	r3, [r3, #4]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	f002 f817 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <DS18B20_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DS18B20_Start(DS18B20_Name* DS18B20)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinOut(DS18B20);  
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff98 	bl	80009de <DS18B20_SetPinOut>
	DS18B20_WritePin(DS18B20, 0);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ffd0 	bl	8000a56 <DS18B20_WritePin>
	DS18B20_DelayUs(DS18B20, 480);   
 8000ab6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff6d 	bl	800099a <DS18B20_DelayUs>
	DS18B20_SetPinIn(DS18B20);    
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ffaa 	bl	8000a1a <DS18B20_SetPinIn>
	DS18B20_DelayUs(DS18B20, 80); 
 8000ac6:	2150      	movs	r1, #80	; 0x50
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff66 	bl	800099a <DS18B20_DelayUs>
	if (!(DS18B20_ReadPin(DS18B20))) Response = 1;   
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ffd3 	bl	8000a7a <DS18B20_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <DS18B20_Start+0x44>
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e001      	b.n	8000ae4 <DS18B20_Start+0x48>
	else Response = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
	DS18B20_DelayUs(DS18B20, 400); // 480 us delay totally.
 8000ae4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ff56 	bl	800099a <DS18B20_DelayUs>

	return Response;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <DS18B20_Write>:
static void DS18B20_Write(DS18B20_Name* DS18B20, uint8_t Data)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
	DS18B20_SetPinOut(DS18B20);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff6a 	bl	80009de <DS18B20_SetPinOut>
	for(int i = 0; i<8; i++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	e02b      	b.n	8000b68 <DS18B20_Write+0x70>
	{
		if((Data&(1<<i))!=0)
 8000b10:	78fa      	ldrb	r2, [r7, #3]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	fa42 f303 	asr.w	r3, r2, r3
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d012      	beq.n	8000b46 <DS18B20_Write+0x4e>
		{
			DS18B20_SetPinOut(DS18B20);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ff5c 	bl	80009de <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8000b26:	2100      	movs	r1, #0
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff94 	bl	8000a56 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 1);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff32 	bl	800099a <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ff6f 	bl	8000a1a <DS18B20_SetPinIn>
			DS18B20_DelayUs(DS18B20, 50);
 8000b3c:	2132      	movs	r1, #50	; 0x32
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ff2b 	bl	800099a <DS18B20_DelayUs>
 8000b44:	e00d      	b.n	8000b62 <DS18B20_Write+0x6a>
		}
		else
		{
			DS18B20_SetPinOut(DS18B20);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff49 	bl	80009de <DS18B20_SetPinOut>
			DS18B20_WritePin(DS18B20, 0);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ff81 	bl	8000a56 <DS18B20_WritePin>
			DS18B20_DelayUs(DS18B20, 50);
 8000b54:	2132      	movs	r1, #50	; 0x32
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff1f 	bl	800099a <DS18B20_DelayUs>
			DS18B20_SetPinIn(DS18B20);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff5c 	bl	8000a1a <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	ddd0      	ble.n	8000b10 <DS18B20_Write+0x18>
		}
	}
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <DS18B20_Read>:
static uint8_t DS18B20_Read(DS18B20_Name* DS18B20)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
	DS18B20_SetPinIn(DS18B20);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff48 	bl	8000a1a <DS18B20_SetPinIn>
	for(int i = 0; i<8; i++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	e024      	b.n	8000bda <DS18B20_Read+0x62>
	{
		DS18B20_SetPinOut(DS18B20);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff24 	bl	80009de <DS18B20_SetPinOut>
		DS18B20_WritePin(DS18B20, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff5c 	bl	8000a56 <DS18B20_WritePin>
		DS18B20_DelayUs(DS18B20, 1);
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fefa 	bl	800099a <DS18B20_DelayUs>
		DS18B20_SetPinIn(DS18B20);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ff37 	bl	8000a1a <DS18B20_SetPinIn>
		if(DS18B20_ReadPin(DS18B20))
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff64 	bl	8000a7a <DS18B20_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d009      	beq.n	8000bcc <DS18B20_Read+0x54>
		{
			Value |= 1<<i;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	b25a      	sxtb	r2, r3
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b25b      	sxtb	r3, r3
 8000bca:	73fb      	strb	r3, [r7, #15]
		}
		DS18B20_DelayUs(DS18B20, 50);
 8000bcc:	2132      	movs	r1, #50	; 0x32
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fee3 	bl	800099a <DS18B20_DelayUs>
	for(int i = 0; i<8; i++)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	ddd7      	ble.n	8000b90 <DS18B20_Read+0x18>
	}
	return Value;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <DS18B20_Init>:

//************************** High Level Layer ********************************************************//
void DS18B20_Init(DS18B20_Name* DS18B20, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DS_PORT, uint16_t DS_Pin)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	807b      	strh	r3, [r7, #2]
	DS18B20->PORT = DS_PORT;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
	DS18B20->Pin = DS_Pin;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	809a      	strh	r2, [r3, #4]
	DS18B20->Timer = Timer;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	601a      	str	r2, [r3, #0]
	DS18B20_DelayInit(DS18B20);
 8000c0a:	68f8      	ldr	r0, [r7, #12]
 8000c0c:	f7ff feb8 	bl	8000980 <DS18B20_DelayInit>
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(DS18B20_Name* DS18B20)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2;
	uint16_t Temp;
	DS18B20_Start(DS18B20);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff3b 	bl	8000a9c <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8000c26:	2101      	movs	r1, #1
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fec7 	bl	80009bc <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8000c2e:	21cc      	movs	r1, #204	; 0xcc
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff61 	bl	8000af8 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_CONVERT);
 8000c36:	2144      	movs	r1, #68	; 0x44
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff5d 	bl	8000af8 <DS18B20_Write>
	DS18B20_DelayMs(DS18B20, 200);
 8000c3e:	21c8      	movs	r1, #200	; 0xc8
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff febb 	bl	80009bc <DS18B20_DelayMs>
	DS18B20_Start(DS18B20);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff28 	bl	8000a9c <DS18B20_Start>
	DS18B20_DelayMs(DS18B20, 1);
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff feb4 	bl	80009bc <DS18B20_DelayMs>
	DS18B20_Write(DS18B20, DS18B20_SKIPROM);
 8000c54:	21cc      	movs	r1, #204	; 0xcc
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ff4e 	bl	8000af8 <DS18B20_Write>
	DS18B20_Write(DS18B20, DS18B20_READSCRAT);
 8000c5c:	21be      	movs	r1, #190	; 0xbe
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff4a 	bl	8000af8 <DS18B20_Write>
	Temp1 = DS18B20_Read(DS18B20);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff87 	bl	8000b78 <DS18B20_Read>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
	Temp2 = DS18B20_Read(DS18B20);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ff82 	bl	8000b78 <DS18B20_Read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	73bb      	strb	r3, [r7, #14]
	Temp = (Temp2<<8)|Temp1;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	021b      	lsls	r3, r3, #8
 8000c7c:	b21a      	sxth	r2, r3
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	81bb      	strh	r3, [r7, #12]
	DS18B20->Temp = (float)(Temp/16);
 8000c88:	89bb      	ldrh	r3, [r7, #12]
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fcd2 	bl	8000638 <__aeabi_i2f>
 8000c94:	4602      	mov	r2, r0
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60da      	str	r2, [r3, #12]
	return DS18B20->Temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <DELAY_TIM_Init>:
- Su dung thu vien hal

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f003 f99e 	bl	8003ff0 <HAL_TIM_Base_Start>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8000cd0:	bf00      	nop
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d3f9      	bcc.n	8000cd2 <DELAY_TIM_Us+0x16>
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <DELAY_TIM_Ms>:
void DELAY_TIM_Ms(TIM_HandleTypeDef *htim, uint16_t Time)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
	while(Time--)
 8000cfe:	e006      	b.n	8000d0e <DELAY_TIM_Ms+0x24>
	{
		while(__HAL_TIM_GET_COUNTER(htim)<1000){}
 8000d00:	bf00      	nop
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d0c:	d3f9      	bcc.n	8000d02 <DELAY_TIM_Ms+0x18>
	while(Time--)
 8000d0e:	887b      	ldrh	r3, [r7, #2]
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	807a      	strh	r2, [r7, #2]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f3      	bne.n	8000d00 <DELAY_TIM_Ms+0x16>
	}
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f023 030f 	bic.w	r3, r3, #15
 8000d34:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	f043 030c 	orr.w	r3, r3, #12
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	f043 030c 	orr.w	r3, r3, #12
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d64:	f107 0208 	add.w	r2, r7, #8
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	214e      	movs	r1, #78	; 0x4e
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <lcd_send_cmd+0x5c>)
 8000d72:	f002 f819 	bl	8002da8 <HAL_I2C_Master_Transmit>
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000bc 	.word	0x200000bc

08000d84 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f023 030f 	bic.w	r3, r3, #15
 8000d94:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f043 030d 	orr.w	r3, r3, #13
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	f043 0309 	orr.w	r3, r3, #9
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	f043 030d 	orr.w	r3, r3, #13
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	f043 0309 	orr.w	r3, r3, #9
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dc4:	f107 0208 	add.w	r2, r7, #8
 8000dc8:	2364      	movs	r3, #100	; 0x64
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2304      	movs	r3, #4
 8000dce:	214e      	movs	r1, #78	; 0x4e
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <lcd_send_data+0x5c>)
 8000dd2:	f001 ffe9 	bl	8002da8 <HAL_I2C_Master_Transmit>
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000bc 	.word	0x200000bc

08000de4 <lcd_clear>:

void lcd_clear (void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000dea:	2080      	movs	r0, #128	; 0x80
 8000dec:	f7ff ff9a 	bl	8000d24 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	e005      	b.n	8000e02 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000df6:	2020      	movs	r0, #32
 8000df8:	f7ff ffc4 	bl	8000d84 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b45      	cmp	r3, #69	; 0x45
 8000e06:	ddf6      	ble.n	8000df6 <lcd_clear+0x12>
	}
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <lcd_put_cur+0x18>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d005      	beq.n	8000e34 <lcd_put_cur+0x22>
 8000e28:	e009      	b.n	8000e3e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	603b      	str	r3, [r7, #0]
            break;
 8000e32:	e004      	b.n	8000e3e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e3a:	603b      	str	r3, [r7, #0]
            break;
 8000e3c:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff6e 	bl	8000d24 <lcd_send_cmd>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <lcd_send_string>:
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

void lcd_send_string (char *str)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e58:	e006      	b.n	8000e68 <lcd_send_string+0x18>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff8e 	bl	8000d84 <lcd_send_data>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f4      	bne.n	8000e5a <lcd_send_string+0xa>
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <Read_Soil_Moisture>:
/**
  * @brief  The application entry point.
  * @retval int
  */

float Read_Soil_Moisture(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000e82:	4819      	ldr	r0, [pc, #100]	; (8000ee8 <Read_Soil_Moisture+0x6c>)
 8000e84:	f000 fe22 	bl	8001acc <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <Read_Soil_Moisture+0x6c>)
 8000e8e:	f000 fecb 	bl	8001c28 <HAL_ADC_PollForConversion>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d120      	bne.n	8000eda <Read_Soil_Moisture+0x5e>
        uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <Read_Soil_Moisture+0x6c>)
 8000e9a:	f000 ffcb 	bl	8001e34 <HAL_ADC_GetValue>
 8000e9e:	60f8      	str	r0, [r7, #12]
        float voltage = adc_value * 3.3f / 4096.0f; // Convert ADC value to voltage
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f7ff fbc5 	bl	8000630 <__aeabi_ui2f>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4910      	ldr	r1, [pc, #64]	; (8000eec <Read_Soil_Moisture+0x70>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fc18 	bl	80006e0 <__aeabi_fmul>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fcc6 	bl	8000848 <__aeabi_fdiv>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60bb      	str	r3, [r7, #8]
        float moisture = (voltage / 3.3f) * 100.0f; // Convert voltage to percentage
 8000ec0:	490a      	ldr	r1, [pc, #40]	; (8000eec <Read_Soil_Moisture+0x70>)
 8000ec2:	68b8      	ldr	r0, [r7, #8]
 8000ec4:	f7ff fcc0 	bl	8000848 <__aeabi_fdiv>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4909      	ldr	r1, [pc, #36]	; (8000ef0 <Read_Soil_Moisture+0x74>)
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fc07 	bl	80006e0 <__aeabi_fmul>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	607b      	str	r3, [r7, #4]
        return moisture;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	e001      	b.n	8000ede <Read_Soil_Moisture+0x62>
    }
    return 0;
 8000eda:	f04f 0300 	mov.w	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000008c 	.word	0x2000008c
 8000eec:	40533333 	.word	0x40533333
 8000ef0:	42c80000 	.word	0x42c80000

08000ef4 <main>:

int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efa:	f000 fc89 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f859 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f02:	f000 f9bb 	bl	800127c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f06:	f000 f8ed 	bl	80010e4 <MX_I2C1_Init>
  MX_DMA_Init();
 8000f0a:	f000 f991 	bl	8001230 <MX_DMA_Init>
  MX_TIM4_Init();
 8000f0e:	f000 f917 	bl	8001140 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000f12:	f000 f963 	bl	80011dc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f16:	f000 f8a7 	bl	8001068 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
 DS18B20_Init(&DS1, &htim4, Ds18b20_GPIO_Port, Ds18b20_Pin); // khoi tao ds18b20 timer4,....
 8000f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <main+0xa8>)
 8000f20:	491f      	ldr	r1, [pc, #124]	; (8000fa0 <main+0xac>)
 8000f22:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <main+0xb0>)
 8000f24:	f7ff fe61 	bl	8000bea <DS18B20_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		char buffer_temp[20];
		char buffer_moil[20];// Khai b�o mang
		Temp = DS18B20_ReadTemp(&DS1);// �oc nhiet do tu cam bien
 8000f28:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <main+0xb0>)
 8000f2a:	f7ff fe75 	bl	8000c18 <DS18B20_ReadTemp>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <main+0xb4>)
 8000f32:	6013      	str	r3, [r2, #0]
		HAL_Delay(500); // cu moi 0.5s doc nhiet do 1 lan
 8000f34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f38:	f000 fccc 	bl	80018d4 <HAL_Delay>
		lcd_clear(); // don sach lcd
 8000f3c:	f7ff ff52 	bl	8000de4 <lcd_clear>
		lcd_put_cur(0, 0); // vi tri LCD ( hang 0 , cot 0 )
 8000f40:	2100      	movs	r1, #0
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff ff65 	bl	8000e12 <lcd_put_cur>
		printf(buffer_temp, "Nhiet do: %.2f C", Temp); // hien thi do C
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <main+0xb4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fa61 	bl	8000414 <__aeabi_f2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	f107 0018 	add.w	r0, r7, #24
 8000f5a:	4914      	ldr	r1, [pc, #80]	; (8000fac <main+0xb8>)
 8000f5c:	f004 f828 	bl	8004fb0 <iprintf>
		lcd_send_string(buffer_temp);
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff73 	bl	8000e50 <lcd_send_string>
		float Moil = Read_Soil_Moisture();
 8000f6a:	f7ff ff87 	bl	8000e7c <Read_Soil_Moisture>
 8000f6e:	62f8      	str	r0, [r7, #44]	; 0x2c
		lcd_put_cur(1, 0);
 8000f70:	2100      	movs	r1, #0
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff ff4d 	bl	8000e12 <lcd_put_cur>
		printf(buffer_moil, "Do am: %.2f %", Moil);
 8000f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f7a:	f7ff fa4b 	bl	8000414 <__aeabi_f2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	1d38      	adds	r0, r7, #4
 8000f84:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <main+0xbc>)
 8000f86:	f004 f813 	bl	8004fb0 <iprintf>
		lcd_send_string(buffer_moil);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5f 	bl	8000e50 <lcd_send_string>
		HAL_Delay(3000); // ham delay 3s
 8000f92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f96:	f000 fc9d 	bl	80018d4 <HAL_Delay>
  {
 8000f9a:	e7c5      	b.n	8000f28 <main+0x34>
 8000f9c:	40010c00 	.word	0x40010c00
 8000fa0:	20000110 	.word	0x20000110
 8000fa4:	20000228 	.word	0x20000228
 8000fa8:	20000238 	.word	0x20000238
 8000fac:	08005ef0 	.word	0x08005ef0
 8000fb0:	08005f04 	.word	0x08005f04

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbe:	2228      	movs	r2, #40	; 0x28
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 ffec 	bl	8004fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001000:	2300      	movs	r3, #0
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fa25 	bl	8003458 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001014:	f000 f97e 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001028:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fc91 	bl	800395c <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001040:	f000 f968 	bl	8001314 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001044:	2302      	movs	r3, #2
 8001046:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fe12 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800105a:	f000 f95b 	bl	8001314 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_ADC1_Init+0x74>)
 800107a:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <MX_ADC1_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <MX_ADC1_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_ADC1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_ADC1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_ADC1_Init+0x74>)
 8001092:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <MX_ADC1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ADC1_Init+0x74>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <MX_ADC1_Init+0x74>)
 80010a6:	f000 fc39 	bl	800191c <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 f930 	bl	8001314 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_ADC1_Init+0x74>)
 80010c6:	f000 fec1 	bl	8001e4c <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010d0:	f000 f920 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000008c 	.word	0x2000008c
 80010e0:	40012400 	.word	0x40012400

080010e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C1_Init+0x50>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <MX_I2C1_Init+0x54>)
 80010ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C1_Init+0x50>)
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_I2C1_Init+0x58>)
 80010f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_I2C1_Init+0x50>)
 8001102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001106:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_I2C1_Init+0x50>)
 8001122:	f001 fcfd 	bl	8002b20 <HAL_I2C_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800112c:	f000 f8f2 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000bc 	.word	0x200000bc
 8001138:	40005400 	.word	0x40005400
 800113c:	000186a0 	.word	0x000186a0

08001140 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_TIM4_Init+0x94>)
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <MX_TIM4_Init+0x98>)
 8001160:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_TIM4_Init+0x94>)
 8001164:	2207      	movs	r2, #7
 8001166:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_TIM4_Init+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_TIM4_Init+0x94>)
 8001170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001174:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_TIM4_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_TIM4_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001182:	4814      	ldr	r0, [pc, #80]	; (80011d4 <MX_TIM4_Init+0x94>)
 8001184:	f002 fee4 	bl	8003f50 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800118e:	f000 f8c1 	bl	8001314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_TIM4_Init+0x94>)
 80011a0:	f002 ff70 	bl	8004084 <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 f8b3 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_TIM4_Init+0x94>)
 80011bc:	f003 f92e 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80011c6:	f000 f8a5 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000110 	.word	0x20000110
 80011d8:	40000800 	.word	0x40000800

080011dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USART1_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_USART1_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_USART1_UART_Init+0x4c>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USART1_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USART1_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USART1_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USART1_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USART1_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USART1_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USART1_UART_Init+0x4c>)
 8001214:	f003 f960 	bl	80044d8 <HAL_HalfDuplex_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f000 f879 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000158 	.word	0x20000158
 800122c:	40013800 	.word	0x40013800

08001230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_DMA_Init+0x48>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <MX_DMA_Init+0x48>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <MX_DMA_Init+0x48>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	200e      	movs	r0, #14
 8001254:	f001 f865 	bl	8002322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001258:	200e      	movs	r0, #14
 800125a:	f001 f87e 	bl	800235a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200f      	movs	r0, #15
 8001264:	f001 f85d 	bl	8002322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001268:	200f      	movs	r0, #15
 800126a:	f001 f876 	bl	800235a <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_GPIO_Init+0x90>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <MX_GPIO_Init+0x90>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_GPIO_Init+0x90>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_GPIO_Init+0x90>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <MX_GPIO_Init+0x90>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_GPIO_Init+0x90>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_GPIO_Init+0x90>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <MX_GPIO_Init+0x90>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_GPIO_Init+0x90>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ds18b20_GPIO_Port, Ds18b20_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_GPIO_Init+0x94>)
 80012e0:	f001 fc05 	bl	8002aee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ds18b20_Pin */
  GPIO_InitStruct.Pin = Ds18b20_Pin;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ds18b20_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_GPIO_Init+0x94>)
 80012fe:	f001 fa5b 	bl	80027b8 <HAL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40010c00 	.word	0x40010c00

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_MspInit+0x5c>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <HAL_MspInit+0x5c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6193      	str	r3, [r2, #24]
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_MspInit+0x5c>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x5c>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_MspInit+0x5c>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_MspInit+0x5c>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_MspInit+0x60>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_MspInit+0x60>)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40021000 	.word	0x40021000
 8001380:	40010000 	.word	0x40010000

08001384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_ADC_MspInit+0x6c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d121      	bne.n	80013e8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_ADC_MspInit+0x70>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <HAL_ADC_MspInit+0x70>)
 80013aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_ADC_MspInit+0x70>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_ADC_MspInit+0x70>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <HAL_ADC_MspInit+0x70>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_ADC_MspInit+0x70>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_ADC_MspInit+0x74>)
 80013e4:	f001 f9e8 	bl	80027b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40012400 	.word	0x40012400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800

080013fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <HAL_I2C_MspInit+0x70>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d123      	bne.n	8001464 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_I2C_MspInit+0x74>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a13      	ldr	r2, [pc, #76]	; (8001470 <HAL_I2C_MspInit+0x74>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_I2C_MspInit+0x74>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001434:	23c0      	movs	r3, #192	; 0xc0
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001438:	2312      	movs	r3, #18
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <HAL_I2C_MspInit+0x78>)
 8001448:	f001 f9b6 	bl	80027b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_I2C_MspInit+0x74>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_I2C_MspInit+0x74>)
 8001452:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001456:	61d3      	str	r3, [r2, #28]
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_I2C_MspInit+0x74>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40005400 	.word	0x40005400
 8001470:	40021000 	.word	0x40021000
 8001474:	40010c00 	.word	0x40010c00

08001478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_TIM_Base_MspInit+0x34>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10b      	bne.n	80014a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_TIM_Base_MspInit+0x38>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_TIM_Base_MspInit+0x38>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_TIM_Base_MspInit+0x38>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40000800 	.word	0x40000800
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a40      	ldr	r2, [pc, #256]	; (80015d0 <HAL_UART_MspInit+0x11c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d178      	bne.n	80015c6 <HAL_UART_MspInit+0x112>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d4:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <HAL_UART_MspInit+0x120>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a3e      	ldr	r2, [pc, #248]	; (80015d4 <HAL_UART_MspInit+0x120>)
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <HAL_UART_MspInit+0x120>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <HAL_UART_MspInit+0x120>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a38      	ldr	r2, [pc, #224]	; (80015d4 <HAL_UART_MspInit+0x120>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_UART_MspInit+0x120>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4619      	mov	r1, r3
 8001518:	482f      	ldr	r0, [pc, #188]	; (80015d8 <HAL_UART_MspInit+0x124>)
 800151a:	f001 f94d 	bl	80027b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <HAL_UART_MspInit+0x128>)
 8001520:	4a2f      	ldr	r2, [pc, #188]	; (80015e0 <HAL_UART_MspInit+0x12c>)
 8001522:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_UART_MspInit+0x128>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <HAL_UART_MspInit+0x128>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_UART_MspInit+0x128>)
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <HAL_UART_MspInit+0x128>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_UART_MspInit+0x128>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_UART_MspInit+0x128>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_UART_MspInit+0x128>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800154e:	4823      	ldr	r0, [pc, #140]	; (80015dc <HAL_UART_MspInit+0x128>)
 8001550:	f000 ff1e 	bl	8002390 <HAL_DMA_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_MspInit+0xaa>
    {
      Error_Handler();
 800155a:	f7ff fedb 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_UART_MspInit+0x128>)
 8001562:	63da      	str	r2, [r3, #60]	; 0x3c
 8001564:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <HAL_UART_MspInit+0x128>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_UART_MspInit+0x130>)
 800156c:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <HAL_UART_MspInit+0x134>)
 800156e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_UART_MspInit+0x130>)
 8001572:	2210      	movs	r2, #16
 8001574:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_UART_MspInit+0x130>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_UART_MspInit+0x130>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_UART_MspInit+0x130>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_UART_MspInit+0x130>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_UART_MspInit+0x130>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <HAL_UART_MspInit+0x130>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800159a:	4812      	ldr	r0, [pc, #72]	; (80015e4 <HAL_UART_MspInit+0x130>)
 800159c:	f000 fef8 	bl	8002390 <HAL_DMA_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 80015a6:	f7ff feb5 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_UART_MspInit+0x130>)
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_UART_MspInit+0x130>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2025      	movs	r0, #37	; 0x25
 80015bc:	f000 feb1 	bl	8002322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015c0:	2025      	movs	r0, #37	; 0x25
 80015c2:	f000 feca 	bl	800235a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010800 	.word	0x40010800
 80015dc:	200001a0 	.word	0x200001a0
 80015e0:	40020058 	.word	0x40020058
 80015e4:	200001e4 	.word	0x200001e4
 80015e8:	40020044 	.word	0x40020044

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <NMI_Handler+0x4>

080015f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <HardFault_Handler+0x4>

080015f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <MemManage_Handler+0x4>

080015fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler+0x4>

0800160a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001632:	f000 f933 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA1_Channel4_IRQHandler+0x10>)
 8001642:	f000 ffb3 	bl	80025ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200001e4 	.word	0x200001e4

08001650 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <DMA1_Channel5_IRQHandler+0x10>)
 8001656:	f000 ffa9 	bl	80025ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200001a0 	.word	0x200001a0

08001664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <USART1_IRQHandler+0x10>)
 800166a:	f002 ff8d 	bl	8004588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000158 	.word	0x20000158

08001678 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00a      	b.n	80016a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800168a:	f3af 8000 	nop.w
 800168e:	4601      	mov	r1, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf0      	blt.n	800168a <_read+0x12>
	}

return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e009      	b.n	80016d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf1      	blt.n	80016c4 <_write+0x12>
	}
	return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_close>:

int _close(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	return -1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001710:	605a      	str	r2, [r3, #4]
	return 0;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <_isatty>:

int _isatty(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
	return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f003 fbe6 	bl	8004f4c <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20005000 	.word	0x20005000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	2000023c 	.word	0x2000023c
 80017b4:	20000258 	.word	0x20000258

080017b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c4:	f7ff fff8 	bl	80017b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ca:	490c      	ldr	r1, [pc, #48]	; (80017fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017e0:	4c09      	ldr	r4, [pc, #36]	; (8001808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f003 fbb3 	bl	8004f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f2:	f7ff fb7f 	bl	8000ef4 <main>
  bx lr
 80017f6:	4770      	bx	lr
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001800:	08005ff4 	.word	0x08005ff4
  ldr r2, =_sbss
 8001804:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001808:	20000254 	.word	0x20000254

0800180c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC1_2_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x28>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x28>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 fd73 	bl	800230c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	200f      	movs	r0, #15
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fd78 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fd8b 	bl	8002376 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 fd53 	bl	8002322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000000 	.word	0x20000000
 8001894:	20000008 	.word	0x20000008
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x1c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_IncTick+0x20>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a03      	ldr	r2, [pc, #12]	; (80018bc <HAL_IncTick+0x20>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000240 	.word	0x20000240

080018c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_GetTick+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000240 	.word	0x20000240

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff fff0 	bl	80018c0 <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d005      	beq.n	80018fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_Delay+0x44>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018fa:	bf00      	nop
 80018fc:	f7ff ffe0 	bl	80018c0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d8f7      	bhi.n	80018fc <HAL_Delay+0x28>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008

0800191c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0be      	b.n	8001abc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d109      	bne.n	8001960 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fd12 	bl	8001384 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fbc5 	bl	80020f0 <ADC_ConversionStop_Disable>
 8001966:	4603      	mov	r3, r0
 8001968:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 8099 	bne.w	8001aaa <HAL_ADC_Init+0x18e>
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 8095 	bne.w	8001aaa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001988:	f023 0302 	bic.w	r3, r3, #2
 800198c:	f043 0202 	orr.w	r2, r3, #2
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800199c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7b1b      	ldrb	r3, [r3, #12]
 80019a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b4:	d003      	beq.n	80019be <HAL_ADC_Init+0xa2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d102      	bne.n	80019c4 <HAL_ADC_Init+0xa8>
 80019be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c2:	e000      	b.n	80019c6 <HAL_ADC_Init+0xaa>
 80019c4:	2300      	movs	r3, #0
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7d1b      	ldrb	r3, [r3, #20]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d119      	bne.n	8001a08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7b1b      	ldrb	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	035a      	lsls	r2, r3, #13
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	e00b      	b.n	8001a08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f043 0220 	orr.w	r2, r3, #32
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_ADC_Init+0x1a8>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a38:	d003      	beq.n	8001a42 <HAL_ADC_Init+0x126>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d104      	bne.n	8001a4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	051b      	lsls	r3, r3, #20
 8001a4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_ADC_Init+0x1ac>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d10b      	bne.n	8001a88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	f023 0303 	bic.w	r3, r3, #3
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a86:	e018      	b.n	8001aba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	f023 0312 	bic.w	r3, r3, #18
 8001a90:	f043 0210 	orr.w	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aa8:	e007      	b.n	8001aba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f043 0210 	orr.w	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ac8:	ff1f0efe 	.word	0xff1f0efe

08001acc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Start+0x1a>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e098      	b.n	8001c18 <HAL_ADC_Start+0x14c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 faa4 	bl	800203c <ADC_Enable>
 8001af4:	4603      	mov	r3, r0
 8001af6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 8087 	bne.w	8001c0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a41      	ldr	r2, [pc, #260]	; (8001c20 <HAL_ADC_Start+0x154>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d105      	bne.n	8001b2a <HAL_ADC_Start+0x5e>
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_ADC_Start+0x158>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d115      	bne.n	8001b56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d026      	beq.n	8001b92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b54:	e01d      	b.n	8001b92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a2f      	ldr	r2, [pc, #188]	; (8001c24 <HAL_ADC_Start+0x158>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d004      	beq.n	8001b76 <HAL_ADC_Start+0xaa>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2b      	ldr	r2, [pc, #172]	; (8001c20 <HAL_ADC_Start+0x154>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10d      	bne.n	8001b92 <HAL_ADC_Start+0xc6>
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_ADC_Start+0x158>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	f023 0206 	bic.w	r2, r3, #6
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001baa:	e002      	b.n	8001bb2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f06f 0202 	mvn.w	r2, #2
 8001bc2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bd2:	d113      	bne.n	8001bfc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bd8:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_ADC_Start+0x154>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_ADC_Start+0x158>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d108      	bne.n	8001bfc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	e00c      	b.n	8001c16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e003      	b.n	8001c16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40012800 	.word	0x40012800
 8001c24:	40012400 	.word	0x40012400

08001c28 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c3e:	f7ff fe3f 	bl	80018c0 <HAL_GetTick>
 8001c42:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	f043 0220 	orr.w	r2, r3, #32
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0d3      	b.n	8001e12 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d131      	bne.n	8001cdc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d12a      	bne.n	8001cdc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c86:	e021      	b.n	8001ccc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d01d      	beq.n	8001ccc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_ADC_PollForConversion+0x7e>
 8001c96:	f7ff fe13 	bl	80018c0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d212      	bcs.n	8001ccc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10b      	bne.n	8001ccc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f043 0204 	orr.w	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e0a2      	b.n	8001e12 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0d6      	beq.n	8001c88 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cda:	e070      	b.n	8001dbe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <HAL_ADC_PollForConversion+0x1f4>)
 8001cde:	681c      	ldr	r4, [r3, #0]
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f002 f87f 	bl	8003de4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6919      	ldr	r1, [r3, #16]
 8001cf2:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <HAL_ADC_PollForConversion+0x1f8>)
 8001cf4:	400b      	ands	r3, r1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d118      	bne.n	8001d2c <HAL_ADC_PollForConversion+0x104>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68d9      	ldr	r1, [r3, #12]
 8001d00:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <HAL_ADC_PollForConversion+0x1fc>)
 8001d02:	400b      	ands	r3, r1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d111      	bne.n	8001d2c <HAL_ADC_PollForConversion+0x104>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6919      	ldr	r1, [r3, #16]
 8001d0e:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <HAL_ADC_PollForConversion+0x200>)
 8001d10:	400b      	ands	r3, r1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d108      	bne.n	8001d28 <HAL_ADC_PollForConversion+0x100>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68d9      	ldr	r1, [r3, #12]
 8001d1c:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <HAL_ADC_PollForConversion+0x204>)
 8001d1e:	400b      	ands	r3, r1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_PollForConversion+0x100>
 8001d24:	2314      	movs	r3, #20
 8001d26:	e020      	b.n	8001d6a <HAL_ADC_PollForConversion+0x142>
 8001d28:	2329      	movs	r3, #41	; 0x29
 8001d2a:	e01e      	b.n	8001d6a <HAL_ADC_PollForConversion+0x142>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6919      	ldr	r1, [r3, #16]
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_ADC_PollForConversion+0x200>)
 8001d34:	400b      	ands	r3, r1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x120>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68d9      	ldr	r1, [r3, #12]
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_ADC_PollForConversion+0x204>)
 8001d42:	400b      	ands	r3, r1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00d      	beq.n	8001d64 <HAL_ADC_PollForConversion+0x13c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6919      	ldr	r1, [r3, #16]
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_ADC_PollForConversion+0x208>)
 8001d50:	400b      	ands	r3, r1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d108      	bne.n	8001d68 <HAL_ADC_PollForConversion+0x140>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68d9      	ldr	r1, [r3, #12]
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_ADC_PollForConversion+0x208>)
 8001d5e:	400b      	ands	r3, r1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_PollForConversion+0x140>
 8001d64:	2354      	movs	r3, #84	; 0x54
 8001d66:	e000      	b.n	8001d6a <HAL_ADC_PollForConversion+0x142>
 8001d68:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d70:	e021      	b.n	8001db6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d01a      	beq.n	8001db0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_ADC_PollForConversion+0x168>
 8001d80:	f7ff fd9e 	bl	80018c0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d20f      	bcs.n	8001db0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d90b      	bls.n	8001db0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e030      	b.n	8001e12 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d8d9      	bhi.n	8001d72 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0212 	mvn.w	r2, #18
 8001dc6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dde:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001de2:	d115      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d111      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	24924924 	.word	0x24924924
 8001e24:	00924924 	.word	0x00924924
 8001e28:	12492492 	.word	0x12492492
 8001e2c:	00492492 	.word	0x00492492
 8001e30:	00249249 	.word	0x00249249

08001e34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x20>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e0dc      	b.n	8002026 <HAL_ADC_ConfigChannel+0x1da>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b06      	cmp	r3, #6
 8001e7a:	d81c      	bhi.n	8001eb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b05      	subs	r3, #5
 8001e8e:	221f      	movs	r2, #31
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4019      	ands	r1, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b05      	subs	r3, #5
 8001ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb4:	e03c      	b.n	8001f30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d81c      	bhi.n	8001ef8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b23      	subs	r3, #35	; 0x23
 8001ed0:	221f      	movs	r2, #31
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4019      	ands	r1, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b23      	subs	r3, #35	; 0x23
 8001eea:	fa00 f203 	lsl.w	r2, r0, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef6:	e01b      	b.n	8001f30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b41      	subs	r3, #65	; 0x41
 8001f0a:	221f      	movs	r2, #31
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	4019      	ands	r1, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	3b41      	subs	r3, #65	; 0x41
 8001f24:	fa00 f203 	lsl.w	r2, r0, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	d91c      	bls.n	8001f72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68d9      	ldr	r1, [r3, #12]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	3b1e      	subs	r3, #30
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4019      	ands	r1, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6898      	ldr	r0, [r3, #8]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	3b1e      	subs	r3, #30
 8001f64:	fa00 f203 	lsl.w	r2, r0, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	e019      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6919      	ldr	r1, [r3, #16]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	2207      	movs	r2, #7
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4019      	ands	r1, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6898      	ldr	r0, [r3, #8]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d003      	beq.n	8001fb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fb2:	2b11      	cmp	r3, #17
 8001fb4:	d132      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d125      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d126      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fdc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d11a      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	0c9a      	lsrs	r2, r3, #18
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3b01      	subs	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x1b2>
 800200a:	e007      	b.n	800201c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	f043 0220 	orr.w	r2, r3, #32
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40012400 	.word	0x40012400
 8002034:	20000000 	.word	0x20000000
 8002038:	431bde83 	.word	0x431bde83

0800203c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d040      	beq.n	80020dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <ADC_Enable+0xac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <ADC_Enable+0xb0>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	0c9b      	lsrs	r3, r3, #18
 8002076:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002078:	e002      	b.n	8002080 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	3b01      	subs	r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f9      	bne.n	800207a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002086:	f7ff fc1b 	bl	80018c0 <HAL_GetTick>
 800208a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800208c:	e01f      	b.n	80020ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800208e:	f7ff fc17 	bl	80018c0 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d918      	bls.n	80020ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d011      	beq.n	80020ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	f043 0210 	orr.w	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e007      	b.n	80020de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d1d8      	bne.n	800208e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000000 	.word	0x20000000
 80020ec:	431bde83 	.word	0x431bde83

080020f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d12e      	bne.n	8002168 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0201 	bic.w	r2, r2, #1
 8002118:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800211a:	f7ff fbd1 	bl	80018c0 <HAL_GetTick>
 800211e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002120:	e01b      	b.n	800215a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002122:	f7ff fbcd 	bl	80018c0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d914      	bls.n	800215a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d10d      	bne.n	800215a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	f043 0210 	orr.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e007      	b.n	800216a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d0dc      	beq.n	8002122 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002190:	4013      	ands	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800219c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	60d3      	str	r3, [r2, #12]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <__NVIC_GetPriorityGrouping+0x18>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0307 	and.w	r3, r3, #7
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db0b      	blt.n	8002202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	4906      	ldr	r1, [pc, #24]	; (800220c <__NVIC_EnableIRQ+0x34>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2001      	movs	r0, #1
 80021fa:	fa00 f202 	lsl.w	r2, r0, r2
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d8:	d301      	bcc.n	80022de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022da:	2301      	movs	r3, #1
 80022dc:	e00f      	b.n	80022fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <SysTick_Config+0x40>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e6:	210f      	movs	r1, #15
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f7ff ff90 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <SysTick_Config+0x40>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SysTick_Config+0x40>)
 80022f8:	2207      	movs	r2, #7
 80022fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	e000e010 	.word	0xe000e010

0800230c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff2d 	bl	8002174 <__NVIC_SetPriorityGrouping>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002334:	f7ff ff42 	bl	80021bc <__NVIC_GetPriorityGrouping>
 8002338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	6978      	ldr	r0, [r7, #20]
 8002340:	f7ff ff90 	bl	8002264 <NVIC_EncodePriority>
 8002344:	4602      	mov	r2, r0
 8002346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff5f 	bl	8002210 <__NVIC_SetPriority>
}
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	4603      	mov	r3, r0
 8002362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff35 	bl	80021d8 <__NVIC_EnableIRQ>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ffa2 	bl	80022c8 <SysTick_Config>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e043      	b.n	800242e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_DMA_Init+0xa8>)
 80023ae:	4413      	add	r3, r2
 80023b0:	4a22      	ldr	r2, [pc, #136]	; (800243c <HAL_DMA_Init+0xac>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <HAL_DMA_Init+0xb0>)
 80023c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	bffdfff8 	.word	0xbffdfff8
 800243c:	cccccccd 	.word	0xcccccccd
 8002440:	40020000 	.word	0x40020000

08002444 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d008      	beq.n	800246e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2204      	movs	r2, #4
 8002460:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e020      	b.n	80024b0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 020e 	bic.w	r2, r2, #14
 800247c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f202 	lsl.w	r2, r1, r2
 800249c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d005      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e051      	b.n	8002584 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 020e 	bic.w	r2, r2, #14
 80024ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_DMA_Abort_IT+0xd4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d029      	beq.n	800255e <HAL_DMA_Abort_IT+0xa2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <HAL_DMA_Abort_IT+0xd8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d022      	beq.n	800255a <HAL_DMA_Abort_IT+0x9e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <HAL_DMA_Abort_IT+0xdc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01a      	beq.n	8002554 <HAL_DMA_Abort_IT+0x98>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1e      	ldr	r2, [pc, #120]	; (800259c <HAL_DMA_Abort_IT+0xe0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d012      	beq.n	800254e <HAL_DMA_Abort_IT+0x92>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <HAL_DMA_Abort_IT+0xe4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00a      	beq.n	8002548 <HAL_DMA_Abort_IT+0x8c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <HAL_DMA_Abort_IT+0xe8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d102      	bne.n	8002542 <HAL_DMA_Abort_IT+0x86>
 800253c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002540:	e00e      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 8002542:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002546:	e00b      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 8002548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254c:	e008      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 800254e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002552:	e005      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 8002554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002558:	e002      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 800255a:	2310      	movs	r3, #16
 800255c:	e000      	b.n	8002560 <HAL_DMA_Abort_IT+0xa4>
 800255e:	2301      	movs	r3, #1
 8002560:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <HAL_DMA_Abort_IT+0xec>)
 8002562:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
    } 
  }
  return status;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40020008 	.word	0x40020008
 8002594:	4002001c 	.word	0x4002001c
 8002598:	40020030 	.word	0x40020030
 800259c:	40020044 	.word	0x40020044
 80025a0:	40020058 	.word	0x40020058
 80025a4:	4002006c 	.word	0x4002006c
 80025a8:	40020000 	.word	0x40020000

080025ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2204      	movs	r2, #4
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d04f      	beq.n	8002674 <HAL_DMA_IRQHandler+0xc8>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d04a      	beq.n	8002674 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0204 	bic.w	r2, r2, #4
 80025fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a66      	ldr	r2, [pc, #408]	; (800279c <HAL_DMA_IRQHandler+0x1f0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d029      	beq.n	800265a <HAL_DMA_IRQHandler+0xae>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_DMA_IRQHandler+0x1f4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d022      	beq.n	8002656 <HAL_DMA_IRQHandler+0xaa>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a63      	ldr	r2, [pc, #396]	; (80027a4 <HAL_DMA_IRQHandler+0x1f8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01a      	beq.n	8002650 <HAL_DMA_IRQHandler+0xa4>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a62      	ldr	r2, [pc, #392]	; (80027a8 <HAL_DMA_IRQHandler+0x1fc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d012      	beq.n	800264a <HAL_DMA_IRQHandler+0x9e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a60      	ldr	r2, [pc, #384]	; (80027ac <HAL_DMA_IRQHandler+0x200>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00a      	beq.n	8002644 <HAL_DMA_IRQHandler+0x98>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a5f      	ldr	r2, [pc, #380]	; (80027b0 <HAL_DMA_IRQHandler+0x204>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d102      	bne.n	800263e <HAL_DMA_IRQHandler+0x92>
 8002638:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800263c:	e00e      	b.n	800265c <HAL_DMA_IRQHandler+0xb0>
 800263e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002642:	e00b      	b.n	800265c <HAL_DMA_IRQHandler+0xb0>
 8002644:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002648:	e008      	b.n	800265c <HAL_DMA_IRQHandler+0xb0>
 800264a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800264e:	e005      	b.n	800265c <HAL_DMA_IRQHandler+0xb0>
 8002650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002654:	e002      	b.n	800265c <HAL_DMA_IRQHandler+0xb0>
 8002656:	2340      	movs	r3, #64	; 0x40
 8002658:	e000      	b.n	800265c <HAL_DMA_IRQHandler+0xb0>
 800265a:	2304      	movs	r3, #4
 800265c:	4a55      	ldr	r2, [pc, #340]	; (80027b4 <HAL_DMA_IRQHandler+0x208>)
 800265e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8094 	beq.w	8002792 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002672:	e08e      	b.n	8002792 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2202      	movs	r2, #2
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d056      	beq.n	8002732 <HAL_DMA_IRQHandler+0x186>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d051      	beq.n	8002732 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10b      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 020a 	bic.w	r2, r2, #10
 80026aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a38      	ldr	r2, [pc, #224]	; (800279c <HAL_DMA_IRQHandler+0x1f0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d029      	beq.n	8002712 <HAL_DMA_IRQHandler+0x166>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a37      	ldr	r2, [pc, #220]	; (80027a0 <HAL_DMA_IRQHandler+0x1f4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d022      	beq.n	800270e <HAL_DMA_IRQHandler+0x162>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a35      	ldr	r2, [pc, #212]	; (80027a4 <HAL_DMA_IRQHandler+0x1f8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01a      	beq.n	8002708 <HAL_DMA_IRQHandler+0x15c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <HAL_DMA_IRQHandler+0x1fc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d012      	beq.n	8002702 <HAL_DMA_IRQHandler+0x156>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_DMA_IRQHandler+0x200>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00a      	beq.n	80026fc <HAL_DMA_IRQHandler+0x150>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a31      	ldr	r2, [pc, #196]	; (80027b0 <HAL_DMA_IRQHandler+0x204>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d102      	bne.n	80026f6 <HAL_DMA_IRQHandler+0x14a>
 80026f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026f4:	e00e      	b.n	8002714 <HAL_DMA_IRQHandler+0x168>
 80026f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026fa:	e00b      	b.n	8002714 <HAL_DMA_IRQHandler+0x168>
 80026fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002700:	e008      	b.n	8002714 <HAL_DMA_IRQHandler+0x168>
 8002702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002706:	e005      	b.n	8002714 <HAL_DMA_IRQHandler+0x168>
 8002708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270c:	e002      	b.n	8002714 <HAL_DMA_IRQHandler+0x168>
 800270e:	2320      	movs	r3, #32
 8002710:	e000      	b.n	8002714 <HAL_DMA_IRQHandler+0x168>
 8002712:	2302      	movs	r3, #2
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <HAL_DMA_IRQHandler+0x208>)
 8002716:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d034      	beq.n	8002792 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002730:	e02f      	b.n	8002792 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2208      	movs	r2, #8
 8002738:	409a      	lsls	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d028      	beq.n	8002794 <HAL_DMA_IRQHandler+0x1e8>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d023      	beq.n	8002794 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 020e 	bic.w	r2, r2, #14
 800275a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f202 	lsl.w	r2, r1, r2
 800276a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
    }
  }
  return;
 8002792:	bf00      	nop
 8002794:	bf00      	nop
}
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40020008 	.word	0x40020008
 80027a0:	4002001c 	.word	0x4002001c
 80027a4:	40020030 	.word	0x40020030
 80027a8:	40020044 	.word	0x40020044
 80027ac:	40020058 	.word	0x40020058
 80027b0:	4002006c 	.word	0x4002006c
 80027b4:	40020000 	.word	0x40020000

080027b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b08b      	sub	sp, #44	; 0x2c
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027c6:	2300      	movs	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ca:	e169      	b.n	8002aa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027cc:	2201      	movs	r2, #1
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	f040 8158 	bne.w	8002a9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4a9a      	ldr	r2, [pc, #616]	; (8002a58 <HAL_GPIO_Init+0x2a0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d05e      	beq.n	80028b2 <HAL_GPIO_Init+0xfa>
 80027f4:	4a98      	ldr	r2, [pc, #608]	; (8002a58 <HAL_GPIO_Init+0x2a0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d875      	bhi.n	80028e6 <HAL_GPIO_Init+0x12e>
 80027fa:	4a98      	ldr	r2, [pc, #608]	; (8002a5c <HAL_GPIO_Init+0x2a4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d058      	beq.n	80028b2 <HAL_GPIO_Init+0xfa>
 8002800:	4a96      	ldr	r2, [pc, #600]	; (8002a5c <HAL_GPIO_Init+0x2a4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d86f      	bhi.n	80028e6 <HAL_GPIO_Init+0x12e>
 8002806:	4a96      	ldr	r2, [pc, #600]	; (8002a60 <HAL_GPIO_Init+0x2a8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d052      	beq.n	80028b2 <HAL_GPIO_Init+0xfa>
 800280c:	4a94      	ldr	r2, [pc, #592]	; (8002a60 <HAL_GPIO_Init+0x2a8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d869      	bhi.n	80028e6 <HAL_GPIO_Init+0x12e>
 8002812:	4a94      	ldr	r2, [pc, #592]	; (8002a64 <HAL_GPIO_Init+0x2ac>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d04c      	beq.n	80028b2 <HAL_GPIO_Init+0xfa>
 8002818:	4a92      	ldr	r2, [pc, #584]	; (8002a64 <HAL_GPIO_Init+0x2ac>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d863      	bhi.n	80028e6 <HAL_GPIO_Init+0x12e>
 800281e:	4a92      	ldr	r2, [pc, #584]	; (8002a68 <HAL_GPIO_Init+0x2b0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d046      	beq.n	80028b2 <HAL_GPIO_Init+0xfa>
 8002824:	4a90      	ldr	r2, [pc, #576]	; (8002a68 <HAL_GPIO_Init+0x2b0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d85d      	bhi.n	80028e6 <HAL_GPIO_Init+0x12e>
 800282a:	2b12      	cmp	r3, #18
 800282c:	d82a      	bhi.n	8002884 <HAL_GPIO_Init+0xcc>
 800282e:	2b12      	cmp	r3, #18
 8002830:	d859      	bhi.n	80028e6 <HAL_GPIO_Init+0x12e>
 8002832:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <HAL_GPIO_Init+0x80>)
 8002834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002838:	080028b3 	.word	0x080028b3
 800283c:	0800288d 	.word	0x0800288d
 8002840:	0800289f 	.word	0x0800289f
 8002844:	080028e1 	.word	0x080028e1
 8002848:	080028e7 	.word	0x080028e7
 800284c:	080028e7 	.word	0x080028e7
 8002850:	080028e7 	.word	0x080028e7
 8002854:	080028e7 	.word	0x080028e7
 8002858:	080028e7 	.word	0x080028e7
 800285c:	080028e7 	.word	0x080028e7
 8002860:	080028e7 	.word	0x080028e7
 8002864:	080028e7 	.word	0x080028e7
 8002868:	080028e7 	.word	0x080028e7
 800286c:	080028e7 	.word	0x080028e7
 8002870:	080028e7 	.word	0x080028e7
 8002874:	080028e7 	.word	0x080028e7
 8002878:	080028e7 	.word	0x080028e7
 800287c:	08002895 	.word	0x08002895
 8002880:	080028a9 	.word	0x080028a9
 8002884:	4a79      	ldr	r2, [pc, #484]	; (8002a6c <HAL_GPIO_Init+0x2b4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800288a:	e02c      	b.n	80028e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	623b      	str	r3, [r7, #32]
          break;
 8002892:	e029      	b.n	80028e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	3304      	adds	r3, #4
 800289a:	623b      	str	r3, [r7, #32]
          break;
 800289c:	e024      	b.n	80028e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	3308      	adds	r3, #8
 80028a4:	623b      	str	r3, [r7, #32]
          break;
 80028a6:	e01f      	b.n	80028e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	330c      	adds	r3, #12
 80028ae:	623b      	str	r3, [r7, #32]
          break;
 80028b0:	e01a      	b.n	80028e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028ba:	2304      	movs	r3, #4
 80028bc:	623b      	str	r3, [r7, #32]
          break;
 80028be:	e013      	b.n	80028e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c8:	2308      	movs	r3, #8
 80028ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	611a      	str	r2, [r3, #16]
          break;
 80028d2:	e009      	b.n	80028e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028d4:	2308      	movs	r3, #8
 80028d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	615a      	str	r2, [r3, #20]
          break;
 80028de:	e003      	b.n	80028e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
          break;
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x130>
          break;
 80028e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2bff      	cmp	r3, #255	; 0xff
 80028ec:	d801      	bhi.n	80028f2 <HAL_GPIO_Init+0x13a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	e001      	b.n	80028f6 <HAL_GPIO_Init+0x13e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2bff      	cmp	r3, #255	; 0xff
 80028fc:	d802      	bhi.n	8002904 <HAL_GPIO_Init+0x14c>
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	e002      	b.n	800290a <HAL_GPIO_Init+0x152>
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	3b08      	subs	r3, #8
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	210f      	movs	r1, #15
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	401a      	ands	r2, r3
 800291c:	6a39      	ldr	r1, [r7, #32]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	431a      	orrs	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80b1 	beq.w	8002a9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002938:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <HAL_GPIO_Init+0x2b8>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	4a4c      	ldr	r2, [pc, #304]	; (8002a70 <HAL_GPIO_Init+0x2b8>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6193      	str	r3, [r2, #24]
 8002944:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <HAL_GPIO_Init+0x2b8>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002950:	4a48      	ldr	r2, [pc, #288]	; (8002a74 <HAL_GPIO_Init+0x2bc>)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	220f      	movs	r2, #15
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a40      	ldr	r2, [pc, #256]	; (8002a78 <HAL_GPIO_Init+0x2c0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <HAL_GPIO_Init+0x1ec>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3f      	ldr	r2, [pc, #252]	; (8002a7c <HAL_GPIO_Init+0x2c4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00d      	beq.n	80029a0 <HAL_GPIO_Init+0x1e8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a3e      	ldr	r2, [pc, #248]	; (8002a80 <HAL_GPIO_Init+0x2c8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <HAL_GPIO_Init+0x1e4>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a3d      	ldr	r2, [pc, #244]	; (8002a84 <HAL_GPIO_Init+0x2cc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_GPIO_Init+0x1e0>
 8002994:	2303      	movs	r3, #3
 8002996:	e006      	b.n	80029a6 <HAL_GPIO_Init+0x1ee>
 8002998:	2304      	movs	r3, #4
 800299a:	e004      	b.n	80029a6 <HAL_GPIO_Init+0x1ee>
 800299c:	2302      	movs	r3, #2
 800299e:	e002      	b.n	80029a6 <HAL_GPIO_Init+0x1ee>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_GPIO_Init+0x1ee>
 80029a4:	2300      	movs	r3, #0
 80029a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a8:	f002 0203 	and.w	r2, r2, #3
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	4093      	lsls	r3, r2
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029b6:	492f      	ldr	r1, [pc, #188]	; (8002a74 <HAL_GPIO_Init+0x2bc>)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	492c      	ldr	r1, [pc, #176]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	608b      	str	r3, [r1, #8]
 80029dc:	e006      	b.n	80029ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	4928      	ldr	r1, [pc, #160]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029f8:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4922      	ldr	r1, [pc, #136]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60cb      	str	r3, [r1, #12]
 8002a04:	e006      	b.n	8002a14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	491e      	ldr	r1, [pc, #120]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	4918      	ldr	r1, [pc, #96]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	4914      	ldr	r1, [pc, #80]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d021      	beq.n	8002a8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_GPIO_Init+0x2d0>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]
 8002a54:	e021      	b.n	8002a9a <HAL_GPIO_Init+0x2e2>
 8002a56:	bf00      	nop
 8002a58:	10320000 	.word	0x10320000
 8002a5c:	10310000 	.word	0x10310000
 8002a60:	10220000 	.word	0x10220000
 8002a64:	10210000 	.word	0x10210000
 8002a68:	10120000 	.word	0x10120000
 8002a6c:	10110000 	.word	0x10110000
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40010800 	.word	0x40010800
 8002a7c:	40010c00 	.word	0x40010c00
 8002a80:	40011000 	.word	0x40011000
 8002a84:	40011400 	.word	0x40011400
 8002a88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_GPIO_Init+0x304>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	4909      	ldr	r1, [pc, #36]	; (8002abc <HAL_GPIO_Init+0x304>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f47f ae8e 	bne.w	80027cc <HAL_GPIO_Init+0x14>
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	372c      	adds	r7, #44	; 0x2c
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	40010400 	.word	0x40010400

08002ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e001      	b.n	8002ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	807b      	strh	r3, [r7, #2]
 8002afa:	4613      	mov	r3, r2
 8002afc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002afe:	787b      	ldrb	r3, [r7, #1]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b04:	887a      	ldrh	r2, [r7, #2]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b0a:	e003      	b.n	8002b14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	041a      	lsls	r2, r3, #16
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	611a      	str	r2, [r3, #16]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e12b      	b.n	8002d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fc58 	bl	80013fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b84:	f001 f832 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8002b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a81      	ldr	r2, [pc, #516]	; (8002d94 <HAL_I2C_Init+0x274>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d807      	bhi.n	8002ba4 <HAL_I2C_Init+0x84>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a80      	ldr	r2, [pc, #512]	; (8002d98 <HAL_I2C_Init+0x278>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bf94      	ite	ls
 8002b9c:	2301      	movls	r3, #1
 8002b9e:	2300      	movhi	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e006      	b.n	8002bb2 <HAL_I2C_Init+0x92>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a7d      	ldr	r2, [pc, #500]	; (8002d9c <HAL_I2C_Init+0x27c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	bf94      	ite	ls
 8002bac:	2301      	movls	r3, #1
 8002bae:	2300      	movhi	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0e7      	b.n	8002d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a78      	ldr	r2, [pc, #480]	; (8002da0 <HAL_I2C_Init+0x280>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0c9b      	lsrs	r3, r3, #18
 8002bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a6a      	ldr	r2, [pc, #424]	; (8002d94 <HAL_I2C_Init+0x274>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d802      	bhi.n	8002bf4 <HAL_I2C_Init+0xd4>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	e009      	b.n	8002c08 <HAL_I2C_Init+0xe8>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	4a69      	ldr	r2, [pc, #420]	; (8002da4 <HAL_I2C_Init+0x284>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	3301      	adds	r3, #1
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	495c      	ldr	r1, [pc, #368]	; (8002d94 <HAL_I2C_Init+0x274>)
 8002c24:	428b      	cmp	r3, r1
 8002c26:	d819      	bhi.n	8002c5c <HAL_I2C_Init+0x13c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e59      	subs	r1, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_I2C_Init+0x138>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e59      	subs	r1, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c56:	e051      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	e04f      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d111      	bne.n	8002c88 <HAL_I2C_Init+0x168>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1e58      	subs	r0, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	440b      	add	r3, r1
 8002c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e012      	b.n	8002cae <HAL_I2C_Init+0x18e>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	0099      	lsls	r1, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Init+0x196>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e022      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10e      	bne.n	8002cdc <HAL_I2C_Init+0x1bc>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1e58      	subs	r0, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	440b      	add	r3, r1
 8002ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cda:	e00f      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	0099      	lsls	r1, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	6809      	ldr	r1, [r1, #0]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6911      	ldr	r1, [r2, #16]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68d2      	ldr	r2, [r2, #12]
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	000186a0 	.word	0x000186a0
 8002d98:	001e847f 	.word	0x001e847f
 8002d9c:	003d08ff 	.word	0x003d08ff
 8002da0:	431bde83 	.word	0x431bde83
 8002da4:	10624dd3 	.word	0x10624dd3

08002da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	461a      	mov	r2, r3
 8002db4:	460b      	mov	r3, r1
 8002db6:	817b      	strh	r3, [r7, #10]
 8002db8:	4613      	mov	r3, r2
 8002dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dbc:	f7fe fd80 	bl	80018c0 <HAL_GetTick>
 8002dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	f040 80e0 	bne.w	8002f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2319      	movs	r3, #25
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4970      	ldr	r1, [pc, #448]	; (8002f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f964 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
 8002de8:	e0d3      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_I2C_Master_Transmit+0x50>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e0cc      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x1ea>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d007      	beq.n	8002e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2221      	movs	r2, #33	; 0x21
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	893a      	ldrh	r2, [r7, #8]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a50      	ldr	r2, [pc, #320]	; (8002fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e60:	8979      	ldrh	r1, [r7, #10]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	6a3a      	ldr	r2, [r7, #32]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f89c 	bl	8002fa4 <I2C_MasterRequestWrite>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e08d      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e8c:	e066      	b.n	8002f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	6a39      	ldr	r1, [r7, #32]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa22 	bl	80032dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d107      	bne.n	8002eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06b      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d11b      	bne.n	8002f30 <HAL_I2C_Master_Transmit+0x188>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d017      	beq.n	8002f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	6a39      	ldr	r1, [r7, #32]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fa19 	bl	800336c <I2C_WaitOnBTFFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d107      	bne.n	8002f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e01a      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d194      	bne.n	8002e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	00100002 	.word	0x00100002
 8002fa0:	ffff0000 	.word	0xffff0000

08002fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d006      	beq.n	8002fce <I2C_MasterRequestWrite+0x2a>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d003      	beq.n	8002fce <I2C_MasterRequestWrite+0x2a>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fcc:	d108      	bne.n	8002fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e00b      	b.n	8002ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	2b12      	cmp	r3, #18
 8002fe6:	d107      	bne.n	8002ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f84f 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301e:	d103      	bne.n	8003028 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e035      	b.n	8003098 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003034:	d108      	bne.n	8003048 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003036:	897b      	ldrh	r3, [r7, #10]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003044:	611a      	str	r2, [r3, #16]
 8003046:	e01b      	b.n	8003080 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003048:	897b      	ldrh	r3, [r7, #10]
 800304a:	11db      	asrs	r3, r3, #7
 800304c:	b2db      	uxtb	r3, r3
 800304e:	f003 0306 	and.w	r3, r3, #6
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f063 030f 	orn	r3, r3, #15
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	490e      	ldr	r1, [pc, #56]	; (80030a0 <I2C_MasterRequestWrite+0xfc>)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f898 	bl	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e010      	b.n	8003098 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003076:	897b      	ldrh	r3, [r7, #10]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4907      	ldr	r1, [pc, #28]	; (80030a4 <I2C_MasterRequestWrite+0x100>)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f888 	bl	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	00010008 	.word	0x00010008
 80030a4:	00010002 	.word	0x00010002

080030a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b8:	e048      	b.n	800314c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d044      	beq.n	800314c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe fbfd 	bl	80018c0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d139      	bne.n	800314c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	0c1b      	lsrs	r3, r3, #16
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10d      	bne.n	80030fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	43da      	mvns	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	e00c      	b.n	8003118 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	43da      	mvns	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	429a      	cmp	r2, r3
 800311c:	d116      	bne.n	800314c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e023      	b.n	8003194 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d10d      	bne.n	8003172 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	43da      	mvns	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	e00c      	b.n	800318c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	43da      	mvns	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4013      	ands	r3, r2
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	429a      	cmp	r2, r3
 8003190:	d093      	beq.n	80030ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031aa:	e071      	b.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ba:	d123      	bne.n	8003204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f043 0204 	orr.w	r2, r3, #4
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e067      	b.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320a:	d041      	beq.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320c:	f7fe fb58 	bl	80018c0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d302      	bcc.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d136      	bne.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d10c      	bne.n	8003246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4013      	ands	r3, r2
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e00b      	b.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	43da      	mvns	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e021      	b.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d10c      	bne.n	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	43da      	mvns	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4013      	ands	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e00b      	b.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f47f af6d 	bne.w	80031ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e8:	e034      	b.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f886 	bl	80033fc <I2C_IsAcknowledgeFailed>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e034      	b.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d028      	beq.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7fe fadd 	bl	80018c0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11d      	bne.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d016      	beq.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e007      	b.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d1c3      	bne.n	80032ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003378:	e034      	b.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f83e 	bl	80033fc <I2C_IsAcknowledgeFailed>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e034      	b.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d028      	beq.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fe fa95 	bl	80018c0 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11d      	bne.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d016      	beq.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e007      	b.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d1c3      	bne.n	800337a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003412:	d11b      	bne.n	800344c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800341c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e272      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8087 	beq.w	8003586 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003478:	4b92      	ldr	r3, [pc, #584]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b04      	cmp	r3, #4
 8003482:	d00c      	beq.n	800349e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003484:	4b8f      	ldr	r3, [pc, #572]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d112      	bne.n	80034b6 <HAL_RCC_OscConfig+0x5e>
 8003490:	4b8c      	ldr	r3, [pc, #560]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349c:	d10b      	bne.n	80034b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	4b89      	ldr	r3, [pc, #548]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d06c      	beq.n	8003584 <HAL_RCC_OscConfig+0x12c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d168      	bne.n	8003584 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e24c      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x76>
 80034c0:	4b80      	ldr	r3, [pc, #512]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a7f      	ldr	r2, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e02e      	b.n	800352c <HAL_RCC_OscConfig+0xd4>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x98>
 80034d6:	4b7b      	ldr	r3, [pc, #492]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7a      	ldr	r2, [pc, #488]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b78      	ldr	r3, [pc, #480]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a77      	ldr	r2, [pc, #476]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xd4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0xbc>
 80034fa:	4b72      	ldr	r3, [pc, #456]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a71      	ldr	r2, [pc, #452]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xd4>
 8003514:	4b6b      	ldr	r3, [pc, #428]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6a      	ldr	r2, [pc, #424]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a67      	ldr	r2, [pc, #412]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fe f9c4 	bl	80018c0 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe f9c0 	bl	80018c0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e200      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xe4>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe f9b0 	bl	80018c0 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe f9ac 	bl	80018c0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1ec      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x10c>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d063      	beq.n	800365a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003592:	4b4c      	ldr	r3, [pc, #304]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800359e:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x18c>
 80035aa:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x176>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1c0      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4939      	ldr	r1, [pc, #228]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	e03a      	b.n	800365a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <HAL_RCC_OscConfig+0x270>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fe f965 	bl	80018c0 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fa:	f7fe f961 	bl	80018c0 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e1a1      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4927      	ldr	r1, [pc, #156]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]
 800362c:	e015      	b.n	800365a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe f944 	bl	80018c0 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363c:	f7fe f940 	bl	80018c0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e180      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d03a      	beq.n	80036dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d019      	beq.n	80036a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_RCC_OscConfig+0x274>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003674:	f7fe f924 	bl	80018c0 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367c:	f7fe f920 	bl	80018c0 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e160      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800369a:	2001      	movs	r0, #1
 800369c:	f000 face 	bl	8003c3c <RCC_Delay>
 80036a0:	e01c      	b.n	80036dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <HAL_RCC_OscConfig+0x274>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fe f90a 	bl	80018c0 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ae:	e00f      	b.n	80036d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b0:	f7fe f906 	bl	80018c0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d908      	bls.n	80036d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e146      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	42420000 	.word	0x42420000
 80036cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	4b92      	ldr	r3, [pc, #584]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e9      	bne.n	80036b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a6 	beq.w	8003836 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ee:	4b8b      	ldr	r3, [pc, #556]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fa:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4a87      	ldr	r2, [pc, #540]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	61d3      	str	r3, [r2, #28]
 8003706:	4b85      	ldr	r3, [pc, #532]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b82      	ldr	r3, [pc, #520]	; (8003920 <HAL_RCC_OscConfig+0x4c8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d118      	bne.n	8003754 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b7f      	ldr	r3, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x4c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7e      	ldr	r2, [pc, #504]	; (8003920 <HAL_RCC_OscConfig+0x4c8>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fe f8c7 	bl	80018c0 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fe f8c3 	bl	80018c0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b64      	cmp	r3, #100	; 0x64
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e103      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b75      	ldr	r3, [pc, #468]	; (8003920 <HAL_RCC_OscConfig+0x4c8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x312>
 800375c:	4b6f      	ldr	r3, [pc, #444]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4a6e      	ldr	r2, [pc, #440]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6213      	str	r3, [r2, #32]
 8003768:	e02d      	b.n	80037c6 <HAL_RCC_OscConfig+0x36e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x334>
 8003772:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4a69      	ldr	r2, [pc, #420]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	6213      	str	r3, [r2, #32]
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4a66      	ldr	r2, [pc, #408]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003784:	f023 0304 	bic.w	r3, r3, #4
 8003788:	6213      	str	r3, [r2, #32]
 800378a:	e01c      	b.n	80037c6 <HAL_RCC_OscConfig+0x36e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b05      	cmp	r3, #5
 8003792:	d10c      	bne.n	80037ae <HAL_RCC_OscConfig+0x356>
 8003794:	4b61      	ldr	r3, [pc, #388]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4a60      	ldr	r2, [pc, #384]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6213      	str	r3, [r2, #32]
 80037a0:	4b5e      	ldr	r3, [pc, #376]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4a5d      	ldr	r2, [pc, #372]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6213      	str	r3, [r2, #32]
 80037ac:	e00b      	b.n	80037c6 <HAL_RCC_OscConfig+0x36e>
 80037ae:	4b5b      	ldr	r3, [pc, #364]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4a5a      	ldr	r2, [pc, #360]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6213      	str	r3, [r2, #32]
 80037ba:	4b58      	ldr	r3, [pc, #352]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4a57      	ldr	r2, [pc, #348]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d015      	beq.n	80037fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ce:	f7fe f877 	bl	80018c0 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	e00a      	b.n	80037ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7fe f873 	bl	80018c0 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0b1      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ec:	4b4b      	ldr	r3, [pc, #300]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ee      	beq.n	80037d6 <HAL_RCC_OscConfig+0x37e>
 80037f8:	e014      	b.n	8003824 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fa:	f7fe f861 	bl	80018c0 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe f85d 	bl	80018c0 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e09b      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003818:	4b40      	ldr	r3, [pc, #256]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ee      	bne.n	8003802 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382a:	4b3c      	ldr	r3, [pc, #240]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4a3b      	ldr	r2, [pc, #236]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003834:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8087 	beq.w	800394e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003840:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d061      	beq.n	8003910 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d146      	bne.n	80038e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003854:	4b33      	ldr	r3, [pc, #204]	; (8003924 <HAL_RCC_OscConfig+0x4cc>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe f831 	bl	80018c0 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003862:	f7fe f82d 	bl	80018c0 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e06d      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003888:	d108      	bne.n	800389c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	4921      	ldr	r1, [pc, #132]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a19      	ldr	r1, [r3, #32]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	430b      	orrs	r3, r1
 80038ae:	491b      	ldr	r1, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x4cc>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fe f801 	bl	80018c0 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fd fffd 	bl	80018c0 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e03d      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x46a>
 80038e0:	e035      	b.n	800394e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCC_OscConfig+0x4cc>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fd ffea 	bl	80018c0 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fd ffe6 	bl	80018c0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e026      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x498>
 800390e:	e01e      	b.n	800394e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d107      	bne.n	8003928 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e019      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
 800391c:	40021000 	.word	0x40021000
 8003920:	40007000 	.word	0x40007000
 8003924:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_OscConfig+0x500>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	429a      	cmp	r2, r3
 800393a:	d106      	bne.n	800394a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0d0      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d910      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b67      	ldr	r3, [pc, #412]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 0207 	bic.w	r2, r3, #7
 8003986:	4965      	ldr	r1, [pc, #404]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0b8      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b8:	4b59      	ldr	r3, [pc, #356]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d0:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	494d      	ldr	r1, [pc, #308]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d040      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d115      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e07f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e073      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06b      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4936      	ldr	r1, [pc, #216]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd ff38 	bl	80018c0 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd ff34 	bl	80018c0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e053      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d210      	bcs.n	8003aac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 0207 	bic.w	r2, r3, #7
 8003a92:	4922      	ldr	r1, [pc, #136]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e032      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4916      	ldr	r1, [pc, #88]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	490e      	ldr	r1, [pc, #56]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aea:	f000 f821 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003aee:	4602      	mov	r2, r0
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	490a      	ldr	r1, [pc, #40]	; (8003b24 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	fa22 f303 	lsr.w	r3, r2, r3
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x1cc>)
 8003b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1d0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fe96 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40022000 	.word	0x40022000
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08005f14 	.word	0x08005f14
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000004 	.word	0x20000004

08003b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	2300      	movs	r3, #0
 8003b44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d002      	beq.n	8003b60 <HAL_RCC_GetSysClockFreq+0x30>
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x36>
 8003b5e:	e027      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b60:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b62:	613b      	str	r3, [r7, #16]
      break;
 8003b64:	e027      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	0c9b      	lsrs	r3, r3, #18
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b70:	5cd3      	ldrb	r3, [r2, r3]
 8003b72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d010      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	0c5b      	lsrs	r3, r3, #17
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b8a:	5cd3      	ldrb	r3, [r2, r3]
 8003b8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b92:	fb03 f202 	mul.w	r2, r3, r2
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e004      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ba4:	fb02 f303 	mul.w	r3, r2, r3
 8003ba8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	613b      	str	r3, [r7, #16]
      break;
 8003bae:	e002      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bb2:	613b      	str	r3, [r7, #16]
      break;
 8003bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb6:	693b      	ldr	r3, [r7, #16]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	007a1200 	.word	0x007a1200
 8003bcc:	08005f2c 	.word	0x08005f2c
 8003bd0:	08005f3c 	.word	0x08005f3c
 8003bd4:	003d0900 	.word	0x003d0900

08003bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b02      	ldr	r3, [pc, #8]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	20000000 	.word	0x20000000

08003bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bf0:	f7ff fff2 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	4903      	ldr	r1, [pc, #12]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	08005f24 	.word	0x08005f24

08003c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c18:	f7ff ffde 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	0adb      	lsrs	r3, r3, #11
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4903      	ldr	r1, [pc, #12]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	08005f24 	.word	0x08005f24

08003c3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <RCC_Delay+0x34>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <RCC_Delay+0x38>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0a5b      	lsrs	r3, r3, #9
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c58:	bf00      	nop
  }
  while (Delay --);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1e5a      	subs	r2, r3, #1
 8003c5e:	60fa      	str	r2, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f9      	bne.n	8003c58 <RCC_Delay+0x1c>
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr
 8003c70:	20000000 	.word	0x20000000
 8003c74:	10624dd3 	.word	0x10624dd3

08003c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d07d      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c98:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10d      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	4a4b      	ldr	r2, [pc, #300]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cae:	61d3      	str	r3, [r2, #28]
 8003cb0:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d118      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ccc:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a42      	ldr	r2, [pc, #264]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fdf2 	bl	80018c0 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	e008      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fd fdee 	bl	80018c0 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e06d      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf2:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cfe:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d02e      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d027      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1c:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d26:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2c:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d32:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d014      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fd fdbd 	bl	80018c0 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd fdb9 	bl	80018c0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e036      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d60:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ee      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4917      	ldr	r1, [pc, #92]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d105      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d84:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	4904      	ldr	r1, [pc, #16]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	42420440 	.word	0x42420440

08003de4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	f200 808a 	bhi.w	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d045      	beq.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d075      	beq.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e1a:	e082      	b.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003e1c:	4b46      	ldr	r3, [pc, #280]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e22:	4b45      	ldr	r3, [pc, #276]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d07b      	beq.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	0c9b      	lsrs	r3, r3, #18
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	4a41      	ldr	r2, [pc, #260]	; (8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003e38:	5cd3      	ldrb	r3, [r2, r3]
 8003e3a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d015      	beq.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e46:	4b3c      	ldr	r3, [pc, #240]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	0c5b      	lsrs	r3, r3, #17
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e60:	4a38      	ldr	r2, [pc, #224]	; (8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	e004      	b.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4a34      	ldr	r2, [pc, #208]	; (8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e7c:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e88:	d102      	bne.n	8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	61bb      	str	r3, [r7, #24]
      break;
 8003e8e:	e04a      	b.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	61bb      	str	r3, [r7, #24]
      break;
 8003e9e:	e042      	b.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb0:	d108      	bne.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	e01f      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ece:	d109      	bne.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003edc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	e00f      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eee:	d11c      	bne.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d016      	beq.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003efc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f00:	61bb      	str	r3, [r7, #24]
      break;
 8003f02:	e012      	b.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f04:	e011      	b.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f06:	f7ff fe85 	bl	8003c14 <HAL_RCC_GetPCLK2Freq>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0b9b      	lsrs	r3, r3, #14
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	61bb      	str	r3, [r7, #24]
      break;
 8003f20:	e004      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f2a:	bf00      	nop
    }
  }
  return (frequency);
 8003f2c:	69bb      	ldr	r3, [r7, #24]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	08005f40 	.word	0x08005f40
 8003f40:	08005f50 	.word	0x08005f50
 8003f44:	007a1200 	.word	0x007a1200
 8003f48:	003d0900 	.word	0x003d0900
 8003f4c:	aaaaaaab 	.word	0xaaaaaaab

08003f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e041      	b.n	8003fe6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd fa7e 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	f000 f940 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d001      	beq.n	8004008 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e032      	b.n	800406e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_TIM_Base_Start+0x88>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_TIM_Base_Start+0x48>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004022:	d009      	beq.n	8004038 <HAL_TIM_Base_Start+0x48>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <HAL_TIM_Base_Start+0x8c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_TIM_Base_Start+0x48>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a13      	ldr	r2, [pc, #76]	; (8004080 <HAL_TIM_Base_Start+0x90>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d111      	bne.n	800405c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b06      	cmp	r3, #6
 8004048:	d010      	beq.n	800406c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405a:	e007      	b.n	800406c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800

08004084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_TIM_ConfigClockSource+0x1c>
 800409c:	2302      	movs	r3, #2
 800409e:	e0b4      	b.n	800420a <HAL_TIM_ConfigClockSource+0x186>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d8:	d03e      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0xd4>
 80040da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040de:	f200 8087 	bhi.w	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e6:	f000 8086 	beq.w	80041f6 <HAL_TIM_ConfigClockSource+0x172>
 80040ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ee:	d87f      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b70      	cmp	r3, #112	; 0x70
 80040f2:	d01a      	beq.n	800412a <HAL_TIM_ConfigClockSource+0xa6>
 80040f4:	2b70      	cmp	r3, #112	; 0x70
 80040f6:	d87b      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b60      	cmp	r3, #96	; 0x60
 80040fa:	d050      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x11a>
 80040fc:	2b60      	cmp	r3, #96	; 0x60
 80040fe:	d877      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b50      	cmp	r3, #80	; 0x50
 8004102:	d03c      	beq.n	800417e <HAL_TIM_ConfigClockSource+0xfa>
 8004104:	2b50      	cmp	r3, #80	; 0x50
 8004106:	d873      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d058      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x13a>
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d86f      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b30      	cmp	r3, #48	; 0x30
 8004112:	d064      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 8004114:	2b30      	cmp	r3, #48	; 0x30
 8004116:	d86b      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b20      	cmp	r3, #32
 800411a:	d060      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d867      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d05c      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 8004124:	2b10      	cmp	r3, #16
 8004126:	d05a      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	e062      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6899      	ldr	r1, [r3, #8]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f000 f950 	bl	80043de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800414c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	609a      	str	r2, [r3, #8]
      break;
 8004156:	e04f      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6899      	ldr	r1, [r3, #8]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f000 f939 	bl	80043de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800417a:	609a      	str	r2, [r3, #8]
      break;
 800417c:	e03c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	461a      	mov	r2, r3
 800418c:	f000 f8b0 	bl	80042f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2150      	movs	r1, #80	; 0x50
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f907 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 800419c:	e02c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f000 f8ce 	bl	800434c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2160      	movs	r1, #96	; 0x60
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f8f7 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 80041bc:	e01c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f000 f890 	bl	80042f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2140      	movs	r1, #64	; 0x40
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f8e7 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 80041dc:	e00c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f000 f8de 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 80041ee:	e003      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e000      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <TIM_Base_SetConfig+0xd0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_Base_SetConfig+0x30>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004232:	d007      	beq.n	8004244 <TIM_Base_SetConfig+0x30>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <TIM_Base_SetConfig+0xd4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0x30>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a2b      	ldr	r2, [pc, #172]	; (80042ec <TIM_Base_SetConfig+0xd8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a22      	ldr	r2, [pc, #136]	; (80042e4 <TIM_Base_SetConfig+0xd0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00b      	beq.n	8004276 <TIM_Base_SetConfig+0x62>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d007      	beq.n	8004276 <TIM_Base_SetConfig+0x62>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <TIM_Base_SetConfig+0xd4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_Base_SetConfig+0x62>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <TIM_Base_SetConfig+0xd8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d108      	bne.n	8004288 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0d      	ldr	r2, [pc, #52]	; (80042e4 <TIM_Base_SetConfig+0xd0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d103      	bne.n	80042bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f023 0201 	bic.w	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	611a      	str	r2, [r3, #16]
  }
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800

080042f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f023 0201 	bic.w	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 030a 	bic.w	r3, r3, #10
 800432c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0210 	bic.w	r2, r3, #16
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	031b      	lsls	r3, r3, #12
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	621a      	str	r2, [r3, #32]
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f043 0307 	orr.w	r3, r3, #7
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	609a      	str	r2, [r3, #8]
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043de:	b480      	push	{r7}
 80043e0:	b087      	sub	sp, #28
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	021a      	lsls	r2, r3, #8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	431a      	orrs	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	609a      	str	r2, [r3, #8]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004430:	2302      	movs	r3, #2
 8004432:	e046      	b.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d009      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10c      	bne.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800

080044d8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e04a      	b.n	8004580 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc ffd8 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800451a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fc87 	bl	8004e30 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004540:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0208 	orr.w	r2, r2, #8
 8004550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b0ba      	sub	sp, #232	; 0xe8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_UART_IRQHandler+0x66>
 80045da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fb63 	bl	8004cb2 <UART_Receive_IT>
      return;
 80045ec:	e25b      	b.n	8004aa6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80de 	beq.w	80047b4 <HAL_UART_IRQHandler+0x22c>
 80045f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004608:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80d1 	beq.w	80047b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_UART_IRQHandler+0xae>
 800461e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_UART_IRQHandler+0xd2>
 8004642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f043 0202 	orr.w	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_UART_IRQHandler+0xf6>
 8004666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	f043 0204 	orr.w	r2, r3, #4
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d011      	beq.n	80046ae <HAL_UART_IRQHandler+0x126>
 800468a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d105      	bne.n	80046a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	f043 0208 	orr.w	r2, r3, #8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 81f2 	beq.w	8004a9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_UART_IRQHandler+0x14e>
 80046c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 faee 	bl	8004cb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <HAL_UART_IRQHandler+0x17a>
 80046fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d04f      	beq.n	80047a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f9f8 	bl	8004af8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d041      	beq.n	800479a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800472c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3314      	adds	r3, #20
 800473e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800474e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800475a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1d9      	bne.n	8004716 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d013      	beq.n	8004792 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	4a7e      	ldr	r2, [pc, #504]	; (8004968 <HAL_UART_IRQHandler+0x3e0>)
 8004770:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd fea0 	bl	80024bc <HAL_DMA_Abort_IT>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d016      	beq.n	80047b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800478c:	4610      	mov	r0, r2
 800478e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004790:	e00e      	b.n	80047b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f99c 	bl	8004ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	e00a      	b.n	80047b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f998 	bl	8004ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e006      	b.n	80047b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f994 	bl	8004ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80047ae:	e175      	b.n	8004a9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	bf00      	nop
    return;
 80047b2:	e173      	b.n	8004a9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	f040 814f 	bne.w	8004a5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8148 	beq.w	8004a5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8141 	beq.w	8004a5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80b6 	beq.w	800496c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800480c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8145 	beq.w	8004aa0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800481a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800481e:	429a      	cmp	r2, r3
 8004820:	f080 813e 	bcs.w	8004aa0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800482a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b20      	cmp	r3, #32
 8004834:	f000 8088 	beq.w	8004948 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800484e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004856:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004864:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004870:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800487c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1d9      	bne.n	8004838 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3314      	adds	r3, #20
 800488a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3314      	adds	r3, #20
 80048a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e1      	bne.n	8004884 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e3      	bne.n	80048c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004918:	f023 0310 	bic.w	r3, r3, #16
 800491c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800492a:	65ba      	str	r2, [r7, #88]	; 0x58
 800492c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e3      	bne.n	8004906 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd fd7e 	bl	8002444 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004956:	b29b      	uxth	r3, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f8bf 	bl	8004ae2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004964:	e09c      	b.n	8004aa0 <HAL_UART_IRQHandler+0x518>
 8004966:	bf00      	nop
 8004968:	08004bbd 	.word	0x08004bbd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004974:	b29b      	uxth	r3, r3
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 808e 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8089 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049b6:	647a      	str	r2, [r7, #68]	; 0x44
 80049b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e3      	bne.n	8004992 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3314      	adds	r3, #20
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	623b      	str	r3, [r7, #32]
   return(result);
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049ee:	633a      	str	r2, [r7, #48]	; 0x30
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e3      	bne.n	80049ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a34:	61fa      	str	r2, [r7, #28]
 8004a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	617b      	str	r3, [r7, #20]
   return(result);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e3      	bne.n	8004a10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f844 	bl	8004ae2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a5a:	e023      	b.n	8004aa4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <HAL_UART_IRQHandler+0x4f4>
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8b5 	bl	8004be4 <UART_Transmit_IT>
    return;
 8004a7a:	e014      	b.n	8004aa6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00e      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x51e>
 8004a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8f4 	bl	8004c82 <UART_EndTransmit_IT>
    return;
 8004a9a:	e004      	b.n	8004aa6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a9c:	bf00      	nop
 8004a9e:	e002      	b.n	8004aa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004aa0:	bf00      	nop
 8004aa2:	e000      	b.n	8004aa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004aa4:	bf00      	nop
  }
}
 8004aa6:	37e8      	adds	r7, #232	; 0xe8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr

08004abe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b095      	sub	sp, #84	; 0x54
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b20:	643a      	str	r2, [r7, #64]	; 0x40
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e5      	bne.n	8004b00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3314      	adds	r3, #20
 8004b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3314      	adds	r3, #20
 8004b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d119      	bne.n	8004ba4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f023 0310 	bic.w	r3, r3, #16
 8004b86:	647b      	str	r3, [r7, #68]	; 0x44
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b90:	61ba      	str	r2, [r7, #24]
 8004b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6979      	ldr	r1, [r7, #20]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e5      	bne.n	8004b70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bb2:	bf00      	nop
 8004bb4:	3754      	adds	r7, #84	; 0x54
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff ff7a 	bl	8004ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b21      	cmp	r3, #33	; 0x21
 8004bf6:	d13e      	bne.n	8004c76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c00:	d114      	bne.n	8004c2c <UART_Transmit_IT+0x48>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d110      	bne.n	8004c2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	1c9a      	adds	r2, r3, #2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	621a      	str	r2, [r3, #32]
 8004c2a:	e008      	b.n	8004c3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	1c59      	adds	r1, r3, #1
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6211      	str	r1, [r2, #32]
 8004c36:	781a      	ldrb	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10f      	bne.n	8004c72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e000      	b.n	8004c78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
  }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ff02 	bl	8004aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b08c      	sub	sp, #48	; 0x30
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b22      	cmp	r3, #34	; 0x22
 8004cc4:	f040 80ae 	bne.w	8004e24 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd0:	d117      	bne.n	8004d02 <UART_Receive_IT+0x50>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d113      	bne.n	8004d02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	1c9a      	adds	r2, r3, #2
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004d00:	e026      	b.n	8004d50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d14:	d007      	beq.n	8004d26 <UART_Receive_IT+0x74>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <UART_Receive_IT+0x82>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e008      	b.n	8004d46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d15d      	bne.n	8004e20 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0220 	bic.w	r2, r2, #32
 8004d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d135      	bne.n	8004e16 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f023 0310 	bic.w	r3, r3, #16
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	623a      	str	r2, [r7, #32]
 8004dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	69f9      	ldr	r1, [r7, #28]
 8004dd6:	6a3a      	ldr	r2, [r7, #32]
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e5      	bne.n	8004db0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d10a      	bne.n	8004e08 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fe67 	bl	8004ae2 <HAL_UARTEx_RxEventCallback>
 8004e14:	e002      	b.n	8004e1c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff fe51 	bl	8004abe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e002      	b.n	8004e26 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e000      	b.n	8004e26 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3730      	adds	r7, #48	; 0x30
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e6a:	f023 030c 	bic.w	r3, r3, #12
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <UART_SetConfig+0x114>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d103      	bne.n	8004ea0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e98:	f7fe febc 	bl	8003c14 <HAL_RCC_GetPCLK2Freq>
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	e002      	b.n	8004ea6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fe fea4 	bl	8003bec <HAL_RCC_GetPCLK1Freq>
 8004ea4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009a      	lsls	r2, r3, #2
 8004eb0:	441a      	add	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <UART_SetConfig+0x118>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	0119      	lsls	r1, r3, #4
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	009a      	lsls	r2, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <UART_SetConfig+0x118>)
 8004ede:	fba3 0302 	umull	r0, r3, r3, r2
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2064      	movs	r0, #100	; 0x64
 8004ee6:	fb00 f303 	mul.w	r3, r0, r3
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	3332      	adds	r3, #50	; 0x32
 8004ef0:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <UART_SetConfig+0x118>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efc:	4419      	add	r1, r3
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009a      	lsls	r2, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <UART_SetConfig+0x118>)
 8004f16:	fba3 0302 	umull	r0, r3, r3, r2
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	2064      	movs	r0, #100	; 0x64
 8004f1e:	fb00 f303 	mul.w	r3, r0, r3
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	3332      	adds	r3, #50	; 0x32
 8004f28:	4a07      	ldr	r2, [pc, #28]	; (8004f48 <UART_SetConfig+0x118>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	440a      	add	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40013800 	.word	0x40013800
 8004f48:	51eb851f 	.word	0x51eb851f

08004f4c <__errno>:
 8004f4c:	4b01      	ldr	r3, [pc, #4]	; (8004f54 <__errno+0x8>)
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	2000000c 	.word	0x2000000c

08004f58 <__libc_init_array>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	4d0c      	ldr	r5, [pc, #48]	; (8004f90 <__libc_init_array+0x38>)
 8004f5e:	4c0d      	ldr	r4, [pc, #52]	; (8004f94 <__libc_init_array+0x3c>)
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	42a6      	cmp	r6, r4
 8004f66:	d109      	bne.n	8004f7c <__libc_init_array+0x24>
 8004f68:	f000 ffb6 	bl	8005ed8 <_init>
 8004f6c:	2600      	movs	r6, #0
 8004f6e:	4d0a      	ldr	r5, [pc, #40]	; (8004f98 <__libc_init_array+0x40>)
 8004f70:	4c0a      	ldr	r4, [pc, #40]	; (8004f9c <__libc_init_array+0x44>)
 8004f72:	1b64      	subs	r4, r4, r5
 8004f74:	10a4      	asrs	r4, r4, #2
 8004f76:	42a6      	cmp	r6, r4
 8004f78:	d105      	bne.n	8004f86 <__libc_init_array+0x2e>
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
 8004f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f80:	4798      	blx	r3
 8004f82:	3601      	adds	r6, #1
 8004f84:	e7ee      	b.n	8004f64 <__libc_init_array+0xc>
 8004f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8a:	4798      	blx	r3
 8004f8c:	3601      	adds	r6, #1
 8004f8e:	e7f2      	b.n	8004f76 <__libc_init_array+0x1e>
 8004f90:	08005fec 	.word	0x08005fec
 8004f94:	08005fec 	.word	0x08005fec
 8004f98:	08005fec 	.word	0x08005fec
 8004f9c:	08005ff0 	.word	0x08005ff0

08004fa0 <memset>:
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4402      	add	r2, r0
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d100      	bne.n	8004faa <memset+0xa>
 8004fa8:	4770      	bx	lr
 8004faa:	f803 1b01 	strb.w	r1, [r3], #1
 8004fae:	e7f9      	b.n	8004fa4 <memset+0x4>

08004fb0 <iprintf>:
 8004fb0:	b40f      	push	{r0, r1, r2, r3}
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <iprintf+0x2c>)
 8004fb4:	b513      	push	{r0, r1, r4, lr}
 8004fb6:	681c      	ldr	r4, [r3, #0]
 8004fb8:	b124      	cbz	r4, 8004fc4 <iprintf+0x14>
 8004fba:	69a3      	ldr	r3, [r4, #24]
 8004fbc:	b913      	cbnz	r3, 8004fc4 <iprintf+0x14>
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f000 f866 	bl	8005090 <__sinit>
 8004fc4:	ab05      	add	r3, sp, #20
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	9a04      	ldr	r2, [sp, #16]
 8004fca:	68a1      	ldr	r1, [r4, #8]
 8004fcc:	9301      	str	r3, [sp, #4]
 8004fce:	f000 f9bb 	bl	8005348 <_vfiprintf_r>
 8004fd2:	b002      	add	sp, #8
 8004fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fd8:	b004      	add	sp, #16
 8004fda:	4770      	bx	lr
 8004fdc:	2000000c 	.word	0x2000000c

08004fe0 <std>:
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	b510      	push	{r4, lr}
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8004fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fee:	6083      	str	r3, [r0, #8]
 8004ff0:	8181      	strh	r1, [r0, #12]
 8004ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ff4:	81c2      	strh	r2, [r0, #14]
 8004ff6:	6183      	str	r3, [r0, #24]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	305c      	adds	r0, #92	; 0x5c
 8004ffe:	f7ff ffcf 	bl	8004fa0 <memset>
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <std+0x38>)
 8005004:	6224      	str	r4, [r4, #32]
 8005006:	6263      	str	r3, [r4, #36]	; 0x24
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <std+0x3c>)
 800500a:	62a3      	str	r3, [r4, #40]	; 0x28
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <std+0x40>)
 800500e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005010:	4b04      	ldr	r3, [pc, #16]	; (8005024 <std+0x44>)
 8005012:	6323      	str	r3, [r4, #48]	; 0x30
 8005014:	bd10      	pop	{r4, pc}
 8005016:	bf00      	nop
 8005018:	080058f5 	.word	0x080058f5
 800501c:	08005917 	.word	0x08005917
 8005020:	0800594f 	.word	0x0800594f
 8005024:	08005973 	.word	0x08005973

08005028 <_cleanup_r>:
 8005028:	4901      	ldr	r1, [pc, #4]	; (8005030 <_cleanup_r+0x8>)
 800502a:	f000 b8af 	b.w	800518c <_fwalk_reent>
 800502e:	bf00      	nop
 8005030:	08005c45 	.word	0x08005c45

08005034 <__sfmoreglue>:
 8005034:	2268      	movs	r2, #104	; 0x68
 8005036:	b570      	push	{r4, r5, r6, lr}
 8005038:	1e4d      	subs	r5, r1, #1
 800503a:	4355      	muls	r5, r2
 800503c:	460e      	mov	r6, r1
 800503e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005042:	f000 f8e5 	bl	8005210 <_malloc_r>
 8005046:	4604      	mov	r4, r0
 8005048:	b140      	cbz	r0, 800505c <__sfmoreglue+0x28>
 800504a:	2100      	movs	r1, #0
 800504c:	e9c0 1600 	strd	r1, r6, [r0]
 8005050:	300c      	adds	r0, #12
 8005052:	60a0      	str	r0, [r4, #8]
 8005054:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005058:	f7ff ffa2 	bl	8004fa0 <memset>
 800505c:	4620      	mov	r0, r4
 800505e:	bd70      	pop	{r4, r5, r6, pc}

08005060 <__sfp_lock_acquire>:
 8005060:	4801      	ldr	r0, [pc, #4]	; (8005068 <__sfp_lock_acquire+0x8>)
 8005062:	f000 b8b3 	b.w	80051cc <__retarget_lock_acquire_recursive>
 8005066:	bf00      	nop
 8005068:	20000245 	.word	0x20000245

0800506c <__sfp_lock_release>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__sfp_lock_release+0x8>)
 800506e:	f000 b8ae 	b.w	80051ce <__retarget_lock_release_recursive>
 8005072:	bf00      	nop
 8005074:	20000245 	.word	0x20000245

08005078 <__sinit_lock_acquire>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__sinit_lock_acquire+0x8>)
 800507a:	f000 b8a7 	b.w	80051cc <__retarget_lock_acquire_recursive>
 800507e:	bf00      	nop
 8005080:	20000246 	.word	0x20000246

08005084 <__sinit_lock_release>:
 8005084:	4801      	ldr	r0, [pc, #4]	; (800508c <__sinit_lock_release+0x8>)
 8005086:	f000 b8a2 	b.w	80051ce <__retarget_lock_release_recursive>
 800508a:	bf00      	nop
 800508c:	20000246 	.word	0x20000246

08005090 <__sinit>:
 8005090:	b510      	push	{r4, lr}
 8005092:	4604      	mov	r4, r0
 8005094:	f7ff fff0 	bl	8005078 <__sinit_lock_acquire>
 8005098:	69a3      	ldr	r3, [r4, #24]
 800509a:	b11b      	cbz	r3, 80050a4 <__sinit+0x14>
 800509c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a0:	f7ff bff0 	b.w	8005084 <__sinit_lock_release>
 80050a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050a8:	6523      	str	r3, [r4, #80]	; 0x50
 80050aa:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <__sinit+0x68>)
 80050ac:	4a13      	ldr	r2, [pc, #76]	; (80050fc <__sinit+0x6c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80050b2:	42a3      	cmp	r3, r4
 80050b4:	bf08      	it	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	4620      	mov	r0, r4
 80050ba:	bf08      	it	eq
 80050bc:	61a3      	streq	r3, [r4, #24]
 80050be:	f000 f81f 	bl	8005100 <__sfp>
 80050c2:	6060      	str	r0, [r4, #4]
 80050c4:	4620      	mov	r0, r4
 80050c6:	f000 f81b 	bl	8005100 <__sfp>
 80050ca:	60a0      	str	r0, [r4, #8]
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 f817 	bl	8005100 <__sfp>
 80050d2:	2200      	movs	r2, #0
 80050d4:	2104      	movs	r1, #4
 80050d6:	60e0      	str	r0, [r4, #12]
 80050d8:	6860      	ldr	r0, [r4, #4]
 80050da:	f7ff ff81 	bl	8004fe0 <std>
 80050de:	2201      	movs	r2, #1
 80050e0:	2109      	movs	r1, #9
 80050e2:	68a0      	ldr	r0, [r4, #8]
 80050e4:	f7ff ff7c 	bl	8004fe0 <std>
 80050e8:	2202      	movs	r2, #2
 80050ea:	2112      	movs	r1, #18
 80050ec:	68e0      	ldr	r0, [r4, #12]
 80050ee:	f7ff ff77 	bl	8004fe0 <std>
 80050f2:	2301      	movs	r3, #1
 80050f4:	61a3      	str	r3, [r4, #24]
 80050f6:	e7d1      	b.n	800509c <__sinit+0xc>
 80050f8:	08005f54 	.word	0x08005f54
 80050fc:	08005029 	.word	0x08005029

08005100 <__sfp>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	4607      	mov	r7, r0
 8005104:	f7ff ffac 	bl	8005060 <__sfp_lock_acquire>
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <__sfp+0x84>)
 800510a:	681e      	ldr	r6, [r3, #0]
 800510c:	69b3      	ldr	r3, [r6, #24]
 800510e:	b913      	cbnz	r3, 8005116 <__sfp+0x16>
 8005110:	4630      	mov	r0, r6
 8005112:	f7ff ffbd 	bl	8005090 <__sinit>
 8005116:	3648      	adds	r6, #72	; 0x48
 8005118:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800511c:	3b01      	subs	r3, #1
 800511e:	d503      	bpl.n	8005128 <__sfp+0x28>
 8005120:	6833      	ldr	r3, [r6, #0]
 8005122:	b30b      	cbz	r3, 8005168 <__sfp+0x68>
 8005124:	6836      	ldr	r6, [r6, #0]
 8005126:	e7f7      	b.n	8005118 <__sfp+0x18>
 8005128:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800512c:	b9d5      	cbnz	r5, 8005164 <__sfp+0x64>
 800512e:	4b16      	ldr	r3, [pc, #88]	; (8005188 <__sfp+0x88>)
 8005130:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005134:	60e3      	str	r3, [r4, #12]
 8005136:	6665      	str	r5, [r4, #100]	; 0x64
 8005138:	f000 f847 	bl	80051ca <__retarget_lock_init_recursive>
 800513c:	f7ff ff96 	bl	800506c <__sfp_lock_release>
 8005140:	2208      	movs	r2, #8
 8005142:	4629      	mov	r1, r5
 8005144:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005148:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800514c:	6025      	str	r5, [r4, #0]
 800514e:	61a5      	str	r5, [r4, #24]
 8005150:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005154:	f7ff ff24 	bl	8004fa0 <memset>
 8005158:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800515c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005160:	4620      	mov	r0, r4
 8005162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005164:	3468      	adds	r4, #104	; 0x68
 8005166:	e7d9      	b.n	800511c <__sfp+0x1c>
 8005168:	2104      	movs	r1, #4
 800516a:	4638      	mov	r0, r7
 800516c:	f7ff ff62 	bl	8005034 <__sfmoreglue>
 8005170:	4604      	mov	r4, r0
 8005172:	6030      	str	r0, [r6, #0]
 8005174:	2800      	cmp	r0, #0
 8005176:	d1d5      	bne.n	8005124 <__sfp+0x24>
 8005178:	f7ff ff78 	bl	800506c <__sfp_lock_release>
 800517c:	230c      	movs	r3, #12
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	e7ee      	b.n	8005160 <__sfp+0x60>
 8005182:	bf00      	nop
 8005184:	08005f54 	.word	0x08005f54
 8005188:	ffff0001 	.word	0xffff0001

0800518c <_fwalk_reent>:
 800518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005190:	4606      	mov	r6, r0
 8005192:	4688      	mov	r8, r1
 8005194:	2700      	movs	r7, #0
 8005196:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800519a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800519e:	f1b9 0901 	subs.w	r9, r9, #1
 80051a2:	d505      	bpl.n	80051b0 <_fwalk_reent+0x24>
 80051a4:	6824      	ldr	r4, [r4, #0]
 80051a6:	2c00      	cmp	r4, #0
 80051a8:	d1f7      	bne.n	800519a <_fwalk_reent+0xe>
 80051aa:	4638      	mov	r0, r7
 80051ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b0:	89ab      	ldrh	r3, [r5, #12]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d907      	bls.n	80051c6 <_fwalk_reent+0x3a>
 80051b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051ba:	3301      	adds	r3, #1
 80051bc:	d003      	beq.n	80051c6 <_fwalk_reent+0x3a>
 80051be:	4629      	mov	r1, r5
 80051c0:	4630      	mov	r0, r6
 80051c2:	47c0      	blx	r8
 80051c4:	4307      	orrs	r7, r0
 80051c6:	3568      	adds	r5, #104	; 0x68
 80051c8:	e7e9      	b.n	800519e <_fwalk_reent+0x12>

080051ca <__retarget_lock_init_recursive>:
 80051ca:	4770      	bx	lr

080051cc <__retarget_lock_acquire_recursive>:
 80051cc:	4770      	bx	lr

080051ce <__retarget_lock_release_recursive>:
 80051ce:	4770      	bx	lr

080051d0 <sbrk_aligned>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4e0e      	ldr	r6, [pc, #56]	; (800520c <sbrk_aligned+0x3c>)
 80051d4:	460c      	mov	r4, r1
 80051d6:	6831      	ldr	r1, [r6, #0]
 80051d8:	4605      	mov	r5, r0
 80051da:	b911      	cbnz	r1, 80051e2 <sbrk_aligned+0x12>
 80051dc:	f000 fb7a 	bl	80058d4 <_sbrk_r>
 80051e0:	6030      	str	r0, [r6, #0]
 80051e2:	4621      	mov	r1, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 fb75 	bl	80058d4 <_sbrk_r>
 80051ea:	1c43      	adds	r3, r0, #1
 80051ec:	d00a      	beq.n	8005204 <sbrk_aligned+0x34>
 80051ee:	1cc4      	adds	r4, r0, #3
 80051f0:	f024 0403 	bic.w	r4, r4, #3
 80051f4:	42a0      	cmp	r0, r4
 80051f6:	d007      	beq.n	8005208 <sbrk_aligned+0x38>
 80051f8:	1a21      	subs	r1, r4, r0
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 fb6a 	bl	80058d4 <_sbrk_r>
 8005200:	3001      	adds	r0, #1
 8005202:	d101      	bne.n	8005208 <sbrk_aligned+0x38>
 8005204:	f04f 34ff 	mov.w	r4, #4294967295
 8005208:	4620      	mov	r0, r4
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	2000024c 	.word	0x2000024c

08005210 <_malloc_r>:
 8005210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005214:	1ccd      	adds	r5, r1, #3
 8005216:	f025 0503 	bic.w	r5, r5, #3
 800521a:	3508      	adds	r5, #8
 800521c:	2d0c      	cmp	r5, #12
 800521e:	bf38      	it	cc
 8005220:	250c      	movcc	r5, #12
 8005222:	2d00      	cmp	r5, #0
 8005224:	4607      	mov	r7, r0
 8005226:	db01      	blt.n	800522c <_malloc_r+0x1c>
 8005228:	42a9      	cmp	r1, r5
 800522a:	d905      	bls.n	8005238 <_malloc_r+0x28>
 800522c:	230c      	movs	r3, #12
 800522e:	2600      	movs	r6, #0
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	4630      	mov	r0, r6
 8005234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005238:	4e2e      	ldr	r6, [pc, #184]	; (80052f4 <_malloc_r+0xe4>)
 800523a:	f000 fdc5 	bl	8005dc8 <__malloc_lock>
 800523e:	6833      	ldr	r3, [r6, #0]
 8005240:	461c      	mov	r4, r3
 8005242:	bb34      	cbnz	r4, 8005292 <_malloc_r+0x82>
 8005244:	4629      	mov	r1, r5
 8005246:	4638      	mov	r0, r7
 8005248:	f7ff ffc2 	bl	80051d0 <sbrk_aligned>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	4604      	mov	r4, r0
 8005250:	d14d      	bne.n	80052ee <_malloc_r+0xde>
 8005252:	6834      	ldr	r4, [r6, #0]
 8005254:	4626      	mov	r6, r4
 8005256:	2e00      	cmp	r6, #0
 8005258:	d140      	bne.n	80052dc <_malloc_r+0xcc>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	4631      	mov	r1, r6
 800525e:	4638      	mov	r0, r7
 8005260:	eb04 0803 	add.w	r8, r4, r3
 8005264:	f000 fb36 	bl	80058d4 <_sbrk_r>
 8005268:	4580      	cmp	r8, r0
 800526a:	d13a      	bne.n	80052e2 <_malloc_r+0xd2>
 800526c:	6821      	ldr	r1, [r4, #0]
 800526e:	3503      	adds	r5, #3
 8005270:	1a6d      	subs	r5, r5, r1
 8005272:	f025 0503 	bic.w	r5, r5, #3
 8005276:	3508      	adds	r5, #8
 8005278:	2d0c      	cmp	r5, #12
 800527a:	bf38      	it	cc
 800527c:	250c      	movcc	r5, #12
 800527e:	4638      	mov	r0, r7
 8005280:	4629      	mov	r1, r5
 8005282:	f7ff ffa5 	bl	80051d0 <sbrk_aligned>
 8005286:	3001      	adds	r0, #1
 8005288:	d02b      	beq.n	80052e2 <_malloc_r+0xd2>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	442b      	add	r3, r5
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	e00e      	b.n	80052b0 <_malloc_r+0xa0>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	1b52      	subs	r2, r2, r5
 8005296:	d41e      	bmi.n	80052d6 <_malloc_r+0xc6>
 8005298:	2a0b      	cmp	r2, #11
 800529a:	d916      	bls.n	80052ca <_malloc_r+0xba>
 800529c:	1961      	adds	r1, r4, r5
 800529e:	42a3      	cmp	r3, r4
 80052a0:	6025      	str	r5, [r4, #0]
 80052a2:	bf18      	it	ne
 80052a4:	6059      	strne	r1, [r3, #4]
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	bf08      	it	eq
 80052aa:	6031      	streq	r1, [r6, #0]
 80052ac:	5162      	str	r2, [r4, r5]
 80052ae:	604b      	str	r3, [r1, #4]
 80052b0:	4638      	mov	r0, r7
 80052b2:	f104 060b 	add.w	r6, r4, #11
 80052b6:	f000 fd8d 	bl	8005dd4 <__malloc_unlock>
 80052ba:	f026 0607 	bic.w	r6, r6, #7
 80052be:	1d23      	adds	r3, r4, #4
 80052c0:	1af2      	subs	r2, r6, r3
 80052c2:	d0b6      	beq.n	8005232 <_malloc_r+0x22>
 80052c4:	1b9b      	subs	r3, r3, r6
 80052c6:	50a3      	str	r3, [r4, r2]
 80052c8:	e7b3      	b.n	8005232 <_malloc_r+0x22>
 80052ca:	6862      	ldr	r2, [r4, #4]
 80052cc:	42a3      	cmp	r3, r4
 80052ce:	bf0c      	ite	eq
 80052d0:	6032      	streq	r2, [r6, #0]
 80052d2:	605a      	strne	r2, [r3, #4]
 80052d4:	e7ec      	b.n	80052b0 <_malloc_r+0xa0>
 80052d6:	4623      	mov	r3, r4
 80052d8:	6864      	ldr	r4, [r4, #4]
 80052da:	e7b2      	b.n	8005242 <_malloc_r+0x32>
 80052dc:	4634      	mov	r4, r6
 80052de:	6876      	ldr	r6, [r6, #4]
 80052e0:	e7b9      	b.n	8005256 <_malloc_r+0x46>
 80052e2:	230c      	movs	r3, #12
 80052e4:	4638      	mov	r0, r7
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	f000 fd74 	bl	8005dd4 <__malloc_unlock>
 80052ec:	e7a1      	b.n	8005232 <_malloc_r+0x22>
 80052ee:	6025      	str	r5, [r4, #0]
 80052f0:	e7de      	b.n	80052b0 <_malloc_r+0xa0>
 80052f2:	bf00      	nop
 80052f4:	20000248 	.word	0x20000248

080052f8 <__sfputc_r>:
 80052f8:	6893      	ldr	r3, [r2, #8]
 80052fa:	b410      	push	{r4}
 80052fc:	3b01      	subs	r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	6093      	str	r3, [r2, #8]
 8005302:	da07      	bge.n	8005314 <__sfputc_r+0x1c>
 8005304:	6994      	ldr	r4, [r2, #24]
 8005306:	42a3      	cmp	r3, r4
 8005308:	db01      	blt.n	800530e <__sfputc_r+0x16>
 800530a:	290a      	cmp	r1, #10
 800530c:	d102      	bne.n	8005314 <__sfputc_r+0x1c>
 800530e:	bc10      	pop	{r4}
 8005310:	f000 bb34 	b.w	800597c <__swbuf_r>
 8005314:	6813      	ldr	r3, [r2, #0]
 8005316:	1c58      	adds	r0, r3, #1
 8005318:	6010      	str	r0, [r2, #0]
 800531a:	7019      	strb	r1, [r3, #0]
 800531c:	4608      	mov	r0, r1
 800531e:	bc10      	pop	{r4}
 8005320:	4770      	bx	lr

08005322 <__sfputs_r>:
 8005322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005324:	4606      	mov	r6, r0
 8005326:	460f      	mov	r7, r1
 8005328:	4614      	mov	r4, r2
 800532a:	18d5      	adds	r5, r2, r3
 800532c:	42ac      	cmp	r4, r5
 800532e:	d101      	bne.n	8005334 <__sfputs_r+0x12>
 8005330:	2000      	movs	r0, #0
 8005332:	e007      	b.n	8005344 <__sfputs_r+0x22>
 8005334:	463a      	mov	r2, r7
 8005336:	4630      	mov	r0, r6
 8005338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533c:	f7ff ffdc 	bl	80052f8 <__sfputc_r>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d1f3      	bne.n	800532c <__sfputs_r+0xa>
 8005344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005348 <_vfiprintf_r>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	460d      	mov	r5, r1
 800534e:	4614      	mov	r4, r2
 8005350:	4698      	mov	r8, r3
 8005352:	4606      	mov	r6, r0
 8005354:	b09d      	sub	sp, #116	; 0x74
 8005356:	b118      	cbz	r0, 8005360 <_vfiprintf_r+0x18>
 8005358:	6983      	ldr	r3, [r0, #24]
 800535a:	b90b      	cbnz	r3, 8005360 <_vfiprintf_r+0x18>
 800535c:	f7ff fe98 	bl	8005090 <__sinit>
 8005360:	4b89      	ldr	r3, [pc, #548]	; (8005588 <_vfiprintf_r+0x240>)
 8005362:	429d      	cmp	r5, r3
 8005364:	d11b      	bne.n	800539e <_vfiprintf_r+0x56>
 8005366:	6875      	ldr	r5, [r6, #4]
 8005368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800536a:	07d9      	lsls	r1, r3, #31
 800536c:	d405      	bmi.n	800537a <_vfiprintf_r+0x32>
 800536e:	89ab      	ldrh	r3, [r5, #12]
 8005370:	059a      	lsls	r2, r3, #22
 8005372:	d402      	bmi.n	800537a <_vfiprintf_r+0x32>
 8005374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005376:	f7ff ff29 	bl	80051cc <__retarget_lock_acquire_recursive>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	071b      	lsls	r3, r3, #28
 800537e:	d501      	bpl.n	8005384 <_vfiprintf_r+0x3c>
 8005380:	692b      	ldr	r3, [r5, #16]
 8005382:	b9eb      	cbnz	r3, 80053c0 <_vfiprintf_r+0x78>
 8005384:	4629      	mov	r1, r5
 8005386:	4630      	mov	r0, r6
 8005388:	f000 fb5c 	bl	8005a44 <__swsetup_r>
 800538c:	b1c0      	cbz	r0, 80053c0 <_vfiprintf_r+0x78>
 800538e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005390:	07dc      	lsls	r4, r3, #31
 8005392:	d50e      	bpl.n	80053b2 <_vfiprintf_r+0x6a>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	b01d      	add	sp, #116	; 0x74
 800539a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800539e:	4b7b      	ldr	r3, [pc, #492]	; (800558c <_vfiprintf_r+0x244>)
 80053a0:	429d      	cmp	r5, r3
 80053a2:	d101      	bne.n	80053a8 <_vfiprintf_r+0x60>
 80053a4:	68b5      	ldr	r5, [r6, #8]
 80053a6:	e7df      	b.n	8005368 <_vfiprintf_r+0x20>
 80053a8:	4b79      	ldr	r3, [pc, #484]	; (8005590 <_vfiprintf_r+0x248>)
 80053aa:	429d      	cmp	r5, r3
 80053ac:	bf08      	it	eq
 80053ae:	68f5      	ldreq	r5, [r6, #12]
 80053b0:	e7da      	b.n	8005368 <_vfiprintf_r+0x20>
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	0598      	lsls	r0, r3, #22
 80053b6:	d4ed      	bmi.n	8005394 <_vfiprintf_r+0x4c>
 80053b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ba:	f7ff ff08 	bl	80051ce <__retarget_lock_release_recursive>
 80053be:	e7e9      	b.n	8005394 <_vfiprintf_r+0x4c>
 80053c0:	2300      	movs	r3, #0
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	2320      	movs	r3, #32
 80053c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ca:	2330      	movs	r3, #48	; 0x30
 80053cc:	f04f 0901 	mov.w	r9, #1
 80053d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005594 <_vfiprintf_r+0x24c>
 80053d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053dc:	4623      	mov	r3, r4
 80053de:	469a      	mov	sl, r3
 80053e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e4:	b10a      	cbz	r2, 80053ea <_vfiprintf_r+0xa2>
 80053e6:	2a25      	cmp	r2, #37	; 0x25
 80053e8:	d1f9      	bne.n	80053de <_vfiprintf_r+0x96>
 80053ea:	ebba 0b04 	subs.w	fp, sl, r4
 80053ee:	d00b      	beq.n	8005408 <_vfiprintf_r+0xc0>
 80053f0:	465b      	mov	r3, fp
 80053f2:	4622      	mov	r2, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	4630      	mov	r0, r6
 80053f8:	f7ff ff93 	bl	8005322 <__sfputs_r>
 80053fc:	3001      	adds	r0, #1
 80053fe:	f000 80aa 	beq.w	8005556 <_vfiprintf_r+0x20e>
 8005402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005404:	445a      	add	r2, fp
 8005406:	9209      	str	r2, [sp, #36]	; 0x24
 8005408:	f89a 3000 	ldrb.w	r3, [sl]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80a2 	beq.w	8005556 <_vfiprintf_r+0x20e>
 8005412:	2300      	movs	r3, #0
 8005414:	f04f 32ff 	mov.w	r2, #4294967295
 8005418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800541c:	f10a 0a01 	add.w	sl, sl, #1
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	9307      	str	r3, [sp, #28]
 8005424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005428:	931a      	str	r3, [sp, #104]	; 0x68
 800542a:	4654      	mov	r4, sl
 800542c:	2205      	movs	r2, #5
 800542e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005432:	4858      	ldr	r0, [pc, #352]	; (8005594 <_vfiprintf_r+0x24c>)
 8005434:	f000 fcba 	bl	8005dac <memchr>
 8005438:	9a04      	ldr	r2, [sp, #16]
 800543a:	b9d8      	cbnz	r0, 8005474 <_vfiprintf_r+0x12c>
 800543c:	06d1      	lsls	r1, r2, #27
 800543e:	bf44      	itt	mi
 8005440:	2320      	movmi	r3, #32
 8005442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005446:	0713      	lsls	r3, r2, #28
 8005448:	bf44      	itt	mi
 800544a:	232b      	movmi	r3, #43	; 0x2b
 800544c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005450:	f89a 3000 	ldrb.w	r3, [sl]
 8005454:	2b2a      	cmp	r3, #42	; 0x2a
 8005456:	d015      	beq.n	8005484 <_vfiprintf_r+0x13c>
 8005458:	4654      	mov	r4, sl
 800545a:	2000      	movs	r0, #0
 800545c:	f04f 0c0a 	mov.w	ip, #10
 8005460:	9a07      	ldr	r2, [sp, #28]
 8005462:	4621      	mov	r1, r4
 8005464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005468:	3b30      	subs	r3, #48	; 0x30
 800546a:	2b09      	cmp	r3, #9
 800546c:	d94e      	bls.n	800550c <_vfiprintf_r+0x1c4>
 800546e:	b1b0      	cbz	r0, 800549e <_vfiprintf_r+0x156>
 8005470:	9207      	str	r2, [sp, #28]
 8005472:	e014      	b.n	800549e <_vfiprintf_r+0x156>
 8005474:	eba0 0308 	sub.w	r3, r0, r8
 8005478:	fa09 f303 	lsl.w	r3, r9, r3
 800547c:	4313      	orrs	r3, r2
 800547e:	46a2      	mov	sl, r4
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	e7d2      	b.n	800542a <_vfiprintf_r+0xe2>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	1d19      	adds	r1, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	9103      	str	r1, [sp, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	bfbb      	ittet	lt
 8005490:	425b      	neglt	r3, r3
 8005492:	f042 0202 	orrlt.w	r2, r2, #2
 8005496:	9307      	strge	r3, [sp, #28]
 8005498:	9307      	strlt	r3, [sp, #28]
 800549a:	bfb8      	it	lt
 800549c:	9204      	strlt	r2, [sp, #16]
 800549e:	7823      	ldrb	r3, [r4, #0]
 80054a0:	2b2e      	cmp	r3, #46	; 0x2e
 80054a2:	d10c      	bne.n	80054be <_vfiprintf_r+0x176>
 80054a4:	7863      	ldrb	r3, [r4, #1]
 80054a6:	2b2a      	cmp	r3, #42	; 0x2a
 80054a8:	d135      	bne.n	8005516 <_vfiprintf_r+0x1ce>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	3402      	adds	r4, #2
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	9203      	str	r2, [sp, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bfb8      	it	lt
 80054b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005598 <_vfiprintf_r+0x250>
 80054c2:	2203      	movs	r2, #3
 80054c4:	4650      	mov	r0, sl
 80054c6:	7821      	ldrb	r1, [r4, #0]
 80054c8:	f000 fc70 	bl	8005dac <memchr>
 80054cc:	b140      	cbz	r0, 80054e0 <_vfiprintf_r+0x198>
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	eba0 000a 	sub.w	r0, r0, sl
 80054d4:	fa03 f000 	lsl.w	r0, r3, r0
 80054d8:	9b04      	ldr	r3, [sp, #16]
 80054da:	3401      	adds	r4, #1
 80054dc:	4303      	orrs	r3, r0
 80054de:	9304      	str	r3, [sp, #16]
 80054e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e4:	2206      	movs	r2, #6
 80054e6:	482d      	ldr	r0, [pc, #180]	; (800559c <_vfiprintf_r+0x254>)
 80054e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ec:	f000 fc5e 	bl	8005dac <memchr>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d03f      	beq.n	8005574 <_vfiprintf_r+0x22c>
 80054f4:	4b2a      	ldr	r3, [pc, #168]	; (80055a0 <_vfiprintf_r+0x258>)
 80054f6:	bb1b      	cbnz	r3, 8005540 <_vfiprintf_r+0x1f8>
 80054f8:	9b03      	ldr	r3, [sp, #12]
 80054fa:	3307      	adds	r3, #7
 80054fc:	f023 0307 	bic.w	r3, r3, #7
 8005500:	3308      	adds	r3, #8
 8005502:	9303      	str	r3, [sp, #12]
 8005504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005506:	443b      	add	r3, r7
 8005508:	9309      	str	r3, [sp, #36]	; 0x24
 800550a:	e767      	b.n	80053dc <_vfiprintf_r+0x94>
 800550c:	460c      	mov	r4, r1
 800550e:	2001      	movs	r0, #1
 8005510:	fb0c 3202 	mla	r2, ip, r2, r3
 8005514:	e7a5      	b.n	8005462 <_vfiprintf_r+0x11a>
 8005516:	2300      	movs	r3, #0
 8005518:	f04f 0c0a 	mov.w	ip, #10
 800551c:	4619      	mov	r1, r3
 800551e:	3401      	adds	r4, #1
 8005520:	9305      	str	r3, [sp, #20]
 8005522:	4620      	mov	r0, r4
 8005524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005528:	3a30      	subs	r2, #48	; 0x30
 800552a:	2a09      	cmp	r2, #9
 800552c:	d903      	bls.n	8005536 <_vfiprintf_r+0x1ee>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0c5      	beq.n	80054be <_vfiprintf_r+0x176>
 8005532:	9105      	str	r1, [sp, #20]
 8005534:	e7c3      	b.n	80054be <_vfiprintf_r+0x176>
 8005536:	4604      	mov	r4, r0
 8005538:	2301      	movs	r3, #1
 800553a:	fb0c 2101 	mla	r1, ip, r1, r2
 800553e:	e7f0      	b.n	8005522 <_vfiprintf_r+0x1da>
 8005540:	ab03      	add	r3, sp, #12
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	462a      	mov	r2, r5
 8005546:	4630      	mov	r0, r6
 8005548:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <_vfiprintf_r+0x25c>)
 800554a:	a904      	add	r1, sp, #16
 800554c:	f3af 8000 	nop.w
 8005550:	4607      	mov	r7, r0
 8005552:	1c78      	adds	r0, r7, #1
 8005554:	d1d6      	bne.n	8005504 <_vfiprintf_r+0x1bc>
 8005556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005558:	07d9      	lsls	r1, r3, #31
 800555a:	d405      	bmi.n	8005568 <_vfiprintf_r+0x220>
 800555c:	89ab      	ldrh	r3, [r5, #12]
 800555e:	059a      	lsls	r2, r3, #22
 8005560:	d402      	bmi.n	8005568 <_vfiprintf_r+0x220>
 8005562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005564:	f7ff fe33 	bl	80051ce <__retarget_lock_release_recursive>
 8005568:	89ab      	ldrh	r3, [r5, #12]
 800556a:	065b      	lsls	r3, r3, #25
 800556c:	f53f af12 	bmi.w	8005394 <_vfiprintf_r+0x4c>
 8005570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005572:	e711      	b.n	8005398 <_vfiprintf_r+0x50>
 8005574:	ab03      	add	r3, sp, #12
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	462a      	mov	r2, r5
 800557a:	4630      	mov	r0, r6
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <_vfiprintf_r+0x25c>)
 800557e:	a904      	add	r1, sp, #16
 8005580:	f000 f882 	bl	8005688 <_printf_i>
 8005584:	e7e4      	b.n	8005550 <_vfiprintf_r+0x208>
 8005586:	bf00      	nop
 8005588:	08005f78 	.word	0x08005f78
 800558c:	08005f98 	.word	0x08005f98
 8005590:	08005f58 	.word	0x08005f58
 8005594:	08005fb8 	.word	0x08005fb8
 8005598:	08005fbe 	.word	0x08005fbe
 800559c:	08005fc2 	.word	0x08005fc2
 80055a0:	00000000 	.word	0x00000000
 80055a4:	08005323 	.word	0x08005323

080055a8 <_printf_common>:
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	4616      	mov	r6, r2
 80055ae:	4699      	mov	r9, r3
 80055b0:	688a      	ldr	r2, [r1, #8]
 80055b2:	690b      	ldr	r3, [r1, #16]
 80055b4:	4607      	mov	r7, r0
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bfb8      	it	lt
 80055ba:	4613      	movlt	r3, r2
 80055bc:	6033      	str	r3, [r6, #0]
 80055be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055c2:	460c      	mov	r4, r1
 80055c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055c8:	b10a      	cbz	r2, 80055ce <_printf_common+0x26>
 80055ca:	3301      	adds	r3, #1
 80055cc:	6033      	str	r3, [r6, #0]
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	0699      	lsls	r1, r3, #26
 80055d2:	bf42      	ittt	mi
 80055d4:	6833      	ldrmi	r3, [r6, #0]
 80055d6:	3302      	addmi	r3, #2
 80055d8:	6033      	strmi	r3, [r6, #0]
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	f015 0506 	ands.w	r5, r5, #6
 80055e0:	d106      	bne.n	80055f0 <_printf_common+0x48>
 80055e2:	f104 0a19 	add.w	sl, r4, #25
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	6832      	ldr	r2, [r6, #0]
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	42ab      	cmp	r3, r5
 80055ee:	dc28      	bgt.n	8005642 <_printf_common+0x9a>
 80055f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055f4:	1e13      	subs	r3, r2, #0
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	bf18      	it	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	0692      	lsls	r2, r2, #26
 80055fe:	d42d      	bmi.n	800565c <_printf_common+0xb4>
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005608:	47c0      	blx	r8
 800560a:	3001      	adds	r0, #1
 800560c:	d020      	beq.n	8005650 <_printf_common+0xa8>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	68e5      	ldr	r5, [r4, #12]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	2b04      	cmp	r3, #4
 8005618:	bf18      	it	ne
 800561a:	2500      	movne	r5, #0
 800561c:	6832      	ldr	r2, [r6, #0]
 800561e:	f04f 0600 	mov.w	r6, #0
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	bf08      	it	eq
 8005626:	1aad      	subeq	r5, r5, r2
 8005628:	6922      	ldr	r2, [r4, #16]
 800562a:	bf08      	it	eq
 800562c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005630:	4293      	cmp	r3, r2
 8005632:	bfc4      	itt	gt
 8005634:	1a9b      	subgt	r3, r3, r2
 8005636:	18ed      	addgt	r5, r5, r3
 8005638:	341a      	adds	r4, #26
 800563a:	42b5      	cmp	r5, r6
 800563c:	d11a      	bne.n	8005674 <_printf_common+0xcc>
 800563e:	2000      	movs	r0, #0
 8005640:	e008      	b.n	8005654 <_printf_common+0xac>
 8005642:	2301      	movs	r3, #1
 8005644:	4652      	mov	r2, sl
 8005646:	4649      	mov	r1, r9
 8005648:	4638      	mov	r0, r7
 800564a:	47c0      	blx	r8
 800564c:	3001      	adds	r0, #1
 800564e:	d103      	bne.n	8005658 <_printf_common+0xb0>
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005658:	3501      	adds	r5, #1
 800565a:	e7c4      	b.n	80055e6 <_printf_common+0x3e>
 800565c:	2030      	movs	r0, #48	; 0x30
 800565e:	18e1      	adds	r1, r4, r3
 8005660:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800566a:	4422      	add	r2, r4
 800566c:	3302      	adds	r3, #2
 800566e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005672:	e7c5      	b.n	8005600 <_printf_common+0x58>
 8005674:	2301      	movs	r3, #1
 8005676:	4622      	mov	r2, r4
 8005678:	4649      	mov	r1, r9
 800567a:	4638      	mov	r0, r7
 800567c:	47c0      	blx	r8
 800567e:	3001      	adds	r0, #1
 8005680:	d0e6      	beq.n	8005650 <_printf_common+0xa8>
 8005682:	3601      	adds	r6, #1
 8005684:	e7d9      	b.n	800563a <_printf_common+0x92>
	...

08005688 <_printf_i>:
 8005688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	7e0f      	ldrb	r7, [r1, #24]
 800568e:	4691      	mov	r9, r2
 8005690:	2f78      	cmp	r7, #120	; 0x78
 8005692:	4680      	mov	r8, r0
 8005694:	460c      	mov	r4, r1
 8005696:	469a      	mov	sl, r3
 8005698:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800569a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800569e:	d807      	bhi.n	80056b0 <_printf_i+0x28>
 80056a0:	2f62      	cmp	r7, #98	; 0x62
 80056a2:	d80a      	bhi.n	80056ba <_printf_i+0x32>
 80056a4:	2f00      	cmp	r7, #0
 80056a6:	f000 80d9 	beq.w	800585c <_printf_i+0x1d4>
 80056aa:	2f58      	cmp	r7, #88	; 0x58
 80056ac:	f000 80a4 	beq.w	80057f8 <_printf_i+0x170>
 80056b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056b8:	e03a      	b.n	8005730 <_printf_i+0xa8>
 80056ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056be:	2b15      	cmp	r3, #21
 80056c0:	d8f6      	bhi.n	80056b0 <_printf_i+0x28>
 80056c2:	a101      	add	r1, pc, #4	; (adr r1, 80056c8 <_printf_i+0x40>)
 80056c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c8:	08005721 	.word	0x08005721
 80056cc:	08005735 	.word	0x08005735
 80056d0:	080056b1 	.word	0x080056b1
 80056d4:	080056b1 	.word	0x080056b1
 80056d8:	080056b1 	.word	0x080056b1
 80056dc:	080056b1 	.word	0x080056b1
 80056e0:	08005735 	.word	0x08005735
 80056e4:	080056b1 	.word	0x080056b1
 80056e8:	080056b1 	.word	0x080056b1
 80056ec:	080056b1 	.word	0x080056b1
 80056f0:	080056b1 	.word	0x080056b1
 80056f4:	08005843 	.word	0x08005843
 80056f8:	08005765 	.word	0x08005765
 80056fc:	08005825 	.word	0x08005825
 8005700:	080056b1 	.word	0x080056b1
 8005704:	080056b1 	.word	0x080056b1
 8005708:	08005865 	.word	0x08005865
 800570c:	080056b1 	.word	0x080056b1
 8005710:	08005765 	.word	0x08005765
 8005714:	080056b1 	.word	0x080056b1
 8005718:	080056b1 	.word	0x080056b1
 800571c:	0800582d 	.word	0x0800582d
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	602a      	str	r2, [r5, #0]
 8005728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800572c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005730:	2301      	movs	r3, #1
 8005732:	e0a4      	b.n	800587e <_printf_i+0x1f6>
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	6829      	ldr	r1, [r5, #0]
 8005738:	0606      	lsls	r6, r0, #24
 800573a:	f101 0304 	add.w	r3, r1, #4
 800573e:	d50a      	bpl.n	8005756 <_printf_i+0xce>
 8005740:	680e      	ldr	r6, [r1, #0]
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	2e00      	cmp	r6, #0
 8005746:	da03      	bge.n	8005750 <_printf_i+0xc8>
 8005748:	232d      	movs	r3, #45	; 0x2d
 800574a:	4276      	negs	r6, r6
 800574c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005750:	230a      	movs	r3, #10
 8005752:	485e      	ldr	r0, [pc, #376]	; (80058cc <_printf_i+0x244>)
 8005754:	e019      	b.n	800578a <_printf_i+0x102>
 8005756:	680e      	ldr	r6, [r1, #0]
 8005758:	f010 0f40 	tst.w	r0, #64	; 0x40
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	bf18      	it	ne
 8005760:	b236      	sxthne	r6, r6
 8005762:	e7ef      	b.n	8005744 <_printf_i+0xbc>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	1d19      	adds	r1, r3, #4
 800576a:	6029      	str	r1, [r5, #0]
 800576c:	0601      	lsls	r1, r0, #24
 800576e:	d501      	bpl.n	8005774 <_printf_i+0xec>
 8005770:	681e      	ldr	r6, [r3, #0]
 8005772:	e002      	b.n	800577a <_printf_i+0xf2>
 8005774:	0646      	lsls	r6, r0, #25
 8005776:	d5fb      	bpl.n	8005770 <_printf_i+0xe8>
 8005778:	881e      	ldrh	r6, [r3, #0]
 800577a:	2f6f      	cmp	r7, #111	; 0x6f
 800577c:	bf0c      	ite	eq
 800577e:	2308      	moveq	r3, #8
 8005780:	230a      	movne	r3, #10
 8005782:	4852      	ldr	r0, [pc, #328]	; (80058cc <_printf_i+0x244>)
 8005784:	2100      	movs	r1, #0
 8005786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800578a:	6865      	ldr	r5, [r4, #4]
 800578c:	2d00      	cmp	r5, #0
 800578e:	bfa8      	it	ge
 8005790:	6821      	ldrge	r1, [r4, #0]
 8005792:	60a5      	str	r5, [r4, #8]
 8005794:	bfa4      	itt	ge
 8005796:	f021 0104 	bicge.w	r1, r1, #4
 800579a:	6021      	strge	r1, [r4, #0]
 800579c:	b90e      	cbnz	r6, 80057a2 <_printf_i+0x11a>
 800579e:	2d00      	cmp	r5, #0
 80057a0:	d04d      	beq.n	800583e <_printf_i+0x1b6>
 80057a2:	4615      	mov	r5, r2
 80057a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80057a8:	fb03 6711 	mls	r7, r3, r1, r6
 80057ac:	5dc7      	ldrb	r7, [r0, r7]
 80057ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057b2:	4637      	mov	r7, r6
 80057b4:	42bb      	cmp	r3, r7
 80057b6:	460e      	mov	r6, r1
 80057b8:	d9f4      	bls.n	80057a4 <_printf_i+0x11c>
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d10b      	bne.n	80057d6 <_printf_i+0x14e>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	07de      	lsls	r6, r3, #31
 80057c2:	d508      	bpl.n	80057d6 <_printf_i+0x14e>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	6861      	ldr	r1, [r4, #4]
 80057c8:	4299      	cmp	r1, r3
 80057ca:	bfde      	ittt	le
 80057cc:	2330      	movle	r3, #48	; 0x30
 80057ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057d6:	1b52      	subs	r2, r2, r5
 80057d8:	6122      	str	r2, [r4, #16]
 80057da:	464b      	mov	r3, r9
 80057dc:	4621      	mov	r1, r4
 80057de:	4640      	mov	r0, r8
 80057e0:	f8cd a000 	str.w	sl, [sp]
 80057e4:	aa03      	add	r2, sp, #12
 80057e6:	f7ff fedf 	bl	80055a8 <_printf_common>
 80057ea:	3001      	adds	r0, #1
 80057ec:	d14c      	bne.n	8005888 <_printf_i+0x200>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295
 80057f2:	b004      	add	sp, #16
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	4834      	ldr	r0, [pc, #208]	; (80058cc <_printf_i+0x244>)
 80057fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057fe:	6829      	ldr	r1, [r5, #0]
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	f851 6b04 	ldr.w	r6, [r1], #4
 8005806:	6029      	str	r1, [r5, #0]
 8005808:	061d      	lsls	r5, r3, #24
 800580a:	d514      	bpl.n	8005836 <_printf_i+0x1ae>
 800580c:	07df      	lsls	r7, r3, #31
 800580e:	bf44      	itt	mi
 8005810:	f043 0320 	orrmi.w	r3, r3, #32
 8005814:	6023      	strmi	r3, [r4, #0]
 8005816:	b91e      	cbnz	r6, 8005820 <_printf_i+0x198>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f023 0320 	bic.w	r3, r3, #32
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	2310      	movs	r3, #16
 8005822:	e7af      	b.n	8005784 <_printf_i+0xfc>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	f043 0320 	orr.w	r3, r3, #32
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	2378      	movs	r3, #120	; 0x78
 800582e:	4828      	ldr	r0, [pc, #160]	; (80058d0 <_printf_i+0x248>)
 8005830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005834:	e7e3      	b.n	80057fe <_printf_i+0x176>
 8005836:	0659      	lsls	r1, r3, #25
 8005838:	bf48      	it	mi
 800583a:	b2b6      	uxthmi	r6, r6
 800583c:	e7e6      	b.n	800580c <_printf_i+0x184>
 800583e:	4615      	mov	r5, r2
 8005840:	e7bb      	b.n	80057ba <_printf_i+0x132>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	6826      	ldr	r6, [r4, #0]
 8005846:	1d18      	adds	r0, r3, #4
 8005848:	6961      	ldr	r1, [r4, #20]
 800584a:	6028      	str	r0, [r5, #0]
 800584c:	0635      	lsls	r5, r6, #24
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	d501      	bpl.n	8005856 <_printf_i+0x1ce>
 8005852:	6019      	str	r1, [r3, #0]
 8005854:	e002      	b.n	800585c <_printf_i+0x1d4>
 8005856:	0670      	lsls	r0, r6, #25
 8005858:	d5fb      	bpl.n	8005852 <_printf_i+0x1ca>
 800585a:	8019      	strh	r1, [r3, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	4615      	mov	r5, r2
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	e7ba      	b.n	80057da <_printf_i+0x152>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	2100      	movs	r1, #0
 8005868:	1d1a      	adds	r2, r3, #4
 800586a:	602a      	str	r2, [r5, #0]
 800586c:	681d      	ldr	r5, [r3, #0]
 800586e:	6862      	ldr	r2, [r4, #4]
 8005870:	4628      	mov	r0, r5
 8005872:	f000 fa9b 	bl	8005dac <memchr>
 8005876:	b108      	cbz	r0, 800587c <_printf_i+0x1f4>
 8005878:	1b40      	subs	r0, r0, r5
 800587a:	6060      	str	r0, [r4, #4]
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2300      	movs	r3, #0
 8005882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005886:	e7a8      	b.n	80057da <_printf_i+0x152>
 8005888:	462a      	mov	r2, r5
 800588a:	4649      	mov	r1, r9
 800588c:	4640      	mov	r0, r8
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	47d0      	blx	sl
 8005892:	3001      	adds	r0, #1
 8005894:	d0ab      	beq.n	80057ee <_printf_i+0x166>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	079b      	lsls	r3, r3, #30
 800589a:	d413      	bmi.n	80058c4 <_printf_i+0x23c>
 800589c:	68e0      	ldr	r0, [r4, #12]
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	4298      	cmp	r0, r3
 80058a2:	bfb8      	it	lt
 80058a4:	4618      	movlt	r0, r3
 80058a6:	e7a4      	b.n	80057f2 <_printf_i+0x16a>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4632      	mov	r2, r6
 80058ac:	4649      	mov	r1, r9
 80058ae:	4640      	mov	r0, r8
 80058b0:	47d0      	blx	sl
 80058b2:	3001      	adds	r0, #1
 80058b4:	d09b      	beq.n	80057ee <_printf_i+0x166>
 80058b6:	3501      	adds	r5, #1
 80058b8:	68e3      	ldr	r3, [r4, #12]
 80058ba:	9903      	ldr	r1, [sp, #12]
 80058bc:	1a5b      	subs	r3, r3, r1
 80058be:	42ab      	cmp	r3, r5
 80058c0:	dcf2      	bgt.n	80058a8 <_printf_i+0x220>
 80058c2:	e7eb      	b.n	800589c <_printf_i+0x214>
 80058c4:	2500      	movs	r5, #0
 80058c6:	f104 0619 	add.w	r6, r4, #25
 80058ca:	e7f5      	b.n	80058b8 <_printf_i+0x230>
 80058cc:	08005fc9 	.word	0x08005fc9
 80058d0:	08005fda 	.word	0x08005fda

080058d4 <_sbrk_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	2300      	movs	r3, #0
 80058d8:	4d05      	ldr	r5, [pc, #20]	; (80058f0 <_sbrk_r+0x1c>)
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fb ff34 	bl	800174c <_sbrk>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_sbrk_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_sbrk_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	20000250 	.word	0x20000250

080058f4 <__sread>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	460c      	mov	r4, r1
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	f000 fab8 	bl	8005e70 <_read_r>
 8005900:	2800      	cmp	r0, #0
 8005902:	bfab      	itete	ge
 8005904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005906:	89a3      	ldrhlt	r3, [r4, #12]
 8005908:	181b      	addge	r3, r3, r0
 800590a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800590e:	bfac      	ite	ge
 8005910:	6563      	strge	r3, [r4, #84]	; 0x54
 8005912:	81a3      	strhlt	r3, [r4, #12]
 8005914:	bd10      	pop	{r4, pc}

08005916 <__swrite>:
 8005916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800591a:	461f      	mov	r7, r3
 800591c:	898b      	ldrh	r3, [r1, #12]
 800591e:	4605      	mov	r5, r0
 8005920:	05db      	lsls	r3, r3, #23
 8005922:	460c      	mov	r4, r1
 8005924:	4616      	mov	r6, r2
 8005926:	d505      	bpl.n	8005934 <__swrite+0x1e>
 8005928:	2302      	movs	r3, #2
 800592a:	2200      	movs	r2, #0
 800592c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005930:	f000 f9c4 	bl	8005cbc <_lseek_r>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	4632      	mov	r2, r6
 8005938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	4628      	mov	r0, r5
 8005940:	463b      	mov	r3, r7
 8005942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800594a:	f000 b869 	b.w	8005a20 <_write_r>

0800594e <__sseek>:
 800594e:	b510      	push	{r4, lr}
 8005950:	460c      	mov	r4, r1
 8005952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005956:	f000 f9b1 	bl	8005cbc <_lseek_r>
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	bf15      	itete	ne
 8005960:	6560      	strne	r0, [r4, #84]	; 0x54
 8005962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800596a:	81a3      	strheq	r3, [r4, #12]
 800596c:	bf18      	it	ne
 800596e:	81a3      	strhne	r3, [r4, #12]
 8005970:	bd10      	pop	{r4, pc}

08005972 <__sclose>:
 8005972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005976:	f000 b8d3 	b.w	8005b20 <_close_r>
	...

0800597c <__swbuf_r>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	460e      	mov	r6, r1
 8005980:	4614      	mov	r4, r2
 8005982:	4605      	mov	r5, r0
 8005984:	b118      	cbz	r0, 800598e <__swbuf_r+0x12>
 8005986:	6983      	ldr	r3, [r0, #24]
 8005988:	b90b      	cbnz	r3, 800598e <__swbuf_r+0x12>
 800598a:	f7ff fb81 	bl	8005090 <__sinit>
 800598e:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <__swbuf_r+0x98>)
 8005990:	429c      	cmp	r4, r3
 8005992:	d12b      	bne.n	80059ec <__swbuf_r+0x70>
 8005994:	686c      	ldr	r4, [r5, #4]
 8005996:	69a3      	ldr	r3, [r4, #24]
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	071a      	lsls	r2, r3, #28
 800599e:	d52f      	bpl.n	8005a00 <__swbuf_r+0x84>
 80059a0:	6923      	ldr	r3, [r4, #16]
 80059a2:	b36b      	cbz	r3, 8005a00 <__swbuf_r+0x84>
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	b2f6      	uxtb	r6, r6
 80059aa:	1ac0      	subs	r0, r0, r3
 80059ac:	6963      	ldr	r3, [r4, #20]
 80059ae:	4637      	mov	r7, r6
 80059b0:	4283      	cmp	r3, r0
 80059b2:	dc04      	bgt.n	80059be <__swbuf_r+0x42>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f944 	bl	8005c44 <_fflush_r>
 80059bc:	bb30      	cbnz	r0, 8005a0c <__swbuf_r+0x90>
 80059be:	68a3      	ldr	r3, [r4, #8]
 80059c0:	3001      	adds	r0, #1
 80059c2:	3b01      	subs	r3, #1
 80059c4:	60a3      	str	r3, [r4, #8]
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	701e      	strb	r6, [r3, #0]
 80059ce:	6963      	ldr	r3, [r4, #20]
 80059d0:	4283      	cmp	r3, r0
 80059d2:	d004      	beq.n	80059de <__swbuf_r+0x62>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	07db      	lsls	r3, r3, #31
 80059d8:	d506      	bpl.n	80059e8 <__swbuf_r+0x6c>
 80059da:	2e0a      	cmp	r6, #10
 80059dc:	d104      	bne.n	80059e8 <__swbuf_r+0x6c>
 80059de:	4621      	mov	r1, r4
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f92f 	bl	8005c44 <_fflush_r>
 80059e6:	b988      	cbnz	r0, 8005a0c <__swbuf_r+0x90>
 80059e8:	4638      	mov	r0, r7
 80059ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <__swbuf_r+0x9c>)
 80059ee:	429c      	cmp	r4, r3
 80059f0:	d101      	bne.n	80059f6 <__swbuf_r+0x7a>
 80059f2:	68ac      	ldr	r4, [r5, #8]
 80059f4:	e7cf      	b.n	8005996 <__swbuf_r+0x1a>
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <__swbuf_r+0xa0>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	bf08      	it	eq
 80059fc:	68ec      	ldreq	r4, [r5, #12]
 80059fe:	e7ca      	b.n	8005996 <__swbuf_r+0x1a>
 8005a00:	4621      	mov	r1, r4
 8005a02:	4628      	mov	r0, r5
 8005a04:	f000 f81e 	bl	8005a44 <__swsetup_r>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d0cb      	beq.n	80059a4 <__swbuf_r+0x28>
 8005a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a10:	e7ea      	b.n	80059e8 <__swbuf_r+0x6c>
 8005a12:	bf00      	nop
 8005a14:	08005f78 	.word	0x08005f78
 8005a18:	08005f98 	.word	0x08005f98
 8005a1c:	08005f58 	.word	0x08005f58

08005a20 <_write_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4604      	mov	r4, r0
 8005a24:	4608      	mov	r0, r1
 8005a26:	4611      	mov	r1, r2
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4d05      	ldr	r5, [pc, #20]	; (8005a40 <_write_r+0x20>)
 8005a2c:	602a      	str	r2, [r5, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f7fb fe3f 	bl	80016b2 <_write>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_write_r+0x1e>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_write_r+0x1e>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	20000250 	.word	0x20000250

08005a44 <__swsetup_r>:
 8005a44:	4b32      	ldr	r3, [pc, #200]	; (8005b10 <__swsetup_r+0xcc>)
 8005a46:	b570      	push	{r4, r5, r6, lr}
 8005a48:	681d      	ldr	r5, [r3, #0]
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	b125      	cbz	r5, 8005a5a <__swsetup_r+0x16>
 8005a50:	69ab      	ldr	r3, [r5, #24]
 8005a52:	b913      	cbnz	r3, 8005a5a <__swsetup_r+0x16>
 8005a54:	4628      	mov	r0, r5
 8005a56:	f7ff fb1b 	bl	8005090 <__sinit>
 8005a5a:	4b2e      	ldr	r3, [pc, #184]	; (8005b14 <__swsetup_r+0xd0>)
 8005a5c:	429c      	cmp	r4, r3
 8005a5e:	d10f      	bne.n	8005a80 <__swsetup_r+0x3c>
 8005a60:	686c      	ldr	r4, [r5, #4]
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a68:	0719      	lsls	r1, r3, #28
 8005a6a:	d42c      	bmi.n	8005ac6 <__swsetup_r+0x82>
 8005a6c:	06dd      	lsls	r5, r3, #27
 8005a6e:	d411      	bmi.n	8005a94 <__swsetup_r+0x50>
 8005a70:	2309      	movs	r3, #9
 8005a72:	6033      	str	r3, [r6, #0]
 8005a74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	81a3      	strh	r3, [r4, #12]
 8005a7e:	e03e      	b.n	8005afe <__swsetup_r+0xba>
 8005a80:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <__swsetup_r+0xd4>)
 8005a82:	429c      	cmp	r4, r3
 8005a84:	d101      	bne.n	8005a8a <__swsetup_r+0x46>
 8005a86:	68ac      	ldr	r4, [r5, #8]
 8005a88:	e7eb      	b.n	8005a62 <__swsetup_r+0x1e>
 8005a8a:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <__swsetup_r+0xd8>)
 8005a8c:	429c      	cmp	r4, r3
 8005a8e:	bf08      	it	eq
 8005a90:	68ec      	ldreq	r4, [r5, #12]
 8005a92:	e7e6      	b.n	8005a62 <__swsetup_r+0x1e>
 8005a94:	0758      	lsls	r0, r3, #29
 8005a96:	d512      	bpl.n	8005abe <__swsetup_r+0x7a>
 8005a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a9a:	b141      	cbz	r1, 8005aae <__swsetup_r+0x6a>
 8005a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aa0:	4299      	cmp	r1, r3
 8005aa2:	d002      	beq.n	8005aaa <__swsetup_r+0x66>
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f000 f99b 	bl	8005de0 <_free_r>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6363      	str	r3, [r4, #52]	; 0x34
 8005aae:	89a3      	ldrh	r3, [r4, #12]
 8005ab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ab4:	81a3      	strh	r3, [r4, #12]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	6063      	str	r3, [r4, #4]
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f043 0308 	orr.w	r3, r3, #8
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	b94b      	cbnz	r3, 8005ade <__swsetup_r+0x9a>
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad4:	d003      	beq.n	8005ade <__swsetup_r+0x9a>
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f000 f927 	bl	8005d2c <__smakebuf_r>
 8005ade:	89a0      	ldrh	r0, [r4, #12]
 8005ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ae4:	f010 0301 	ands.w	r3, r0, #1
 8005ae8:	d00a      	beq.n	8005b00 <__swsetup_r+0xbc>
 8005aea:	2300      	movs	r3, #0
 8005aec:	60a3      	str	r3, [r4, #8]
 8005aee:	6963      	ldr	r3, [r4, #20]
 8005af0:	425b      	negs	r3, r3
 8005af2:	61a3      	str	r3, [r4, #24]
 8005af4:	6923      	ldr	r3, [r4, #16]
 8005af6:	b943      	cbnz	r3, 8005b0a <__swsetup_r+0xc6>
 8005af8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005afc:	d1ba      	bne.n	8005a74 <__swsetup_r+0x30>
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	0781      	lsls	r1, r0, #30
 8005b02:	bf58      	it	pl
 8005b04:	6963      	ldrpl	r3, [r4, #20]
 8005b06:	60a3      	str	r3, [r4, #8]
 8005b08:	e7f4      	b.n	8005af4 <__swsetup_r+0xb0>
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	e7f7      	b.n	8005afe <__swsetup_r+0xba>
 8005b0e:	bf00      	nop
 8005b10:	2000000c 	.word	0x2000000c
 8005b14:	08005f78 	.word	0x08005f78
 8005b18:	08005f98 	.word	0x08005f98
 8005b1c:	08005f58 	.word	0x08005f58

08005b20 <_close_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	2300      	movs	r3, #0
 8005b24:	4d05      	ldr	r5, [pc, #20]	; (8005b3c <_close_r+0x1c>)
 8005b26:	4604      	mov	r4, r0
 8005b28:	4608      	mov	r0, r1
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	f7fb fddd 	bl	80016ea <_close>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_close_r+0x1a>
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_close_r+0x1a>
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	20000250 	.word	0x20000250

08005b40 <__sflush_r>:
 8005b40:	898a      	ldrh	r2, [r1, #12]
 8005b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b44:	4605      	mov	r5, r0
 8005b46:	0710      	lsls	r0, r2, #28
 8005b48:	460c      	mov	r4, r1
 8005b4a:	d457      	bmi.n	8005bfc <__sflush_r+0xbc>
 8005b4c:	684b      	ldr	r3, [r1, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dc04      	bgt.n	8005b5c <__sflush_r+0x1c>
 8005b52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dc01      	bgt.n	8005b5c <__sflush_r+0x1c>
 8005b58:	2000      	movs	r0, #0
 8005b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	d0fa      	beq.n	8005b58 <__sflush_r+0x18>
 8005b62:	2300      	movs	r3, #0
 8005b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b68:	682f      	ldr	r7, [r5, #0]
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	d032      	beq.n	8005bd4 <__sflush_r+0x94>
 8005b6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	075a      	lsls	r2, r3, #29
 8005b74:	d505      	bpl.n	8005b82 <__sflush_r+0x42>
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	1ac0      	subs	r0, r0, r3
 8005b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b7c:	b10b      	cbz	r3, 8005b82 <__sflush_r+0x42>
 8005b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b80:	1ac0      	subs	r0, r0, r3
 8005b82:	2300      	movs	r3, #0
 8005b84:	4602      	mov	r2, r0
 8005b86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b88:	4628      	mov	r0, r5
 8005b8a:	6a21      	ldr	r1, [r4, #32]
 8005b8c:	47b0      	blx	r6
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	d106      	bne.n	8005ba2 <__sflush_r+0x62>
 8005b94:	6829      	ldr	r1, [r5, #0]
 8005b96:	291d      	cmp	r1, #29
 8005b98:	d82c      	bhi.n	8005bf4 <__sflush_r+0xb4>
 8005b9a:	4a29      	ldr	r2, [pc, #164]	; (8005c40 <__sflush_r+0x100>)
 8005b9c:	40ca      	lsrs	r2, r1
 8005b9e:	07d6      	lsls	r6, r2, #31
 8005ba0:	d528      	bpl.n	8005bf4 <__sflush_r+0xb4>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	6062      	str	r2, [r4, #4]
 8005ba6:	6922      	ldr	r2, [r4, #16]
 8005ba8:	04d9      	lsls	r1, r3, #19
 8005baa:	6022      	str	r2, [r4, #0]
 8005bac:	d504      	bpl.n	8005bb8 <__sflush_r+0x78>
 8005bae:	1c42      	adds	r2, r0, #1
 8005bb0:	d101      	bne.n	8005bb6 <__sflush_r+0x76>
 8005bb2:	682b      	ldr	r3, [r5, #0]
 8005bb4:	b903      	cbnz	r3, 8005bb8 <__sflush_r+0x78>
 8005bb6:	6560      	str	r0, [r4, #84]	; 0x54
 8005bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bba:	602f      	str	r7, [r5, #0]
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	d0cb      	beq.n	8005b58 <__sflush_r+0x18>
 8005bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	d002      	beq.n	8005bce <__sflush_r+0x8e>
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 f909 	bl	8005de0 <_free_r>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	6360      	str	r0, [r4, #52]	; 0x34
 8005bd2:	e7c2      	b.n	8005b5a <__sflush_r+0x1a>
 8005bd4:	6a21      	ldr	r1, [r4, #32]
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b0      	blx	r6
 8005bdc:	1c41      	adds	r1, r0, #1
 8005bde:	d1c7      	bne.n	8005b70 <__sflush_r+0x30>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0c4      	beq.n	8005b70 <__sflush_r+0x30>
 8005be6:	2b1d      	cmp	r3, #29
 8005be8:	d001      	beq.n	8005bee <__sflush_r+0xae>
 8005bea:	2b16      	cmp	r3, #22
 8005bec:	d101      	bne.n	8005bf2 <__sflush_r+0xb2>
 8005bee:	602f      	str	r7, [r5, #0]
 8005bf0:	e7b2      	b.n	8005b58 <__sflush_r+0x18>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	e7ae      	b.n	8005b5a <__sflush_r+0x1a>
 8005bfc:	690f      	ldr	r7, [r1, #16]
 8005bfe:	2f00      	cmp	r7, #0
 8005c00:	d0aa      	beq.n	8005b58 <__sflush_r+0x18>
 8005c02:	0793      	lsls	r3, r2, #30
 8005c04:	bf18      	it	ne
 8005c06:	2300      	movne	r3, #0
 8005c08:	680e      	ldr	r6, [r1, #0]
 8005c0a:	bf08      	it	eq
 8005c0c:	694b      	ldreq	r3, [r1, #20]
 8005c0e:	1bf6      	subs	r6, r6, r7
 8005c10:	600f      	str	r7, [r1, #0]
 8005c12:	608b      	str	r3, [r1, #8]
 8005c14:	2e00      	cmp	r6, #0
 8005c16:	dd9f      	ble.n	8005b58 <__sflush_r+0x18>
 8005c18:	4633      	mov	r3, r6
 8005c1a:	463a      	mov	r2, r7
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	6a21      	ldr	r1, [r4, #32]
 8005c20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005c24:	47e0      	blx	ip
 8005c26:	2800      	cmp	r0, #0
 8005c28:	dc06      	bgt.n	8005c38 <__sflush_r+0xf8>
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	e790      	b.n	8005b5a <__sflush_r+0x1a>
 8005c38:	4407      	add	r7, r0
 8005c3a:	1a36      	subs	r6, r6, r0
 8005c3c:	e7ea      	b.n	8005c14 <__sflush_r+0xd4>
 8005c3e:	bf00      	nop
 8005c40:	20400001 	.word	0x20400001

08005c44 <_fflush_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	690b      	ldr	r3, [r1, #16]
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	b913      	cbnz	r3, 8005c54 <_fflush_r+0x10>
 8005c4e:	2500      	movs	r5, #0
 8005c50:	4628      	mov	r0, r5
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	b118      	cbz	r0, 8005c5e <_fflush_r+0x1a>
 8005c56:	6983      	ldr	r3, [r0, #24]
 8005c58:	b90b      	cbnz	r3, 8005c5e <_fflush_r+0x1a>
 8005c5a:	f7ff fa19 	bl	8005090 <__sinit>
 8005c5e:	4b14      	ldr	r3, [pc, #80]	; (8005cb0 <_fflush_r+0x6c>)
 8005c60:	429c      	cmp	r4, r3
 8005c62:	d11b      	bne.n	8005c9c <_fflush_r+0x58>
 8005c64:	686c      	ldr	r4, [r5, #4]
 8005c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0ef      	beq.n	8005c4e <_fflush_r+0xa>
 8005c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c70:	07d0      	lsls	r0, r2, #31
 8005c72:	d404      	bmi.n	8005c7e <_fflush_r+0x3a>
 8005c74:	0599      	lsls	r1, r3, #22
 8005c76:	d402      	bmi.n	8005c7e <_fflush_r+0x3a>
 8005c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c7a:	f7ff faa7 	bl	80051cc <__retarget_lock_acquire_recursive>
 8005c7e:	4628      	mov	r0, r5
 8005c80:	4621      	mov	r1, r4
 8005c82:	f7ff ff5d 	bl	8005b40 <__sflush_r>
 8005c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c88:	4605      	mov	r5, r0
 8005c8a:	07da      	lsls	r2, r3, #31
 8005c8c:	d4e0      	bmi.n	8005c50 <_fflush_r+0xc>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	059b      	lsls	r3, r3, #22
 8005c92:	d4dd      	bmi.n	8005c50 <_fflush_r+0xc>
 8005c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c96:	f7ff fa9a 	bl	80051ce <__retarget_lock_release_recursive>
 8005c9a:	e7d9      	b.n	8005c50 <_fflush_r+0xc>
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <_fflush_r+0x70>)
 8005c9e:	429c      	cmp	r4, r3
 8005ca0:	d101      	bne.n	8005ca6 <_fflush_r+0x62>
 8005ca2:	68ac      	ldr	r4, [r5, #8]
 8005ca4:	e7df      	b.n	8005c66 <_fflush_r+0x22>
 8005ca6:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <_fflush_r+0x74>)
 8005ca8:	429c      	cmp	r4, r3
 8005caa:	bf08      	it	eq
 8005cac:	68ec      	ldreq	r4, [r5, #12]
 8005cae:	e7da      	b.n	8005c66 <_fflush_r+0x22>
 8005cb0:	08005f78 	.word	0x08005f78
 8005cb4:	08005f98 	.word	0x08005f98
 8005cb8:	08005f58 	.word	0x08005f58

08005cbc <_lseek_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4d05      	ldr	r5, [pc, #20]	; (8005cdc <_lseek_r+0x20>)
 8005cc8:	602a      	str	r2, [r5, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f7fb fd31 	bl	8001732 <_lseek>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d102      	bne.n	8005cda <_lseek_r+0x1e>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	b103      	cbz	r3, 8005cda <_lseek_r+0x1e>
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	20000250 	.word	0x20000250

08005ce0 <__swhatbuf_r>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	460e      	mov	r6, r1
 8005ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce8:	4614      	mov	r4, r2
 8005cea:	2900      	cmp	r1, #0
 8005cec:	461d      	mov	r5, r3
 8005cee:	b096      	sub	sp, #88	; 0x58
 8005cf0:	da08      	bge.n	8005d04 <__swhatbuf_r+0x24>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cf8:	602a      	str	r2, [r5, #0]
 8005cfa:	061a      	lsls	r2, r3, #24
 8005cfc:	d410      	bmi.n	8005d20 <__swhatbuf_r+0x40>
 8005cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d02:	e00e      	b.n	8005d22 <__swhatbuf_r+0x42>
 8005d04:	466a      	mov	r2, sp
 8005d06:	f000 f8c5 	bl	8005e94 <_fstat_r>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	dbf1      	blt.n	8005cf2 <__swhatbuf_r+0x12>
 8005d0e:	9a01      	ldr	r2, [sp, #4]
 8005d10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d18:	425a      	negs	r2, r3
 8005d1a:	415a      	adcs	r2, r3
 8005d1c:	602a      	str	r2, [r5, #0]
 8005d1e:	e7ee      	b.n	8005cfe <__swhatbuf_r+0x1e>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	2000      	movs	r0, #0
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	b016      	add	sp, #88	; 0x58
 8005d28:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d2c <__smakebuf_r>:
 8005d2c:	898b      	ldrh	r3, [r1, #12]
 8005d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d30:	079d      	lsls	r5, r3, #30
 8005d32:	4606      	mov	r6, r0
 8005d34:	460c      	mov	r4, r1
 8005d36:	d507      	bpl.n	8005d48 <__smakebuf_r+0x1c>
 8005d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	6123      	str	r3, [r4, #16]
 8005d40:	2301      	movs	r3, #1
 8005d42:	6163      	str	r3, [r4, #20]
 8005d44:	b002      	add	sp, #8
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	466a      	mov	r2, sp
 8005d4a:	ab01      	add	r3, sp, #4
 8005d4c:	f7ff ffc8 	bl	8005ce0 <__swhatbuf_r>
 8005d50:	9900      	ldr	r1, [sp, #0]
 8005d52:	4605      	mov	r5, r0
 8005d54:	4630      	mov	r0, r6
 8005d56:	f7ff fa5b 	bl	8005210 <_malloc_r>
 8005d5a:	b948      	cbnz	r0, 8005d70 <__smakebuf_r+0x44>
 8005d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d60:	059a      	lsls	r2, r3, #22
 8005d62:	d4ef      	bmi.n	8005d44 <__smakebuf_r+0x18>
 8005d64:	f023 0303 	bic.w	r3, r3, #3
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	e7e3      	b.n	8005d38 <__smakebuf_r+0xc>
 8005d70:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <__smakebuf_r+0x7c>)
 8005d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	6020      	str	r0, [r4, #0]
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	9b00      	ldr	r3, [sp, #0]
 8005d80:	6120      	str	r0, [r4, #16]
 8005d82:	6163      	str	r3, [r4, #20]
 8005d84:	9b01      	ldr	r3, [sp, #4]
 8005d86:	b15b      	cbz	r3, 8005da0 <__smakebuf_r+0x74>
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d8e:	f000 f893 	bl	8005eb8 <_isatty_r>
 8005d92:	b128      	cbz	r0, 8005da0 <__smakebuf_r+0x74>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	89a0      	ldrh	r0, [r4, #12]
 8005da2:	4305      	orrs	r5, r0
 8005da4:	81a5      	strh	r5, [r4, #12]
 8005da6:	e7cd      	b.n	8005d44 <__smakebuf_r+0x18>
 8005da8:	08005029 	.word	0x08005029

08005dac <memchr>:
 8005dac:	4603      	mov	r3, r0
 8005dae:	b510      	push	{r4, lr}
 8005db0:	b2c9      	uxtb	r1, r1
 8005db2:	4402      	add	r2, r0
 8005db4:	4293      	cmp	r3, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	d101      	bne.n	8005dbe <memchr+0x12>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e003      	b.n	8005dc6 <memchr+0x1a>
 8005dbe:	7804      	ldrb	r4, [r0, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	428c      	cmp	r4, r1
 8005dc4:	d1f6      	bne.n	8005db4 <memchr+0x8>
 8005dc6:	bd10      	pop	{r4, pc}

08005dc8 <__malloc_lock>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	; (8005dd0 <__malloc_lock+0x8>)
 8005dca:	f7ff b9ff 	b.w	80051cc <__retarget_lock_acquire_recursive>
 8005dce:	bf00      	nop
 8005dd0:	20000244 	.word	0x20000244

08005dd4 <__malloc_unlock>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	; (8005ddc <__malloc_unlock+0x8>)
 8005dd6:	f7ff b9fa 	b.w	80051ce <__retarget_lock_release_recursive>
 8005dda:	bf00      	nop
 8005ddc:	20000244 	.word	0x20000244

08005de0 <_free_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4605      	mov	r5, r0
 8005de4:	2900      	cmp	r1, #0
 8005de6:	d040      	beq.n	8005e6a <_free_r+0x8a>
 8005de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dec:	1f0c      	subs	r4, r1, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bfb8      	it	lt
 8005df2:	18e4      	addlt	r4, r4, r3
 8005df4:	f7ff ffe8 	bl	8005dc8 <__malloc_lock>
 8005df8:	4a1c      	ldr	r2, [pc, #112]	; (8005e6c <_free_r+0x8c>)
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	b933      	cbnz	r3, 8005e0c <_free_r+0x2c>
 8005dfe:	6063      	str	r3, [r4, #4]
 8005e00:	6014      	str	r4, [r2, #0]
 8005e02:	4628      	mov	r0, r5
 8005e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e08:	f7ff bfe4 	b.w	8005dd4 <__malloc_unlock>
 8005e0c:	42a3      	cmp	r3, r4
 8005e0e:	d908      	bls.n	8005e22 <_free_r+0x42>
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	1821      	adds	r1, r4, r0
 8005e14:	428b      	cmp	r3, r1
 8005e16:	bf01      	itttt	eq
 8005e18:	6819      	ldreq	r1, [r3, #0]
 8005e1a:	685b      	ldreq	r3, [r3, #4]
 8005e1c:	1809      	addeq	r1, r1, r0
 8005e1e:	6021      	streq	r1, [r4, #0]
 8005e20:	e7ed      	b.n	8005dfe <_free_r+0x1e>
 8005e22:	461a      	mov	r2, r3
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	b10b      	cbz	r3, 8005e2c <_free_r+0x4c>
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	d9fa      	bls.n	8005e22 <_free_r+0x42>
 8005e2c:	6811      	ldr	r1, [r2, #0]
 8005e2e:	1850      	adds	r0, r2, r1
 8005e30:	42a0      	cmp	r0, r4
 8005e32:	d10b      	bne.n	8005e4c <_free_r+0x6c>
 8005e34:	6820      	ldr	r0, [r4, #0]
 8005e36:	4401      	add	r1, r0
 8005e38:	1850      	adds	r0, r2, r1
 8005e3a:	4283      	cmp	r3, r0
 8005e3c:	6011      	str	r1, [r2, #0]
 8005e3e:	d1e0      	bne.n	8005e02 <_free_r+0x22>
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	4401      	add	r1, r0
 8005e46:	6011      	str	r1, [r2, #0]
 8005e48:	6053      	str	r3, [r2, #4]
 8005e4a:	e7da      	b.n	8005e02 <_free_r+0x22>
 8005e4c:	d902      	bls.n	8005e54 <_free_r+0x74>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	602b      	str	r3, [r5, #0]
 8005e52:	e7d6      	b.n	8005e02 <_free_r+0x22>
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	1821      	adds	r1, r4, r0
 8005e58:	428b      	cmp	r3, r1
 8005e5a:	bf01      	itttt	eq
 8005e5c:	6819      	ldreq	r1, [r3, #0]
 8005e5e:	685b      	ldreq	r3, [r3, #4]
 8005e60:	1809      	addeq	r1, r1, r0
 8005e62:	6021      	streq	r1, [r4, #0]
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	6054      	str	r4, [r2, #4]
 8005e68:	e7cb      	b.n	8005e02 <_free_r+0x22>
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	20000248 	.word	0x20000248

08005e70 <_read_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4604      	mov	r4, r0
 8005e74:	4608      	mov	r0, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4d05      	ldr	r5, [pc, #20]	; (8005e90 <_read_r+0x20>)
 8005e7c:	602a      	str	r2, [r5, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f7fb fbfa 	bl	8001678 <_read>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_read_r+0x1e>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_read_r+0x1e>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	20000250 	.word	0x20000250

08005e94 <_fstat_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	2300      	movs	r3, #0
 8005e98:	4d06      	ldr	r5, [pc, #24]	; (8005eb4 <_fstat_r+0x20>)
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	f7fb fc2d 	bl	8001700 <_fstat>
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	d102      	bne.n	8005eb0 <_fstat_r+0x1c>
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	b103      	cbz	r3, 8005eb0 <_fstat_r+0x1c>
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000250 	.word	0x20000250

08005eb8 <_isatty_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	2300      	movs	r3, #0
 8005ebc:	4d05      	ldr	r5, [pc, #20]	; (8005ed4 <_isatty_r+0x1c>)
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	602b      	str	r3, [r5, #0]
 8005ec4:	f7fb fc2b 	bl	800171e <_isatty>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_isatty_r+0x1a>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_isatty_r+0x1a>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	20000250 	.word	0x20000250

08005ed8 <_init>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr

08005ee4 <_fini>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	bf00      	nop
 8005ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eea:	bc08      	pop	{r3}
 8005eec:	469e      	mov	lr, r3
 8005eee:	4770      	bx	lr
